
GccBoardProject1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000246c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000246c  0000246c  0001246c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000010  20000000  00002474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000003bc  20000010  00002484  00020010  2**2
                  ALLOC
  4 .stack        00002004  200003cc  00002840  00020010  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002900f  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000341f  00000000  00000000  000490a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005eaa  00000000  00000000  0004c4bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000438  00000000  00000000  00052369  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000848  00000000  00000000  000527a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001a9f0  00000000  00000000  00052fe9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000baa5  00000000  00000000  0006d9d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008e44f  00000000  00000000  0007947e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000aac  00000000  00000000  001078d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d0 23 00 20 e9 1c 00 00 e5 1c 00 00 e5 1c 00 00     .#. ............
	...
      2c:	e5 1c 00 00 00 00 00 00 00 00 00 00 e5 1c 00 00     ................
      3c:	e5 1c 00 00 e5 1c 00 00 e5 1c 00 00 e5 1c 00 00     ................
      4c:	e5 1c 00 00 e5 1c 00 00 e5 1c 00 00 e5 1c 00 00     ................
      5c:	e5 1c 00 00 e5 1c 00 00 99 13 00 00 a9 13 00 00     ................
      6c:	b9 13 00 00 d1 1d 00 00 c9 13 00 00 d9 13 00 00     ................
      7c:	e5 1c 00 00 e5 1c 00 00 e5 1c 00 00 e5 1c 00 00     ................
      8c:	e5 1c 00 00 e5 1c 00 00 e5 1c 00 00 e5 1c 00 00     ................
      9c:	e5 1c 00 00 e5 1c 00 00 e5 1c 00 00 e5 1c 00 00     ................
      ac:	e5 1c 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000010 	.word	0x20000010
      d4:	00000000 	.word	0x00000000
      d8:	00002474 	.word	0x00002474

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000014 	.word	0x20000014
     108:	00002474 	.word	0x00002474
     10c:	00002474 	.word	0x00002474
     110:	00000000 	.word	0x00000000

00000114 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     114:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     116:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     118:	2340      	movs	r3, #64	; 0x40
     11a:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     11c:	4281      	cmp	r1, r0
     11e:	d202      	bcs.n	126 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     120:	0018      	movs	r0, r3
     122:	bd10      	pop	{r4, pc}
		baud_calculated++;
     124:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     126:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     128:	1c63      	adds	r3, r4, #1
     12a:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     12c:	4288      	cmp	r0, r1
     12e:	d9f9      	bls.n	124 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     130:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     132:	2cff      	cmp	r4, #255	; 0xff
     134:	d8f4      	bhi.n	120 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     136:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     138:	2300      	movs	r3, #0
     13a:	e7f1      	b.n	120 <_sercom_get_sync_baud_val+0xc>

0000013c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     13c:	b510      	push	{r4, lr}
     13e:	b082      	sub	sp, #8
     140:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     142:	4b0e      	ldr	r3, [pc, #56]	; (17c <sercom_set_gclk_generator+0x40>)
     144:	781b      	ldrb	r3, [r3, #0]
     146:	2b00      	cmp	r3, #0
     148:	d007      	beq.n	15a <sercom_set_gclk_generator+0x1e>
     14a:	2900      	cmp	r1, #0
     14c:	d105      	bne.n	15a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     14e:	4b0b      	ldr	r3, [pc, #44]	; (17c <sercom_set_gclk_generator+0x40>)
     150:	785b      	ldrb	r3, [r3, #1]
     152:	4283      	cmp	r3, r0
     154:	d010      	beq.n	178 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     156:	201d      	movs	r0, #29
     158:	e00c      	b.n	174 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     15a:	a901      	add	r1, sp, #4
     15c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     15e:	2013      	movs	r0, #19
     160:	4b07      	ldr	r3, [pc, #28]	; (180 <sercom_set_gclk_generator+0x44>)
     162:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     164:	2013      	movs	r0, #19
     166:	4b07      	ldr	r3, [pc, #28]	; (184 <sercom_set_gclk_generator+0x48>)
     168:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     16a:	4b04      	ldr	r3, [pc, #16]	; (17c <sercom_set_gclk_generator+0x40>)
     16c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     16e:	2201      	movs	r2, #1
     170:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     172:	2000      	movs	r0, #0
}
     174:	b002      	add	sp, #8
     176:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     178:	2000      	movs	r0, #0
     17a:	e7fb      	b.n	174 <sercom_set_gclk_generator+0x38>
     17c:	2000002c 	.word	0x2000002c
     180:	00001b8d 	.word	0x00001b8d
     184:	00001b01 	.word	0x00001b01

00000188 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     188:	4b40      	ldr	r3, [pc, #256]	; (28c <_sercom_get_default_pad+0x104>)
     18a:	4298      	cmp	r0, r3
     18c:	d031      	beq.n	1f2 <_sercom_get_default_pad+0x6a>
     18e:	d90a      	bls.n	1a6 <_sercom_get_default_pad+0x1e>
     190:	4b3f      	ldr	r3, [pc, #252]	; (290 <_sercom_get_default_pad+0x108>)
     192:	4298      	cmp	r0, r3
     194:	d04d      	beq.n	232 <_sercom_get_default_pad+0xaa>
     196:	4b3f      	ldr	r3, [pc, #252]	; (294 <_sercom_get_default_pad+0x10c>)
     198:	4298      	cmp	r0, r3
     19a:	d05a      	beq.n	252 <_sercom_get_default_pad+0xca>
     19c:	4b3e      	ldr	r3, [pc, #248]	; (298 <_sercom_get_default_pad+0x110>)
     19e:	4298      	cmp	r0, r3
     1a0:	d037      	beq.n	212 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     1a2:	2000      	movs	r0, #0
}
     1a4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     1a6:	4b3d      	ldr	r3, [pc, #244]	; (29c <_sercom_get_default_pad+0x114>)
     1a8:	4298      	cmp	r0, r3
     1aa:	d00c      	beq.n	1c6 <_sercom_get_default_pad+0x3e>
     1ac:	4b3c      	ldr	r3, [pc, #240]	; (2a0 <_sercom_get_default_pad+0x118>)
     1ae:	4298      	cmp	r0, r3
     1b0:	d1f7      	bne.n	1a2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     1b2:	2901      	cmp	r1, #1
     1b4:	d017      	beq.n	1e6 <_sercom_get_default_pad+0x5e>
     1b6:	2900      	cmp	r1, #0
     1b8:	d05d      	beq.n	276 <_sercom_get_default_pad+0xee>
     1ba:	2902      	cmp	r1, #2
     1bc:	d015      	beq.n	1ea <_sercom_get_default_pad+0x62>
     1be:	2903      	cmp	r1, #3
     1c0:	d015      	beq.n	1ee <_sercom_get_default_pad+0x66>
	return 0;
     1c2:	2000      	movs	r0, #0
     1c4:	e7ee      	b.n	1a4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     1c6:	2901      	cmp	r1, #1
     1c8:	d007      	beq.n	1da <_sercom_get_default_pad+0x52>
     1ca:	2900      	cmp	r1, #0
     1cc:	d051      	beq.n	272 <_sercom_get_default_pad+0xea>
     1ce:	2902      	cmp	r1, #2
     1d0:	d005      	beq.n	1de <_sercom_get_default_pad+0x56>
     1d2:	2903      	cmp	r1, #3
     1d4:	d005      	beq.n	1e2 <_sercom_get_default_pad+0x5a>
	return 0;
     1d6:	2000      	movs	r0, #0
     1d8:	e7e4      	b.n	1a4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     1da:	4832      	ldr	r0, [pc, #200]	; (2a4 <_sercom_get_default_pad+0x11c>)
     1dc:	e7e2      	b.n	1a4 <_sercom_get_default_pad+0x1c>
     1de:	4832      	ldr	r0, [pc, #200]	; (2a8 <_sercom_get_default_pad+0x120>)
     1e0:	e7e0      	b.n	1a4 <_sercom_get_default_pad+0x1c>
     1e2:	4832      	ldr	r0, [pc, #200]	; (2ac <_sercom_get_default_pad+0x124>)
     1e4:	e7de      	b.n	1a4 <_sercom_get_default_pad+0x1c>
     1e6:	4832      	ldr	r0, [pc, #200]	; (2b0 <_sercom_get_default_pad+0x128>)
     1e8:	e7dc      	b.n	1a4 <_sercom_get_default_pad+0x1c>
     1ea:	4832      	ldr	r0, [pc, #200]	; (2b4 <_sercom_get_default_pad+0x12c>)
     1ec:	e7da      	b.n	1a4 <_sercom_get_default_pad+0x1c>
     1ee:	4832      	ldr	r0, [pc, #200]	; (2b8 <_sercom_get_default_pad+0x130>)
     1f0:	e7d8      	b.n	1a4 <_sercom_get_default_pad+0x1c>
     1f2:	2901      	cmp	r1, #1
     1f4:	d007      	beq.n	206 <_sercom_get_default_pad+0x7e>
     1f6:	2900      	cmp	r1, #0
     1f8:	d03f      	beq.n	27a <_sercom_get_default_pad+0xf2>
     1fa:	2902      	cmp	r1, #2
     1fc:	d005      	beq.n	20a <_sercom_get_default_pad+0x82>
     1fe:	2903      	cmp	r1, #3
     200:	d005      	beq.n	20e <_sercom_get_default_pad+0x86>
	return 0;
     202:	2000      	movs	r0, #0
     204:	e7ce      	b.n	1a4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     206:	482d      	ldr	r0, [pc, #180]	; (2bc <_sercom_get_default_pad+0x134>)
     208:	e7cc      	b.n	1a4 <_sercom_get_default_pad+0x1c>
     20a:	482d      	ldr	r0, [pc, #180]	; (2c0 <_sercom_get_default_pad+0x138>)
     20c:	e7ca      	b.n	1a4 <_sercom_get_default_pad+0x1c>
     20e:	482d      	ldr	r0, [pc, #180]	; (2c4 <_sercom_get_default_pad+0x13c>)
     210:	e7c8      	b.n	1a4 <_sercom_get_default_pad+0x1c>
     212:	2901      	cmp	r1, #1
     214:	d007      	beq.n	226 <_sercom_get_default_pad+0x9e>
     216:	2900      	cmp	r1, #0
     218:	d031      	beq.n	27e <_sercom_get_default_pad+0xf6>
     21a:	2902      	cmp	r1, #2
     21c:	d005      	beq.n	22a <_sercom_get_default_pad+0xa2>
     21e:	2903      	cmp	r1, #3
     220:	d005      	beq.n	22e <_sercom_get_default_pad+0xa6>
	return 0;
     222:	2000      	movs	r0, #0
     224:	e7be      	b.n	1a4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     226:	4828      	ldr	r0, [pc, #160]	; (2c8 <_sercom_get_default_pad+0x140>)
     228:	e7bc      	b.n	1a4 <_sercom_get_default_pad+0x1c>
     22a:	4828      	ldr	r0, [pc, #160]	; (2cc <_sercom_get_default_pad+0x144>)
     22c:	e7ba      	b.n	1a4 <_sercom_get_default_pad+0x1c>
     22e:	4828      	ldr	r0, [pc, #160]	; (2d0 <_sercom_get_default_pad+0x148>)
     230:	e7b8      	b.n	1a4 <_sercom_get_default_pad+0x1c>
     232:	2901      	cmp	r1, #1
     234:	d007      	beq.n	246 <_sercom_get_default_pad+0xbe>
     236:	2900      	cmp	r1, #0
     238:	d023      	beq.n	282 <_sercom_get_default_pad+0xfa>
     23a:	2902      	cmp	r1, #2
     23c:	d005      	beq.n	24a <_sercom_get_default_pad+0xc2>
     23e:	2903      	cmp	r1, #3
     240:	d005      	beq.n	24e <_sercom_get_default_pad+0xc6>
	return 0;
     242:	2000      	movs	r0, #0
     244:	e7ae      	b.n	1a4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     246:	4823      	ldr	r0, [pc, #140]	; (2d4 <_sercom_get_default_pad+0x14c>)
     248:	e7ac      	b.n	1a4 <_sercom_get_default_pad+0x1c>
     24a:	4823      	ldr	r0, [pc, #140]	; (2d8 <_sercom_get_default_pad+0x150>)
     24c:	e7aa      	b.n	1a4 <_sercom_get_default_pad+0x1c>
     24e:	4823      	ldr	r0, [pc, #140]	; (2dc <_sercom_get_default_pad+0x154>)
     250:	e7a8      	b.n	1a4 <_sercom_get_default_pad+0x1c>
     252:	2901      	cmp	r1, #1
     254:	d007      	beq.n	266 <_sercom_get_default_pad+0xde>
     256:	2900      	cmp	r1, #0
     258:	d015      	beq.n	286 <_sercom_get_default_pad+0xfe>
     25a:	2902      	cmp	r1, #2
     25c:	d005      	beq.n	26a <_sercom_get_default_pad+0xe2>
     25e:	2903      	cmp	r1, #3
     260:	d005      	beq.n	26e <_sercom_get_default_pad+0xe6>
	return 0;
     262:	2000      	movs	r0, #0
     264:	e79e      	b.n	1a4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     266:	481e      	ldr	r0, [pc, #120]	; (2e0 <_sercom_get_default_pad+0x158>)
     268:	e79c      	b.n	1a4 <_sercom_get_default_pad+0x1c>
     26a:	481e      	ldr	r0, [pc, #120]	; (2e4 <_sercom_get_default_pad+0x15c>)
     26c:	e79a      	b.n	1a4 <_sercom_get_default_pad+0x1c>
     26e:	481e      	ldr	r0, [pc, #120]	; (2e8 <_sercom_get_default_pad+0x160>)
     270:	e798      	b.n	1a4 <_sercom_get_default_pad+0x1c>
     272:	481e      	ldr	r0, [pc, #120]	; (2ec <_sercom_get_default_pad+0x164>)
     274:	e796      	b.n	1a4 <_sercom_get_default_pad+0x1c>
     276:	2003      	movs	r0, #3
     278:	e794      	b.n	1a4 <_sercom_get_default_pad+0x1c>
     27a:	481d      	ldr	r0, [pc, #116]	; (2f0 <_sercom_get_default_pad+0x168>)
     27c:	e792      	b.n	1a4 <_sercom_get_default_pad+0x1c>
     27e:	481d      	ldr	r0, [pc, #116]	; (2f4 <_sercom_get_default_pad+0x16c>)
     280:	e790      	b.n	1a4 <_sercom_get_default_pad+0x1c>
     282:	481d      	ldr	r0, [pc, #116]	; (2f8 <_sercom_get_default_pad+0x170>)
     284:	e78e      	b.n	1a4 <_sercom_get_default_pad+0x1c>
     286:	481d      	ldr	r0, [pc, #116]	; (2fc <_sercom_get_default_pad+0x174>)
     288:	e78c      	b.n	1a4 <_sercom_get_default_pad+0x1c>
     28a:	46c0      	nop			; (mov r8, r8)
     28c:	42001000 	.word	0x42001000
     290:	42001800 	.word	0x42001800
     294:	42001c00 	.word	0x42001c00
     298:	42001400 	.word	0x42001400
     29c:	42000800 	.word	0x42000800
     2a0:	42000c00 	.word	0x42000c00
     2a4:	00050003 	.word	0x00050003
     2a8:	00060003 	.word	0x00060003
     2ac:	00070003 	.word	0x00070003
     2b0:	00010003 	.word	0x00010003
     2b4:	001e0003 	.word	0x001e0003
     2b8:	001f0003 	.word	0x001f0003
     2bc:	00090003 	.word	0x00090003
     2c0:	000a0003 	.word	0x000a0003
     2c4:	000b0003 	.word	0x000b0003
     2c8:	00110003 	.word	0x00110003
     2cc:	00120003 	.word	0x00120003
     2d0:	00130003 	.word	0x00130003
     2d4:	000d0003 	.word	0x000d0003
     2d8:	000e0003 	.word	0x000e0003
     2dc:	000f0003 	.word	0x000f0003
     2e0:	00170003 	.word	0x00170003
     2e4:	00180003 	.word	0x00180003
     2e8:	00190003 	.word	0x00190003
     2ec:	00040003 	.word	0x00040003
     2f0:	00080003 	.word	0x00080003
     2f4:	00100003 	.word	0x00100003
     2f8:	000c0003 	.word	0x000c0003
     2fc:	00160003 	.word	0x00160003

00000300 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     300:	b530      	push	{r4, r5, lr}
     302:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     304:	4b0b      	ldr	r3, [pc, #44]	; (334 <_sercom_get_sercom_inst_index+0x34>)
     306:	466a      	mov	r2, sp
     308:	cb32      	ldmia	r3!, {r1, r4, r5}
     30a:	c232      	stmia	r2!, {r1, r4, r5}
     30c:	cb32      	ldmia	r3!, {r1, r4, r5}
     30e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     310:	9b00      	ldr	r3, [sp, #0]
     312:	4283      	cmp	r3, r0
     314:	d00b      	beq.n	32e <_sercom_get_sercom_inst_index+0x2e>
     316:	2301      	movs	r3, #1
     318:	009a      	lsls	r2, r3, #2
     31a:	4669      	mov	r1, sp
     31c:	5852      	ldr	r2, [r2, r1]
     31e:	4282      	cmp	r2, r0
     320:	d006      	beq.n	330 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     322:	3301      	adds	r3, #1
     324:	2b06      	cmp	r3, #6
     326:	d1f7      	bne.n	318 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     328:	2000      	movs	r0, #0
}
     32a:	b007      	add	sp, #28
     32c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     32e:	2300      	movs	r3, #0
			return i;
     330:	b2d8      	uxtb	r0, r3
     332:	e7fa      	b.n	32a <_sercom_get_sercom_inst_index+0x2a>
     334:	000023d4 	.word	0x000023d4

00000338 <uartInit>:
 */ 
#include "SERCOMforUSART.h"
uint32_t fref = 48000000;
uint64_t baudRate = 0;

void uartInit(uint32_t fbaud){
     338:	b570      	push	{r4, r5, r6, lr}
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     33a:	2280      	movs	r2, #128	; 0x80
     33c:	0152      	lsls	r2, r2, #5
     33e:	4b25      	ldr	r3, [pc, #148]	; (3d4 <uartInit+0x9c>)
     340:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(SERCOM3_IRQn); // global interrupt has been enabled.
	SERCOM3->USART.CTRLA.bit.ENABLE = 0;
     342:	4c25      	ldr	r4, [pc, #148]	; (3d8 <uartInit+0xa0>)
     344:	6823      	ldr	r3, [r4, #0]
     346:	2502      	movs	r5, #2
     348:	43ab      	bics	r3, r5
     34a:	6023      	str	r3, [r4, #0]
	SERCOM3->USART.CTRLA.bit.MODE = 0x1; // for usart with internal clock
     34c:	6823      	ldr	r3, [r4, #0]
     34e:	221c      	movs	r2, #28
     350:	4393      	bics	r3, r2
     352:	3a18      	subs	r2, #24
     354:	4313      	orrs	r3, r2
     356:	6023      	str	r3, [r4, #0]
	SERCOM3->USART.CTRLA.bit.CMODE = 0; // for async communication
     358:	6823      	ldr	r3, [r4, #0]
     35a:	4a20      	ldr	r2, [pc, #128]	; (3dc <uartInit+0xa4>)
     35c:	4013      	ands	r3, r2
     35e:	6023      	str	r3, [r4, #0]
	SERCOM3->USART.CTRLA.bit.RXPO = 0x1; // for pad[1] for rx pin pa23 as pad[1]
     360:	6823      	ldr	r3, [r4, #0]
     362:	4a1f      	ldr	r2, [pc, #124]	; (3e0 <uartInit+0xa8>)
     364:	401a      	ands	r2, r3
     366:	2380      	movs	r3, #128	; 0x80
     368:	035b      	lsls	r3, r3, #13
     36a:	4313      	orrs	r3, r2
     36c:	6023      	str	r3, [r4, #0]
	SERCOM3->USART.CTRLA.bit.TXPO = 0x0;
     36e:	6823      	ldr	r3, [r4, #0]
     370:	4a1c      	ldr	r2, [pc, #112]	; (3e4 <uartInit+0xac>)
     372:	4013      	ands	r3, r2
     374:	6023      	str	r3, [r4, #0]
	SERCOM3->USART.CTRLB.bit.CHSIZE = 0x0; // for 8 bits
     376:	6863      	ldr	r3, [r4, #4]
     378:	2207      	movs	r2, #7
     37a:	4393      	bics	r3, r2
     37c:	6063      	str	r3, [r4, #4]
	SERCOM3->USART.CTRLA.bit.DORD = 1;// most significant bit first
     37e:	6822      	ldr	r2, [r4, #0]
     380:	2380      	movs	r3, #128	; 0x80
     382:	05db      	lsls	r3, r3, #23
     384:	4313      	orrs	r3, r2
     386:	6023      	str	r3, [r4, #0]
	SERCOM3->USART.CTRLA.bit.FORM = 0x0; // only frame, so without party bit
     388:	6823      	ldr	r3, [r4, #0]
     38a:	4a17      	ldr	r2, [pc, #92]	; (3e8 <uartInit+0xb0>)
     38c:	4013      	ands	r3, r2
     38e:	6023      	str	r3, [r4, #0]
	SERCOM3->USART.CTRLB.bit.SBMODE = 0; // for one stop bit sbmode is 0, 2 stop bit sbmod is 1
     390:	6863      	ldr	r3, [r4, #4]
     392:	2240      	movs	r2, #64	; 0x40
     394:	4393      	bics	r3, r2
     396:	6063      	str	r3, [r4, #4]

	uint64_t baudRate = (uint64_t)65536 * (fref - 16 * fbaud) / fref; 
     398:	4b14      	ldr	r3, [pc, #80]	; (3ec <uartInit+0xb4>)
     39a:	681a      	ldr	r2, [r3, #0]
     39c:	0100      	lsls	r0, r0, #4
     39e:	1a10      	subs	r0, r2, r0
     3a0:	0c01      	lsrs	r1, r0, #16
     3a2:	0400      	lsls	r0, r0, #16
     3a4:	2300      	movs	r3, #0
     3a6:	4e12      	ldr	r6, [pc, #72]	; (3f0 <uartInit+0xb8>)
     3a8:	47b0      	blx	r6
	SERCOM3->USART.BAUD.bit.BAUD = baudRate;
     3aa:	b280      	uxth	r0, r0
     3ac:	81a0      	strh	r0, [r4, #12]
	SERCOM3->USART.CTRLB.bit.RXEN = 1; // receiver is enabled
     3ae:	6862      	ldr	r2, [r4, #4]
     3b0:	2380      	movs	r3, #128	; 0x80
     3b2:	029b      	lsls	r3, r3, #10
     3b4:	4313      	orrs	r3, r2
     3b6:	6063      	str	r3, [r4, #4]
	SERCOM3->USART.CTRLB.bit.TXEN = 1;
     3b8:	6862      	ldr	r2, [r4, #4]
     3ba:	2380      	movs	r3, #128	; 0x80
     3bc:	025b      	lsls	r3, r3, #9
     3be:	4313      	orrs	r3, r2
     3c0:	6063      	str	r3, [r4, #4]
	SERCOM3->USART.INTENSET.bit.RXC = 1; // receive compleate interrupt is enabled
     3c2:	7da3      	ldrb	r3, [r4, #22]
     3c4:	2204      	movs	r2, #4
     3c6:	4313      	orrs	r3, r2
     3c8:	75a3      	strb	r3, [r4, #22]
	SERCOM3->USART.CTRLA.bit.ENABLE = 1;
     3ca:	6823      	ldr	r3, [r4, #0]
     3cc:	431d      	orrs	r5, r3
     3ce:	6025      	str	r5, [r4, #0]
	
}	
     3d0:	bd70      	pop	{r4, r5, r6, pc}
     3d2:	46c0      	nop			; (mov r8, r8)
     3d4:	e000e100 	.word	0xe000e100
     3d8:	42001400 	.word	0x42001400
     3dc:	efffffff 	.word	0xefffffff
     3e0:	ffcfffff 	.word	0xffcfffff
     3e4:	fffcffff 	.word	0xfffcffff
     3e8:	f0ffffff 	.word	0xf0ffffff
     3ec:	20000000 	.word	0x20000000
     3f0:	00002169 	.word	0x00002169

000003f4 <uartWrite>:
void uartWrite(uint8_t *veri, uint8_t karakterAdedi){
     3f4:	b510      	push	{r4, lr}
	
	if(SERCOM3->USART.INTFLAG.bit.DRE == 1){
     3f6:	4b0d      	ldr	r3, [pc, #52]	; (42c <uartWrite+0x38>)
     3f8:	7e1b      	ldrb	r3, [r3, #24]
     3fa:	07db      	lsls	r3, r3, #31
     3fc:	d400      	bmi.n	400 <uartWrite+0xc>
			while(!SERCOM3->USART.INTFLAG.bit.TXC){}
			
			}
	}

}
     3fe:	bd10      	pop	{r4, pc}
		for(uint8_t a = 0; a < karakterAdedi; a++){
     400:	2900      	cmp	r1, #0
     402:	d0fc      	beq.n	3fe <uartWrite+0xa>
     404:	0004      	movs	r4, r0
     406:	3901      	subs	r1, #1
     408:	b2c9      	uxtb	r1, r1
     40a:	3101      	adds	r1, #1
     40c:	1840      	adds	r0, r0, r1
			SERCOM3->USART.DATA.bit.DATA = *(veri + a);
     40e:	4a07      	ldr	r2, [pc, #28]	; (42c <uartWrite+0x38>)
     410:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     412:	7821      	ldrb	r1, [r4, #0]
     414:	0a5b      	lsrs	r3, r3, #9
     416:	025b      	lsls	r3, r3, #9
     418:	430b      	orrs	r3, r1
     41a:	8513      	strh	r3, [r2, #40]	; 0x28
			while(!SERCOM3->USART.INTFLAG.bit.TXC){}
     41c:	7e13      	ldrb	r3, [r2, #24]
     41e:	079b      	lsls	r3, r3, #30
     420:	d5fc      	bpl.n	41c <uartWrite+0x28>
     422:	3401      	adds	r4, #1
		for(uint8_t a = 0; a < karakterAdedi; a++){
     424:	4284      	cmp	r4, r0
     426:	d1f3      	bne.n	410 <uartWrite+0x1c>
     428:	e7e9      	b.n	3fe <uartWrite+0xa>
     42a:	46c0      	nop			; (mov r8, r8)
     42c:	42001400 	.word	0x42001400

00000430 <writeEnable>:
	while ((spi_is_ready_to_write(&spi_master_instance) != true)){};
	while ((spi_write_buffer_wait(&spi_master_instance, opcode, 2) != STATUS_OK)){};
	spi_select_slave(&spi_master_instance, &slave, false);
}

void writeEnable(){
     430:	b530      	push	{r4, r5, lr}
     432:	b083      	sub	sp, #12
	uint16_t opcode[1] = {0x06};
     434:	2206      	movs	r2, #6
     436:	ab01      	add	r3, sp, #4
     438:	801a      	strh	r2, [r3, #0]
	spi_select_slave(&spi_master_instance, &slave, true);
     43a:	4c0d      	ldr	r4, [pc, #52]	; (470 <writeEnable+0x40>)
     43c:	3a05      	subs	r2, #5
     43e:	490d      	ldr	r1, [pc, #52]	; (474 <writeEnable+0x44>)
     440:	0020      	movs	r0, r4
     442:	4b0d      	ldr	r3, [pc, #52]	; (478 <writeEnable+0x48>)
     444:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     446:	6821      	ldr	r1, [r4, #0]
	while ((spi_is_ready_to_write(&spi_master_instance) != true)){};
     448:	2201      	movs	r2, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     44a:	7e0b      	ldrb	r3, [r1, #24]
     44c:	4213      	tst	r3, r2
     44e:	d0fc      	beq.n	44a <writeEnable+0x1a>
	while ((spi_write_buffer_wait(&spi_master_instance, opcode, 1) != STATUS_OK)){};
     450:	4d07      	ldr	r5, [pc, #28]	; (470 <writeEnable+0x40>)
     452:	4c0a      	ldr	r4, [pc, #40]	; (47c <writeEnable+0x4c>)
     454:	2201      	movs	r2, #1
     456:	a901      	add	r1, sp, #4
     458:	0028      	movs	r0, r5
     45a:	47a0      	blx	r4
     45c:	2800      	cmp	r0, #0
     45e:	d1f9      	bne.n	454 <writeEnable+0x24>
	spi_select_slave(&spi_master_instance, &slave, false);
     460:	2200      	movs	r2, #0
     462:	4904      	ldr	r1, [pc, #16]	; (474 <writeEnable+0x44>)
     464:	4802      	ldr	r0, [pc, #8]	; (470 <writeEnable+0x40>)
     466:	4b04      	ldr	r3, [pc, #16]	; (478 <writeEnable+0x48>)
     468:	4798      	blx	r3
}
     46a:	b003      	add	sp, #12
     46c:	bd30      	pop	{r4, r5, pc}
     46e:	46c0      	nop			; (mov r8, r8)
     470:	2000038c 	.word	0x2000038c
     474:	200003c8 	.word	0x200003c8
     478:	00000de9 	.word	0x00000de9
     47c:	00000edd 	.word	0x00000edd

00000480 <readStatusRegister>:

void readStatusRegister(uint8_t *data){
     480:	b5f0      	push	{r4, r5, r6, r7, lr}
     482:	b083      	sub	sp, #12
     484:	0007      	movs	r7, r0
	spi_select_slave(&spi_master_instance, &slave, true);
     486:	4e0d      	ldr	r6, [pc, #52]	; (4bc <readStatusRegister+0x3c>)
     488:	4c0d      	ldr	r4, [pc, #52]	; (4c0 <readStatusRegister+0x40>)
     48a:	2201      	movs	r2, #1
     48c:	0031      	movs	r1, r6
     48e:	0020      	movs	r0, r4
     490:	4d0c      	ldr	r5, [pc, #48]	; (4c4 <readStatusRegister+0x44>)
     492:	47a8      	blx	r5
	uint16_t opcode[1] = {0x05};
     494:	a901      	add	r1, sp, #4
     496:	2305      	movs	r3, #5
     498:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&spi_master_instance, opcode, 1);
     49a:	2201      	movs	r2, #1
     49c:	0020      	movs	r0, r4
     49e:	4b0a      	ldr	r3, [pc, #40]	; (4c8 <readStatusRegister+0x48>)
     4a0:	4798      	blx	r3
	spi_read_buffer_wait(&spi_master_instance, data, 2, 0xff);
     4a2:	23ff      	movs	r3, #255	; 0xff
     4a4:	2202      	movs	r2, #2
     4a6:	0039      	movs	r1, r7
     4a8:	0020      	movs	r0, r4
     4aa:	4f08      	ldr	r7, [pc, #32]	; (4cc <readStatusRegister+0x4c>)
     4ac:	47b8      	blx	r7
	spi_select_slave(&spi_master_instance, &slave, false);
     4ae:	2200      	movs	r2, #0
     4b0:	0031      	movs	r1, r6
     4b2:	0020      	movs	r0, r4
     4b4:	47a8      	blx	r5
}
     4b6:	b003      	add	sp, #12
     4b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4ba:	46c0      	nop			; (mov r8, r8)
     4bc:	200003c8 	.word	0x200003c8
     4c0:	2000038c 	.word	0x2000038c
     4c4:	00000de9 	.word	0x00000de9
     4c8:	00000edd 	.word	0x00000edd
     4cc:	00000ccd 	.word	0x00000ccd

000004d0 <pageProgram>:
void pageProgram(uint32_t startedaddress, uint8_t *data, uint8_t howmuchdata){
     4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     4d2:	46d6      	mov	lr, sl
     4d4:	464f      	mov	r7, r9
     4d6:	4646      	mov	r6, r8
     4d8:	b5c0      	push	{r6, r7, lr}
     4da:	b086      	sub	sp, #24
     4dc:	4681      	mov	r9, r0
     4de:	000e      	movs	r6, r1
     4e0:	4692      	mov	sl, r2
	uint16_t opcode = 0x02;
     4e2:	2202      	movs	r2, #2
     4e4:	230e      	movs	r3, #14
     4e6:	a902      	add	r1, sp, #8
     4e8:	468c      	mov	ip, r1
     4ea:	4463      	add	r3, ip
     4ec:	801a      	strh	r2, [r3, #0]
	writeEnable();
     4ee:	4bb9      	ldr	r3, [pc, #740]	; (7d4 <pageProgram+0x304>)
     4f0:	4798      	blx	r3
	readStatusRegister(&valueofstatusreg);
     4f2:	4cb9      	ldr	r4, [pc, #740]	; (7d8 <pageProgram+0x308>)
     4f4:	0020      	movs	r0, r4
     4f6:	4bb9      	ldr	r3, [pc, #740]	; (7dc <pageProgram+0x30c>)
     4f8:	4798      	blx	r3
	while (!(0x02 == (0x03 & valueofstatusreg[0]))){
     4fa:	7823      	ldrb	r3, [r4, #0]
     4fc:	2203      	movs	r2, #3
     4fe:	4013      	ands	r3, r2
     500:	2b02      	cmp	r3, #2
     502:	d008      	beq.n	516 <pageProgram+0x46>
		readStatusRegister(&valueofstatusreg);
     504:	4cb4      	ldr	r4, [pc, #720]	; (7d8 <pageProgram+0x308>)
     506:	4fb5      	ldr	r7, [pc, #724]	; (7dc <pageProgram+0x30c>)
	while (!(0x02 == (0x03 & valueofstatusreg[0]))){
     508:	2503      	movs	r5, #3
		readStatusRegister(&valueofstatusreg);
     50a:	0020      	movs	r0, r4
     50c:	47b8      	blx	r7
	while (!(0x02 == (0x03 & valueofstatusreg[0]))){
     50e:	7823      	ldrb	r3, [r4, #0]
     510:	402b      	ands	r3, r5
     512:	2b02      	cmp	r3, #2
     514:	d1f9      	bne.n	50a <pageProgram+0x3a>
	volatile uint8_t max = 0xff, fark = 0x00;
     516:	200d      	movs	r0, #13
     518:	ab02      	add	r3, sp, #8
     51a:	469c      	mov	ip, r3
     51c:	4460      	add	r0, ip
     51e:	23ff      	movs	r3, #255	; 0xff
     520:	7003      	strb	r3, [r0, #0]
     522:	2300      	movs	r3, #0
     524:	aa05      	add	r2, sp, #20
     526:	7013      	strb	r3, [r2, #0]
	volatile uint16_t kalanplusone = 0x00;
     528:	220a      	movs	r2, #10
     52a:	4462      	add	r2, ip
     52c:	8013      	strh	r3, [r2, #0]
	byte3 = startedaddress;
     52e:	464b      	mov	r3, r9
     530:	4669      	mov	r1, sp
     532:	71cb      	strb	r3, [r1, #7]
     534:	79cb      	ldrb	r3, [r1, #7]
     536:	4661      	mov	r1, ip
     538:	71cb      	strb	r3, [r1, #7]
     53a:	3107      	adds	r1, #7
	byte2 = (startedaddress >> 8);
     53c:	464b      	mov	r3, r9
     53e:	0a1b      	lsrs	r3, r3, #8
     540:	b2db      	uxtb	r3, r3
     542:	ac04      	add	r4, sp, #16
     544:	7023      	strb	r3, [r4, #0]
	byte1 = (startedaddress >> 16);
     546:	464b      	mov	r3, r9
     548:	0c1b      	lsrs	r3, r3, #16
     54a:	b2db      	uxtb	r3, r3
     54c:	2409      	movs	r4, #9
     54e:	4464      	add	r4, ip
     550:	7023      	strb	r3, [r4, #0]
	kalanplusone = (max - byte3) + 1; // + suanki deger
     552:	7803      	ldrb	r3, [r0, #0]
     554:	7809      	ldrb	r1, [r1, #0]
     556:	3301      	adds	r3, #1
     558:	1a5b      	subs	r3, r3, r1
     55a:	b29b      	uxth	r3, r3
     55c:	8013      	strh	r3, [r2, #0]
	spi_select_slave(&spi_master_instance, &slave, true);
     55e:	2201      	movs	r2, #1
     560:	499f      	ldr	r1, [pc, #636]	; (7e0 <pageProgram+0x310>)
     562:	48a0      	ldr	r0, [pc, #640]	; (7e4 <pageProgram+0x314>)
     564:	4ba0      	ldr	r3, [pc, #640]	; (7e8 <pageProgram+0x318>)
     566:	4798      	blx	r3
	while ((spi_write_buffer_wait(&spi_master_instance, &opcode, 1) != STATUS_OK)){};
     568:	4c9e      	ldr	r4, [pc, #632]	; (7e4 <pageProgram+0x314>)
     56a:	4da0      	ldr	r5, [pc, #640]	; (7ec <pageProgram+0x31c>)
     56c:	2201      	movs	r2, #1
     56e:	230e      	movs	r3, #14
     570:	a902      	add	r1, sp, #8
     572:	468c      	mov	ip, r1
     574:	4463      	add	r3, ip
     576:	0019      	movs	r1, r3
     578:	0020      	movs	r0, r4
     57a:	47a8      	blx	r5
     57c:	2800      	cmp	r0, #0
     57e:	d1f5      	bne.n	56c <pageProgram+0x9c>
	while ((spi_write_buffer_wait(&spi_master_instance, &byte1, 1) != STATUS_OK)){};
     580:	4c98      	ldr	r4, [pc, #608]	; (7e4 <pageProgram+0x314>)
     582:	4d9a      	ldr	r5, [pc, #616]	; (7ec <pageProgram+0x31c>)
     584:	2201      	movs	r2, #1
     586:	2309      	movs	r3, #9
     588:	a902      	add	r1, sp, #8
     58a:	468c      	mov	ip, r1
     58c:	4463      	add	r3, ip
     58e:	0019      	movs	r1, r3
     590:	0020      	movs	r0, r4
     592:	47a8      	blx	r5
     594:	2800      	cmp	r0, #0
     596:	d1f5      	bne.n	584 <pageProgram+0xb4>
	while ((spi_write_buffer_wait(&spi_master_instance, &byte2, 1) != STATUS_OK)){};
     598:	4c92      	ldr	r4, [pc, #584]	; (7e4 <pageProgram+0x314>)
     59a:	4d94      	ldr	r5, [pc, #592]	; (7ec <pageProgram+0x31c>)
     59c:	2201      	movs	r2, #1
     59e:	a904      	add	r1, sp, #16
     5a0:	0020      	movs	r0, r4
     5a2:	47a8      	blx	r5
     5a4:	2800      	cmp	r0, #0
     5a6:	d1f9      	bne.n	59c <pageProgram+0xcc>
	while ((spi_write_buffer_wait(&spi_master_instance, &byte3, 1) != STATUS_OK)){};
     5a8:	4c8e      	ldr	r4, [pc, #568]	; (7e4 <pageProgram+0x314>)
     5aa:	4d90      	ldr	r5, [pc, #576]	; (7ec <pageProgram+0x31c>)
     5ac:	2201      	movs	r2, #1
     5ae:	ab02      	add	r3, sp, #8
     5b0:	1dd9      	adds	r1, r3, #7
     5b2:	0020      	movs	r0, r4
     5b4:	47a8      	blx	r5
     5b6:	2800      	cmp	r0, #0
     5b8:	d1f8      	bne.n	5ac <pageProgram+0xdc>
	if (kalanplusone >= howmuchdata){
     5ba:	230a      	movs	r3, #10
     5bc:	aa02      	add	r2, sp, #8
     5be:	4694      	mov	ip, r2
     5c0:	4463      	add	r3, ip
     5c2:	881b      	ldrh	r3, [r3, #0]
     5c4:	b29b      	uxth	r3, r3
     5c6:	4553      	cmp	r3, sl
     5c8:	d332      	bcc.n	630 <pageProgram+0x160>
		for (volatile uint8_t a = 0; a < howmuchdata; a++){
     5ca:	ab03      	add	r3, sp, #12
     5cc:	2200      	movs	r2, #0
     5ce:	701a      	strb	r2, [r3, #0]
     5d0:	781b      	ldrb	r3, [r3, #0]
     5d2:	b2db      	uxtb	r3, r3
     5d4:	459a      	cmp	sl, r3
     5d6:	d911      	bls.n	5fc <pageProgram+0x12c>
			while ((spi_write_buffer_wait(&spi_master_instance, (data + a), 1) != STATUS_OK)){};
     5d8:	ac03      	add	r4, sp, #12
     5da:	4d82      	ldr	r5, [pc, #520]	; (7e4 <pageProgram+0x314>)
     5dc:	4f83      	ldr	r7, [pc, #524]	; (7ec <pageProgram+0x31c>)
     5de:	7821      	ldrb	r1, [r4, #0]
     5e0:	1871      	adds	r1, r6, r1
     5e2:	2201      	movs	r2, #1
     5e4:	0028      	movs	r0, r5
     5e6:	47b8      	blx	r7
     5e8:	2800      	cmp	r0, #0
     5ea:	d1f8      	bne.n	5de <pageProgram+0x10e>
		for (volatile uint8_t a = 0; a < howmuchdata; a++){
     5ec:	7823      	ldrb	r3, [r4, #0]
     5ee:	3301      	adds	r3, #1
     5f0:	b2db      	uxtb	r3, r3
     5f2:	7023      	strb	r3, [r4, #0]
     5f4:	7823      	ldrb	r3, [r4, #0]
     5f6:	b2db      	uxtb	r3, r3
     5f8:	459a      	cmp	sl, r3
     5fa:	d8f0      	bhi.n	5de <pageProgram+0x10e>
		spi_select_slave(&spi_master_instance, &slave, false);
     5fc:	2200      	movs	r2, #0
     5fe:	4978      	ldr	r1, [pc, #480]	; (7e0 <pageProgram+0x310>)
     600:	4878      	ldr	r0, [pc, #480]	; (7e4 <pageProgram+0x314>)
     602:	4b79      	ldr	r3, [pc, #484]	; (7e8 <pageProgram+0x318>)
     604:	4798      	blx	r3
		readStatusRegister(&valueofstatusreg);
     606:	4c74      	ldr	r4, [pc, #464]	; (7d8 <pageProgram+0x308>)
     608:	0020      	movs	r0, r4
     60a:	4b74      	ldr	r3, [pc, #464]	; (7dc <pageProgram+0x30c>)
     60c:	4798      	blx	r3
		while ((0x01 == (0x01 & valueofstatusreg[0]))){ // wait until writing is completed
     60e:	7823      	ldrb	r3, [r4, #0]
     610:	07db      	lsls	r3, r3, #31
     612:	d507      	bpl.n	624 <pageProgram+0x154>
			readStatusRegister(&valueofstatusreg);
     614:	4c70      	ldr	r4, [pc, #448]	; (7d8 <pageProgram+0x308>)
     616:	4e71      	ldr	r6, [pc, #452]	; (7dc <pageProgram+0x30c>)
		while ((0x01 == (0x01 & valueofstatusreg[0]))){ // wait until writing is completed
     618:	2501      	movs	r5, #1
			readStatusRegister(&valueofstatusreg);
     61a:	0020      	movs	r0, r4
     61c:	47b0      	blx	r6
		while ((0x01 == (0x01 & valueofstatusreg[0]))){ // wait until writing is completed
     61e:	7823      	ldrb	r3, [r4, #0]
     620:	422b      	tst	r3, r5
     622:	d1fa      	bne.n	61a <pageProgram+0x14a>
}
     624:	b006      	add	sp, #24
     626:	bc1c      	pop	{r2, r3, r4}
     628:	4690      	mov	r8, r2
     62a:	4699      	mov	r9, r3
     62c:	46a2      	mov	sl, r4
     62e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (volatile uint8_t b = 0; b < kalanplusone; b++){
     630:	ab02      	add	r3, sp, #8
     632:	2200      	movs	r2, #0
     634:	715a      	strb	r2, [r3, #5]
     636:	795a      	ldrb	r2, [r3, #5]
     638:	230a      	movs	r3, #10
     63a:	a902      	add	r1, sp, #8
     63c:	468c      	mov	ip, r1
     63e:	4463      	add	r3, ip
     640:	881b      	ldrh	r3, [r3, #0]
     642:	b29b      	uxth	r3, r3
     644:	429a      	cmp	r2, r3
     646:	d217      	bcs.n	678 <pageProgram+0x1a8>
			while ((spi_write_buffer_wait(&spi_master_instance, (data + b), 1) != STATUS_OK)){};
     648:	ab02      	add	r3, sp, #8
     64a:	1d5c      	adds	r4, r3, #5
     64c:	4d65      	ldr	r5, [pc, #404]	; (7e4 <pageProgram+0x314>)
     64e:	4f67      	ldr	r7, [pc, #412]	; (7ec <pageProgram+0x31c>)
     650:	7821      	ldrb	r1, [r4, #0]
     652:	1871      	adds	r1, r6, r1
     654:	2201      	movs	r2, #1
     656:	0028      	movs	r0, r5
     658:	47b8      	blx	r7
     65a:	2800      	cmp	r0, #0
     65c:	d1f8      	bne.n	650 <pageProgram+0x180>
		for (volatile uint8_t b = 0; b < kalanplusone; b++){
     65e:	7823      	ldrb	r3, [r4, #0]
     660:	3301      	adds	r3, #1
     662:	b2db      	uxtb	r3, r3
     664:	7023      	strb	r3, [r4, #0]
     666:	7822      	ldrb	r2, [r4, #0]
     668:	230a      	movs	r3, #10
     66a:	a902      	add	r1, sp, #8
     66c:	468c      	mov	ip, r1
     66e:	4463      	add	r3, ip
     670:	881b      	ldrh	r3, [r3, #0]
     672:	b29b      	uxth	r3, r3
     674:	429a      	cmp	r2, r3
     676:	d3eb      	bcc.n	650 <pageProgram+0x180>
		spi_select_slave(&spi_master_instance, &slave, false);
     678:	2200      	movs	r2, #0
     67a:	4959      	ldr	r1, [pc, #356]	; (7e0 <pageProgram+0x310>)
     67c:	4859      	ldr	r0, [pc, #356]	; (7e4 <pageProgram+0x314>)
     67e:	4b5a      	ldr	r3, [pc, #360]	; (7e8 <pageProgram+0x318>)
     680:	4798      	blx	r3
		readStatusRegister(&valueofstatusreg);
     682:	4c55      	ldr	r4, [pc, #340]	; (7d8 <pageProgram+0x308>)
     684:	0020      	movs	r0, r4
     686:	4b55      	ldr	r3, [pc, #340]	; (7dc <pageProgram+0x30c>)
     688:	4798      	blx	r3
		while ((0x01 == (0x01 & valueofstatusreg[0]))){ // wait until writing is completed
     68a:	7823      	ldrb	r3, [r4, #0]
     68c:	07db      	lsls	r3, r3, #31
     68e:	d508      	bpl.n	6a2 <pageProgram+0x1d2>
			readStatusRegister(&valueofstatusreg);
     690:	4c51      	ldr	r4, [pc, #324]	; (7d8 <pageProgram+0x308>)
     692:	4b52      	ldr	r3, [pc, #328]	; (7dc <pageProgram+0x30c>)
     694:	4698      	mov	r8, r3
		while ((0x01 == (0x01 & valueofstatusreg[0]))){ // wait until writing is completed
     696:	2501      	movs	r5, #1
			readStatusRegister(&valueofstatusreg);
     698:	0020      	movs	r0, r4
     69a:	47c0      	blx	r8
		while ((0x01 == (0x01 & valueofstatusreg[0]))){ // wait until writing is completed
     69c:	7823      	ldrb	r3, [r4, #0]
     69e:	422b      	tst	r3, r5
     6a0:	d1fa      	bne.n	698 <pageProgram+0x1c8>
		writeEnable();
     6a2:	4b4c      	ldr	r3, [pc, #304]	; (7d4 <pageProgram+0x304>)
     6a4:	4798      	blx	r3
		readStatusRegister(&valueofstatusreg);
     6a6:	4c4c      	ldr	r4, [pc, #304]	; (7d8 <pageProgram+0x308>)
     6a8:	0020      	movs	r0, r4
     6aa:	4b4c      	ldr	r3, [pc, #304]	; (7dc <pageProgram+0x30c>)
     6ac:	4798      	blx	r3
		while (!(0x02 == (0x03 & valueofstatusreg[0]))){
     6ae:	7823      	ldrb	r3, [r4, #0]
     6b0:	2203      	movs	r2, #3
     6b2:	4013      	ands	r3, r2
     6b4:	2b02      	cmp	r3, #2
     6b6:	d009      	beq.n	6cc <pageProgram+0x1fc>
			readStatusRegister(&valueofstatusreg);
     6b8:	4c47      	ldr	r4, [pc, #284]	; (7d8 <pageProgram+0x308>)
     6ba:	4b48      	ldr	r3, [pc, #288]	; (7dc <pageProgram+0x30c>)
     6bc:	4698      	mov	r8, r3
		while (!(0x02 == (0x03 & valueofstatusreg[0]))){
     6be:	2503      	movs	r5, #3
			readStatusRegister(&valueofstatusreg);
     6c0:	0020      	movs	r0, r4
     6c2:	47c0      	blx	r8
		while (!(0x02 == (0x03 & valueofstatusreg[0]))){
     6c4:	7823      	ldrb	r3, [r4, #0]
     6c6:	402b      	ands	r3, r5
     6c8:	2b02      	cmp	r3, #2
     6ca:	d1f9      	bne.n	6c0 <pageProgram+0x1f0>
		startedaddress += (kalanplusone);
     6cc:	230a      	movs	r3, #10
     6ce:	aa02      	add	r2, sp, #8
     6d0:	4694      	mov	ip, r2
     6d2:	4463      	add	r3, ip
     6d4:	881b      	ldrh	r3, [r3, #0]
     6d6:	444b      	add	r3, r9
		byte3 = startedaddress;
     6d8:	b2d9      	uxtb	r1, r3
     6da:	71d1      	strb	r1, [r2, #7]
		byte2 = (startedaddress >> 8);
     6dc:	0a1a      	lsrs	r2, r3, #8
     6de:	b2d2      	uxtb	r2, r2
     6e0:	a904      	add	r1, sp, #16
     6e2:	700a      	strb	r2, [r1, #0]
		byte1 = (startedaddress >> 16);
     6e4:	0c1b      	lsrs	r3, r3, #16
     6e6:	b2db      	uxtb	r3, r3
     6e8:	2209      	movs	r2, #9
     6ea:	4462      	add	r2, ip
     6ec:	7013      	strb	r3, [r2, #0]
		spi_select_slave(&spi_master_instance, &slave, true);
     6ee:	2201      	movs	r2, #1
     6f0:	493b      	ldr	r1, [pc, #236]	; (7e0 <pageProgram+0x310>)
     6f2:	483c      	ldr	r0, [pc, #240]	; (7e4 <pageProgram+0x314>)
     6f4:	4b3c      	ldr	r3, [pc, #240]	; (7e8 <pageProgram+0x318>)
     6f6:	4798      	blx	r3
		while ((spi_write_buffer_wait(&spi_master_instance, &opcode, 1) != STATUS_OK)){};
     6f8:	4c3a      	ldr	r4, [pc, #232]	; (7e4 <pageProgram+0x314>)
     6fa:	4d3c      	ldr	r5, [pc, #240]	; (7ec <pageProgram+0x31c>)
     6fc:	2201      	movs	r2, #1
     6fe:	230e      	movs	r3, #14
     700:	a902      	add	r1, sp, #8
     702:	468c      	mov	ip, r1
     704:	4463      	add	r3, ip
     706:	0019      	movs	r1, r3
     708:	0020      	movs	r0, r4
     70a:	47a8      	blx	r5
     70c:	2800      	cmp	r0, #0
     70e:	d1f5      	bne.n	6fc <pageProgram+0x22c>
		while ((spi_write_buffer_wait(&spi_master_instance, &byte1, 1) != STATUS_OK)){};
     710:	4c34      	ldr	r4, [pc, #208]	; (7e4 <pageProgram+0x314>)
     712:	4d36      	ldr	r5, [pc, #216]	; (7ec <pageProgram+0x31c>)
     714:	2201      	movs	r2, #1
     716:	2309      	movs	r3, #9
     718:	a902      	add	r1, sp, #8
     71a:	468c      	mov	ip, r1
     71c:	4463      	add	r3, ip
     71e:	0019      	movs	r1, r3
     720:	0020      	movs	r0, r4
     722:	47a8      	blx	r5
     724:	2800      	cmp	r0, #0
     726:	d1f5      	bne.n	714 <pageProgram+0x244>
		while ((spi_write_buffer_wait(&spi_master_instance, &byte2, 1) != STATUS_OK)){};
     728:	4c2e      	ldr	r4, [pc, #184]	; (7e4 <pageProgram+0x314>)
     72a:	4d30      	ldr	r5, [pc, #192]	; (7ec <pageProgram+0x31c>)
     72c:	2201      	movs	r2, #1
     72e:	a904      	add	r1, sp, #16
     730:	0020      	movs	r0, r4
     732:	47a8      	blx	r5
     734:	2800      	cmp	r0, #0
     736:	d1f9      	bne.n	72c <pageProgram+0x25c>
		while ((spi_write_buffer_wait(&spi_master_instance, &byte3, 1) != STATUS_OK)){};
     738:	4c2a      	ldr	r4, [pc, #168]	; (7e4 <pageProgram+0x314>)
     73a:	4d2c      	ldr	r5, [pc, #176]	; (7ec <pageProgram+0x31c>)
     73c:	2201      	movs	r2, #1
     73e:	ab02      	add	r3, sp, #8
     740:	1dd9      	adds	r1, r3, #7
     742:	0020      	movs	r0, r4
     744:	47a8      	blx	r5
     746:	2800      	cmp	r0, #0
     748:	d1f8      	bne.n	73c <pageProgram+0x26c>
		fark = howmuchdata - kalanplusone;
     74a:	230a      	movs	r3, #10
     74c:	aa02      	add	r2, sp, #8
     74e:	4694      	mov	ip, r2
     750:	4463      	add	r3, ip
     752:	881b      	ldrh	r3, [r3, #0]
     754:	4652      	mov	r2, sl
     756:	1ad7      	subs	r7, r2, r3
     758:	b2ff      	uxtb	r7, r7
     75a:	aa05      	add	r2, sp, #20
     75c:	7017      	strb	r7, [r2, #0]
		for (volatile uint8_t c = 0; c < fark; c++){
     75e:	4663      	mov	r3, ip
     760:	2100      	movs	r1, #0
     762:	7199      	strb	r1, [r3, #6]
     764:	3306      	adds	r3, #6
     766:	781b      	ldrb	r3, [r3, #0]
     768:	7812      	ldrb	r2, [r2, #0]
     76a:	b2db      	uxtb	r3, r3
     76c:	4293      	cmp	r3, r2
     76e:	d21a      	bcs.n	7a6 <pageProgram+0x2d6>
			while ((spi_write_buffer_wait(&spi_master_instance, (data + (c + kalanplusone)), 1) != STATUS_OK)){};
     770:	ab02      	add	r3, sp, #8
     772:	1d9c      	adds	r4, r3, #6
     774:	4d1b      	ldr	r5, [pc, #108]	; (7e4 <pageProgram+0x314>)
     776:	4f1d      	ldr	r7, [pc, #116]	; (7ec <pageProgram+0x31c>)
     778:	7823      	ldrb	r3, [r4, #0]
     77a:	220a      	movs	r2, #10
     77c:	a902      	add	r1, sp, #8
     77e:	468c      	mov	ip, r1
     780:	4462      	add	r2, ip
     782:	8811      	ldrh	r1, [r2, #0]
     784:	18c9      	adds	r1, r1, r3
     786:	1871      	adds	r1, r6, r1
     788:	2201      	movs	r2, #1
     78a:	0028      	movs	r0, r5
     78c:	47b8      	blx	r7
     78e:	2800      	cmp	r0, #0
     790:	d1f2      	bne.n	778 <pageProgram+0x2a8>
		for (volatile uint8_t c = 0; c < fark; c++){
     792:	7823      	ldrb	r3, [r4, #0]
     794:	3301      	adds	r3, #1
     796:	b2db      	uxtb	r3, r3
     798:	7023      	strb	r3, [r4, #0]
     79a:	7823      	ldrb	r3, [r4, #0]
     79c:	aa05      	add	r2, sp, #20
     79e:	7812      	ldrb	r2, [r2, #0]
     7a0:	b2db      	uxtb	r3, r3
     7a2:	4293      	cmp	r3, r2
     7a4:	d3e8      	bcc.n	778 <pageProgram+0x2a8>
		spi_select_slave(&spi_master_instance, &slave, false);
     7a6:	2200      	movs	r2, #0
     7a8:	490d      	ldr	r1, [pc, #52]	; (7e0 <pageProgram+0x310>)
     7aa:	480e      	ldr	r0, [pc, #56]	; (7e4 <pageProgram+0x314>)
     7ac:	4b0e      	ldr	r3, [pc, #56]	; (7e8 <pageProgram+0x318>)
     7ae:	4798      	blx	r3
		readStatusRegister(&valueofstatusreg);
     7b0:	4c09      	ldr	r4, [pc, #36]	; (7d8 <pageProgram+0x308>)
     7b2:	0020      	movs	r0, r4
     7b4:	4b09      	ldr	r3, [pc, #36]	; (7dc <pageProgram+0x30c>)
     7b6:	4798      	blx	r3
		while ((0x01 == (0x01 & valueofstatusreg[0]))){ // wait until writing is completed
     7b8:	7823      	ldrb	r3, [r4, #0]
     7ba:	07db      	lsls	r3, r3, #31
     7bc:	d400      	bmi.n	7c0 <pageProgram+0x2f0>
     7be:	e731      	b.n	624 <pageProgram+0x154>
			readStatusRegister(&valueofstatusreg);
     7c0:	4c05      	ldr	r4, [pc, #20]	; (7d8 <pageProgram+0x308>)
     7c2:	4e06      	ldr	r6, [pc, #24]	; (7dc <pageProgram+0x30c>)
		while ((0x01 == (0x01 & valueofstatusreg[0]))){ // wait until writing is completed
     7c4:	2501      	movs	r5, #1
			readStatusRegister(&valueofstatusreg);
     7c6:	0020      	movs	r0, r4
     7c8:	47b0      	blx	r6
		while ((0x01 == (0x01 & valueofstatusreg[0]))){ // wait until writing is completed
     7ca:	7823      	ldrb	r3, [r4, #0]
     7cc:	422b      	tst	r3, r5
     7ce:	d1fa      	bne.n	7c6 <pageProgram+0x2f6>
     7d0:	e728      	b.n	624 <pageProgram+0x154>
     7d2:	46c0      	nop			; (mov r8, r8)
     7d4:	00000431 	.word	0x00000431
     7d8:	2000016c 	.word	0x2000016c
     7dc:	00000481 	.word	0x00000481
     7e0:	200003c8 	.word	0x200003c8
     7e4:	2000038c 	.word	0x2000038c
     7e8:	00000de9 	.word	0x00000de9
     7ec:	00000edd 	.word	0x00000edd

000007f0 <globalUnprotected>:
void globalUnprotected(){
     7f0:	b570      	push	{r4, r5, r6, lr}
     7f2:	b082      	sub	sp, #8
	uint16_t opcode[2] = {0x01, 0x00};
     7f4:	ab01      	add	r3, sp, #4
     7f6:	2201      	movs	r2, #1
     7f8:	801a      	strh	r2, [r3, #0]
     7fa:	2200      	movs	r2, #0
     7fc:	805a      	strh	r2, [r3, #2]
	writeEnable();
     7fe:	4b17      	ldr	r3, [pc, #92]	; (85c <globalUnprotected+0x6c>)
     800:	4798      	blx	r3
	readStatusRegister(&valueofstatusreg);
     802:	4c17      	ldr	r4, [pc, #92]	; (860 <globalUnprotected+0x70>)
     804:	0020      	movs	r0, r4
     806:	4b17      	ldr	r3, [pc, #92]	; (864 <globalUnprotected+0x74>)
     808:	4798      	blx	r3
	while (!(0x02 == (0x03 & valueofstatusreg[0]))){
     80a:	7823      	ldrb	r3, [r4, #0]
     80c:	2203      	movs	r2, #3
     80e:	4013      	ands	r3, r2
     810:	2b02      	cmp	r3, #2
     812:	d008      	beq.n	826 <globalUnprotected+0x36>
		readStatusRegister(&valueofstatusreg);
     814:	4c12      	ldr	r4, [pc, #72]	; (860 <globalUnprotected+0x70>)
     816:	4e13      	ldr	r6, [pc, #76]	; (864 <globalUnprotected+0x74>)
	while (!(0x02 == (0x03 & valueofstatusreg[0]))){
     818:	2503      	movs	r5, #3
		readStatusRegister(&valueofstatusreg);
     81a:	0020      	movs	r0, r4
     81c:	47b0      	blx	r6
	while (!(0x02 == (0x03 & valueofstatusreg[0]))){
     81e:	7823      	ldrb	r3, [r4, #0]
     820:	402b      	ands	r3, r5
     822:	2b02      	cmp	r3, #2
     824:	d1f9      	bne.n	81a <globalUnprotected+0x2a>
	spi_select_slave(&spi_master_instance, &slave, true);
     826:	4c10      	ldr	r4, [pc, #64]	; (868 <globalUnprotected+0x78>)
     828:	2201      	movs	r2, #1
     82a:	4910      	ldr	r1, [pc, #64]	; (86c <globalUnprotected+0x7c>)
     82c:	0020      	movs	r0, r4
     82e:	4b10      	ldr	r3, [pc, #64]	; (870 <globalUnprotected+0x80>)
     830:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
     832:	6821      	ldr	r1, [r4, #0]
	while ((spi_is_ready_to_write(&spi_master_instance) != true)){};
     834:	2201      	movs	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     836:	7e0b      	ldrb	r3, [r1, #24]
     838:	4213      	tst	r3, r2
     83a:	d0fc      	beq.n	836 <globalUnprotected+0x46>
	while ((spi_write_buffer_wait(&spi_master_instance, opcode, 2) != STATUS_OK)){};
     83c:	4d0a      	ldr	r5, [pc, #40]	; (868 <globalUnprotected+0x78>)
     83e:	4c0d      	ldr	r4, [pc, #52]	; (874 <globalUnprotected+0x84>)
     840:	2202      	movs	r2, #2
     842:	a901      	add	r1, sp, #4
     844:	0028      	movs	r0, r5
     846:	47a0      	blx	r4
     848:	2800      	cmp	r0, #0
     84a:	d1f9      	bne.n	840 <globalUnprotected+0x50>
	spi_select_slave(&spi_master_instance, &slave, false);
     84c:	2200      	movs	r2, #0
     84e:	4907      	ldr	r1, [pc, #28]	; (86c <globalUnprotected+0x7c>)
     850:	4805      	ldr	r0, [pc, #20]	; (868 <globalUnprotected+0x78>)
     852:	4b07      	ldr	r3, [pc, #28]	; (870 <globalUnprotected+0x80>)
     854:	4798      	blx	r3
}
     856:	b002      	add	sp, #8
     858:	bd70      	pop	{r4, r5, r6, pc}
     85a:	46c0      	nop			; (mov r8, r8)
     85c:	00000431 	.word	0x00000431
     860:	2000016c 	.word	0x2000016c
     864:	00000481 	.word	0x00000481
     868:	2000038c 	.word	0x2000038c
     86c:	200003c8 	.word	0x200003c8
     870:	00000de9 	.word	0x00000de9
     874:	00000edd 	.word	0x00000edd

00000878 <blockErase>:

void blockErase(uint8_t opcodeoferase, uint32_t adress){
     878:	b5f0      	push	{r4, r5, r6, r7, lr}
     87a:	46d6      	mov	lr, sl
     87c:	464f      	mov	r7, r9
     87e:	b580      	push	{r7, lr}
     880:	b085      	sub	sp, #20
     882:	000f      	movs	r7, r1
     884:	466b      	mov	r3, sp
     886:	71d8      	strb	r0, [r3, #7]
	writeEnable();
     888:	4b31      	ldr	r3, [pc, #196]	; (950 <blockErase+0xd8>)
     88a:	4798      	blx	r3
	readStatusRegister(&valueofstatusreg);
     88c:	4c31      	ldr	r4, [pc, #196]	; (954 <blockErase+0xdc>)
     88e:	0020      	movs	r0, r4
     890:	4b31      	ldr	r3, [pc, #196]	; (958 <blockErase+0xe0>)
     892:	4798      	blx	r3
	while (!(0x02 == (0x03 & valueofstatusreg[0]))){
     894:	7823      	ldrb	r3, [r4, #0]
     896:	2203      	movs	r2, #3
     898:	4013      	ands	r3, r2
     89a:	2b02      	cmp	r3, #2
     89c:	d008      	beq.n	8b0 <blockErase+0x38>
		readStatusRegister(&valueofstatusreg);
     89e:	4c2d      	ldr	r4, [pc, #180]	; (954 <blockErase+0xdc>)
     8a0:	4e2d      	ldr	r6, [pc, #180]	; (958 <blockErase+0xe0>)
	while (!(0x02 == (0x03 & valueofstatusreg[0]))){
     8a2:	2503      	movs	r5, #3
		readStatusRegister(&valueofstatusreg);
     8a4:	0020      	movs	r0, r4
     8a6:	47b0      	blx	r6
	while (!(0x02 == (0x03 & valueofstatusreg[0]))){
     8a8:	7823      	ldrb	r3, [r4, #0]
     8aa:	402b      	ands	r3, r5
     8ac:	2b02      	cmp	r3, #2
     8ae:	d1f9      	bne.n	8a4 <blockErase+0x2c>
	} // well bit is 1 and device is ready
	volatile uint8_t byte1, byte2, byte3;
	byte3 = adress;
     8b0:	b2fb      	uxtb	r3, r7
     8b2:	260d      	movs	r6, #13
     8b4:	446e      	add	r6, sp
     8b6:	7033      	strb	r3, [r6, #0]
	byte2 = (adress >> 8);
     8b8:	0a3b      	lsrs	r3, r7, #8
     8ba:	b2db      	uxtb	r3, r3
     8bc:	220e      	movs	r2, #14
     8be:	446a      	add	r2, sp
     8c0:	4691      	mov	r9, r2
     8c2:	7013      	strb	r3, [r2, #0]
	byte1 = (adress >> 16);
     8c4:	0c3f      	lsrs	r7, r7, #16
     8c6:	b2ff      	uxtb	r7, r7
     8c8:	230f      	movs	r3, #15
     8ca:	446b      	add	r3, sp
     8cc:	469a      	mov	sl, r3
     8ce:	701f      	strb	r7, [r3, #0]
	spi_select_slave(&spi_master_instance, &slave, true);
     8d0:	4c22      	ldr	r4, [pc, #136]	; (95c <blockErase+0xe4>)
     8d2:	2201      	movs	r2, #1
     8d4:	4922      	ldr	r1, [pc, #136]	; (960 <blockErase+0xe8>)
     8d6:	0020      	movs	r0, r4
     8d8:	4f22      	ldr	r7, [pc, #136]	; (964 <blockErase+0xec>)
     8da:	47b8      	blx	r7
	spi_write_buffer_wait(&spi_master_instance, &opcodeoferase, 1);
     8dc:	2201      	movs	r2, #1
     8de:	466b      	mov	r3, sp
     8e0:	1dd9      	adds	r1, r3, #7
     8e2:	0020      	movs	r0, r4
     8e4:	4d20      	ldr	r5, [pc, #128]	; (968 <blockErase+0xf0>)
     8e6:	47a8      	blx	r5
	spi_write_buffer_wait(&spi_master_instance, &byte1, 1);
     8e8:	2201      	movs	r2, #1
     8ea:	4651      	mov	r1, sl
     8ec:	0020      	movs	r0, r4
     8ee:	47a8      	blx	r5
	spi_write_buffer_wait(&spi_master_instance, &byte2, 1);
     8f0:	2201      	movs	r2, #1
     8f2:	4649      	mov	r1, r9
     8f4:	0020      	movs	r0, r4
     8f6:	47a8      	blx	r5
	spi_write_buffer_wait(&spi_master_instance, &byte3, 1);
     8f8:	2201      	movs	r2, #1
     8fa:	0031      	movs	r1, r6
     8fc:	0020      	movs	r0, r4
     8fe:	47a8      	blx	r5
	spi_select_slave(&spi_master_instance, &slave, false);
     900:	2200      	movs	r2, #0
     902:	4917      	ldr	r1, [pc, #92]	; (960 <blockErase+0xe8>)
     904:	0020      	movs	r0, r4
     906:	47b8      	blx	r7
	
	readStatusRegister(&valueofstatusreg);
     908:	4c12      	ldr	r4, [pc, #72]	; (954 <blockErase+0xdc>)
     90a:	0020      	movs	r0, r4
     90c:	4b12      	ldr	r3, [pc, #72]	; (958 <blockErase+0xe0>)
     90e:	4798      	blx	r3
	while ((0x20 == (0x20 & valueofstatusreg[0]))){
     910:	7823      	ldrb	r3, [r4, #0]
     912:	069b      	lsls	r3, r3, #26
     914:	d507      	bpl.n	926 <blockErase+0xae>
		readStatusRegister(&valueofstatusreg);
     916:	4c0f      	ldr	r4, [pc, #60]	; (954 <blockErase+0xdc>)
     918:	4e0f      	ldr	r6, [pc, #60]	; (958 <blockErase+0xe0>)
	while ((0x20 == (0x20 & valueofstatusreg[0]))){
     91a:	2520      	movs	r5, #32
		readStatusRegister(&valueofstatusreg);
     91c:	0020      	movs	r0, r4
     91e:	47b0      	blx	r6
	while ((0x20 == (0x20 & valueofstatusreg[0]))){
     920:	7823      	ldrb	r3, [r4, #0]
     922:	422b      	tst	r3, r5
     924:	d1fa      	bne.n	91c <blockErase+0xa4>
	}
	
	readStatusRegister(&valueofstatusreg);
     926:	4c0b      	ldr	r4, [pc, #44]	; (954 <blockErase+0xdc>)
     928:	0020      	movs	r0, r4
     92a:	4b0b      	ldr	r3, [pc, #44]	; (958 <blockErase+0xe0>)
     92c:	4798      	blx	r3
	/*while ((0x02 == (0x02 & valueofstatusreg))){
		readStatusRegister(1, &valueofstatusreg);
	}*/
	while ((0x01 == (0x01 & valueofstatusreg[0]))){ // wait until blok erasing is completed
     92e:	7823      	ldrb	r3, [r4, #0]
     930:	07db      	lsls	r3, r3, #31
     932:	d507      	bpl.n	944 <blockErase+0xcc>
		readStatusRegister(&valueofstatusreg);
     934:	4c07      	ldr	r4, [pc, #28]	; (954 <blockErase+0xdc>)
     936:	4e08      	ldr	r6, [pc, #32]	; (958 <blockErase+0xe0>)
	while ((0x01 == (0x01 & valueofstatusreg[0]))){ // wait until blok erasing is completed
     938:	2501      	movs	r5, #1
		readStatusRegister(&valueofstatusreg);
     93a:	0020      	movs	r0, r4
     93c:	47b0      	blx	r6
	while ((0x01 == (0x01 & valueofstatusreg[0]))){ // wait until blok erasing is completed
     93e:	7823      	ldrb	r3, [r4, #0]
     940:	422b      	tst	r3, r5
     942:	d1fa      	bne.n	93a <blockErase+0xc2>
	}
	
}
     944:	b005      	add	sp, #20
     946:	bc0c      	pop	{r2, r3}
     948:	4691      	mov	r9, r2
     94a:	469a      	mov	sl, r3
     94c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     94e:	46c0      	nop			; (mov r8, r8)
     950:	00000431 	.word	0x00000431
     954:	2000016c 	.word	0x2000016c
     958:	00000481 	.word	0x00000481
     95c:	2000038c 	.word	0x2000038c
     960:	200003c8 	.word	0x200003c8
     964:	00000de9 	.word	0x00000de9
     968:	00000edd 	.word	0x00000edd

0000096c <readArray>:

void readArray(uint8_t opcodeofread, uint32_t adress, uint8_t howmuchbyte, uint8_t *vallue){
     96c:	b5f0      	push	{r4, r5, r6, r7, lr}
     96e:	b085      	sub	sp, #20
     970:	0015      	movs	r5, r2
     972:	001e      	movs	r6, r3
	volatile uint8_t byte1, byte2, byte3;
	byte3 = adress;
     974:	b2ca      	uxtb	r2, r1
     976:	230d      	movs	r3, #13
     978:	446b      	add	r3, sp
     97a:	701a      	strb	r2, [r3, #0]
	byte2 = (adress >> 8);
     97c:	0a0b      	lsrs	r3, r1, #8
     97e:	b2db      	uxtb	r3, r3
     980:	220e      	movs	r2, #14
     982:	446a      	add	r2, sp
     984:	7013      	strb	r3, [r2, #0]
	byte1 = (adress >> 16);
     986:	0c09      	lsrs	r1, r1, #16
     988:	b2c9      	uxtb	r1, r1
     98a:	230f      	movs	r3, #15
     98c:	446b      	add	r3, sp
     98e:	7019      	strb	r1, [r3, #0]
	uint16_t opcode[3] = {0x1b, 0x0b, 0x03};
     990:	4b43      	ldr	r3, [pc, #268]	; (aa0 <readArray+0x134>)
     992:	681a      	ldr	r2, [r3, #0]
     994:	9201      	str	r2, [sp, #4]
     996:	889a      	ldrh	r2, [r3, #4]
     998:	ab01      	add	r3, sp, #4
     99a:	809a      	strh	r2, [r3, #4]
	volatile uint8_t dummy = 0xff;
     99c:	22ff      	movs	r2, #255	; 0xff
     99e:	466b      	mov	r3, sp
     9a0:	70da      	strb	r2, [r3, #3]
	if(opcodeofread == 0x1b){
     9a2:	281b      	cmp	r0, #27
     9a4:	d01b      	beq.n	9de <readArray+0x72>
		spi_write_buffer_wait(&spi_master_instance, &byte2, 1);
		spi_write_buffer_wait(&spi_master_instance, &byte3, 1);
		spi_write_buffer_wait(&spi_master_instance, &dummy, 1);
		spi_write_buffer_wait(&spi_master_instance, &dummy, 1); // 2 byte dummy
	}
	else if(opcodeofread == 0x0b){
     9a6:	280b      	cmp	r0, #11
     9a8:	d03e      	beq.n	a28 <readArray+0xbc>
		spi_write_buffer_wait(&spi_master_instance, &byte1, 1);
		spi_write_buffer_wait(&spi_master_instance, &byte2, 1);
		spi_write_buffer_wait(&spi_master_instance, &byte3, 1);
		spi_write_buffer_wait(&spi_master_instance, &dummy, 1); // 1 byte dummy
	}
	else if(opcodeofread == 0x03){
     9aa:	2803      	cmp	r0, #3
     9ac:	d05d      	beq.n	a6a <readArray+0xfe>
		spi_write_buffer_wait(&spi_master_instance, &(opcode[2]), 1);
		spi_write_buffer_wait(&spi_master_instance, &byte1, 1);
		spi_write_buffer_wait(&spi_master_instance, &byte2, 1);
		spi_write_buffer_wait(&spi_master_instance, &byte3, 1);
	}
	for (uint8_t a = 0; a < howmuchbyte; a++)
     9ae:	2d00      	cmp	r5, #0
     9b0:	d00e      	beq.n	9d0 <readArray+0x64>
     9b2:	0034      	movs	r4, r6
     9b4:	3d01      	subs	r5, #1
     9b6:	b2ed      	uxtb	r5, r5
     9b8:	3501      	adds	r5, #1
     9ba:	1975      	adds	r5, r6, r5
	{
		spi_read_buffer_wait(&spi_master_instance, (vallue + a), 1, 0xff);
     9bc:	4f39      	ldr	r7, [pc, #228]	; (aa4 <readArray+0x138>)
     9be:	4e3a      	ldr	r6, [pc, #232]	; (aa8 <readArray+0x13c>)
     9c0:	23ff      	movs	r3, #255	; 0xff
     9c2:	2201      	movs	r2, #1
     9c4:	0021      	movs	r1, r4
     9c6:	0038      	movs	r0, r7
     9c8:	47b0      	blx	r6
     9ca:	3401      	adds	r4, #1
	for (uint8_t a = 0; a < howmuchbyte; a++)
     9cc:	42ac      	cmp	r4, r5
     9ce:	d1f7      	bne.n	9c0 <readArray+0x54>
	}
	spi_select_slave(&spi_master_instance, &slave, false);
     9d0:	2200      	movs	r2, #0
     9d2:	4936      	ldr	r1, [pc, #216]	; (aac <readArray+0x140>)
     9d4:	4833      	ldr	r0, [pc, #204]	; (aa4 <readArray+0x138>)
     9d6:	4b36      	ldr	r3, [pc, #216]	; (ab0 <readArray+0x144>)
     9d8:	4798      	blx	r3
}
     9da:	b005      	add	sp, #20
     9dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		spi_select_slave(&spi_master_instance, &slave, true);
     9de:	4c31      	ldr	r4, [pc, #196]	; (aa4 <readArray+0x138>)
     9e0:	3afe      	subs	r2, #254	; 0xfe
     9e2:	4932      	ldr	r1, [pc, #200]	; (aac <readArray+0x140>)
     9e4:	0020      	movs	r0, r4
     9e6:	4b32      	ldr	r3, [pc, #200]	; (ab0 <readArray+0x144>)
     9e8:	4798      	blx	r3
		spi_write_buffer_wait(&spi_master_instance, &(opcode[0]), 1);
     9ea:	2201      	movs	r2, #1
     9ec:	a901      	add	r1, sp, #4
     9ee:	0020      	movs	r0, r4
     9f0:	4f30      	ldr	r7, [pc, #192]	; (ab4 <readArray+0x148>)
     9f2:	47b8      	blx	r7
		spi_write_buffer_wait(&spi_master_instance, &byte1, 1);
     9f4:	2201      	movs	r2, #1
     9f6:	210f      	movs	r1, #15
     9f8:	4469      	add	r1, sp
     9fa:	0020      	movs	r0, r4
     9fc:	47b8      	blx	r7
		spi_write_buffer_wait(&spi_master_instance, &byte2, 1);
     9fe:	2201      	movs	r2, #1
     a00:	210e      	movs	r1, #14
     a02:	4469      	add	r1, sp
     a04:	0020      	movs	r0, r4
     a06:	47b8      	blx	r7
		spi_write_buffer_wait(&spi_master_instance, &byte3, 1);
     a08:	2201      	movs	r2, #1
     a0a:	210d      	movs	r1, #13
     a0c:	4469      	add	r1, sp
     a0e:	0020      	movs	r0, r4
     a10:	47b8      	blx	r7
		spi_write_buffer_wait(&spi_master_instance, &dummy, 1);
     a12:	2201      	movs	r2, #1
     a14:	466b      	mov	r3, sp
     a16:	1cd9      	adds	r1, r3, #3
     a18:	0020      	movs	r0, r4
     a1a:	47b8      	blx	r7
		spi_write_buffer_wait(&spi_master_instance, &dummy, 1); // 2 byte dummy
     a1c:	2201      	movs	r2, #1
     a1e:	466b      	mov	r3, sp
     a20:	1cd9      	adds	r1, r3, #3
     a22:	0020      	movs	r0, r4
     a24:	47b8      	blx	r7
     a26:	e7c2      	b.n	9ae <readArray+0x42>
		spi_select_slave(&spi_master_instance, &slave, true);
     a28:	4c1e      	ldr	r4, [pc, #120]	; (aa4 <readArray+0x138>)
     a2a:	2201      	movs	r2, #1
     a2c:	491f      	ldr	r1, [pc, #124]	; (aac <readArray+0x140>)
     a2e:	0020      	movs	r0, r4
     a30:	4b1f      	ldr	r3, [pc, #124]	; (ab0 <readArray+0x144>)
     a32:	4798      	blx	r3
		spi_write_buffer_wait(&spi_master_instance, &(opcode[1]), 1);
     a34:	2201      	movs	r2, #1
     a36:	466b      	mov	r3, sp
     a38:	1d99      	adds	r1, r3, #6
     a3a:	0020      	movs	r0, r4
     a3c:	4f1d      	ldr	r7, [pc, #116]	; (ab4 <readArray+0x148>)
     a3e:	47b8      	blx	r7
		spi_write_buffer_wait(&spi_master_instance, &byte1, 1);
     a40:	2201      	movs	r2, #1
     a42:	210f      	movs	r1, #15
     a44:	4469      	add	r1, sp
     a46:	0020      	movs	r0, r4
     a48:	47b8      	blx	r7
		spi_write_buffer_wait(&spi_master_instance, &byte2, 1);
     a4a:	2201      	movs	r2, #1
     a4c:	210e      	movs	r1, #14
     a4e:	4469      	add	r1, sp
     a50:	0020      	movs	r0, r4
     a52:	47b8      	blx	r7
		spi_write_buffer_wait(&spi_master_instance, &byte3, 1);
     a54:	2201      	movs	r2, #1
     a56:	210d      	movs	r1, #13
     a58:	4469      	add	r1, sp
     a5a:	0020      	movs	r0, r4
     a5c:	47b8      	blx	r7
		spi_write_buffer_wait(&spi_master_instance, &dummy, 1); // 1 byte dummy
     a5e:	2201      	movs	r2, #1
     a60:	466b      	mov	r3, sp
     a62:	1cd9      	adds	r1, r3, #3
     a64:	0020      	movs	r0, r4
     a66:	47b8      	blx	r7
     a68:	e7a1      	b.n	9ae <readArray+0x42>
		spi_select_slave(&spi_master_instance, &slave, true);
     a6a:	4c0e      	ldr	r4, [pc, #56]	; (aa4 <readArray+0x138>)
     a6c:	2201      	movs	r2, #1
     a6e:	490f      	ldr	r1, [pc, #60]	; (aac <readArray+0x140>)
     a70:	0020      	movs	r0, r4
     a72:	4b0f      	ldr	r3, [pc, #60]	; (ab0 <readArray+0x144>)
     a74:	4798      	blx	r3
		spi_write_buffer_wait(&spi_master_instance, &(opcode[2]), 1);
     a76:	2201      	movs	r2, #1
     a78:	a902      	add	r1, sp, #8
     a7a:	0020      	movs	r0, r4
     a7c:	4f0d      	ldr	r7, [pc, #52]	; (ab4 <readArray+0x148>)
     a7e:	47b8      	blx	r7
		spi_write_buffer_wait(&spi_master_instance, &byte1, 1);
     a80:	2201      	movs	r2, #1
     a82:	210f      	movs	r1, #15
     a84:	4469      	add	r1, sp
     a86:	0020      	movs	r0, r4
     a88:	47b8      	blx	r7
		spi_write_buffer_wait(&spi_master_instance, &byte2, 1);
     a8a:	2201      	movs	r2, #1
     a8c:	210e      	movs	r1, #14
     a8e:	4469      	add	r1, sp
     a90:	0020      	movs	r0, r4
     a92:	47b8      	blx	r7
		spi_write_buffer_wait(&spi_master_instance, &byte3, 1);
     a94:	2201      	movs	r2, #1
     a96:	210d      	movs	r1, #13
     a98:	4469      	add	r1, sp
     a9a:	0020      	movs	r0, r4
     a9c:	47b8      	blx	r7
     a9e:	e786      	b.n	9ae <readArray+0x42>
     aa0:	000023ec 	.word	0x000023ec
     aa4:	2000038c 	.word	0x2000038c
     aa8:	00000ccd 	.word	0x00000ccd
     aac:	200003c8 	.word	0x200003c8
     ab0:	00000de9 	.word	0x00000de9
     ab4:	00000edd 	.word	0x00000edd

00000ab8 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
     aba:	b08b      	sub	sp, #44	; 0x2c
     abc:	0005      	movs	r5, r0
     abe:	000c      	movs	r4, r1
     ac0:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     ac2:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     ac4:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     ac6:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     ac8:	079b      	lsls	r3, r3, #30
     aca:	d501      	bpl.n	ad0 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     acc:	b00b      	add	sp, #44	; 0x2c
     ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     ad0:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     ad2:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     ad4:	07db      	lsls	r3, r3, #31
     ad6:	d4f9      	bmi.n	acc <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     ad8:	0008      	movs	r0, r1
     ada:	4b6f      	ldr	r3, [pc, #444]	; (c98 <spi_init+0x1e0>)
     adc:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     ade:	4a6f      	ldr	r2, [pc, #444]	; (c9c <spi_init+0x1e4>)
     ae0:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     ae2:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     ae4:	2301      	movs	r3, #1
     ae6:	40bb      	lsls	r3, r7
     ae8:	430b      	orrs	r3, r1
     aea:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     aec:	a909      	add	r1, sp, #36	; 0x24
     aee:	2724      	movs	r7, #36	; 0x24
     af0:	5df3      	ldrb	r3, [r6, r7]
     af2:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     af4:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     af6:	b2c3      	uxtb	r3, r0
     af8:	9301      	str	r3, [sp, #4]
     afa:	0018      	movs	r0, r3
     afc:	4b68      	ldr	r3, [pc, #416]	; (ca0 <spi_init+0x1e8>)
     afe:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     b00:	9801      	ldr	r0, [sp, #4]
     b02:	4b68      	ldr	r3, [pc, #416]	; (ca4 <spi_init+0x1ec>)
     b04:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     b06:	5df0      	ldrb	r0, [r6, r7]
     b08:	2100      	movs	r1, #0
     b0a:	4b67      	ldr	r3, [pc, #412]	; (ca8 <spi_init+0x1f0>)
     b0c:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     b0e:	7833      	ldrb	r3, [r6, #0]
     b10:	2b01      	cmp	r3, #1
     b12:	d03f      	beq.n	b94 <spi_init+0xdc>
	if (config->mode == SPI_MODE_SLAVE) {
     b14:	7833      	ldrb	r3, [r6, #0]
     b16:	2b00      	cmp	r3, #0
     b18:	d103      	bne.n	b22 <spi_init+0x6a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     b1a:	6823      	ldr	r3, [r4, #0]
     b1c:	2208      	movs	r2, #8
     b1e:	4313      	orrs	r3, r2
     b20:	6023      	str	r3, [r4, #0]
     b22:	002b      	movs	r3, r5
     b24:	330c      	adds	r3, #12
     b26:	0029      	movs	r1, r5
     b28:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
     b2a:	2200      	movs	r2, #0
     b2c:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     b2e:	428b      	cmp	r3, r1
     b30:	d1fc      	bne.n	b2c <spi_init+0x74>
	module->tx_buffer_ptr              = NULL;
     b32:	2300      	movs	r3, #0
     b34:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
     b36:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
     b38:	2400      	movs	r4, #0
     b3a:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
     b3c:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
     b3e:	3336      	adds	r3, #54	; 0x36
     b40:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
     b42:	3301      	adds	r3, #1
     b44:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
     b46:	3301      	adds	r3, #1
     b48:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
     b4a:	3b35      	subs	r3, #53	; 0x35
     b4c:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
     b4e:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     b50:	6828      	ldr	r0, [r5, #0]
     b52:	4b51      	ldr	r3, [pc, #324]	; (c98 <spi_init+0x1e0>)
     b54:	4798      	blx	r3
     b56:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     b58:	4954      	ldr	r1, [pc, #336]	; (cac <spi_init+0x1f4>)
     b5a:	4b55      	ldr	r3, [pc, #340]	; (cb0 <spi_init+0x1f8>)
     b5c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     b5e:	00bf      	lsls	r7, r7, #2
     b60:	4b54      	ldr	r3, [pc, #336]	; (cb4 <spi_init+0x1fc>)
     b62:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
     b64:	682f      	ldr	r7, [r5, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     b66:	ab04      	add	r3, sp, #16
     b68:	2280      	movs	r2, #128	; 0x80
     b6a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     b6c:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     b6e:	3a7f      	subs	r2, #127	; 0x7f
     b70:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     b72:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
     b74:	7833      	ldrb	r3, [r6, #0]
     b76:	2b00      	cmp	r3, #0
     b78:	d102      	bne.n	b80 <spi_init+0xc8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     b7a:	2200      	movs	r2, #0
     b7c:	ab04      	add	r3, sp, #16
     b7e:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     b80:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     b82:	9305      	str	r3, [sp, #20]
     b84:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     b86:	9306      	str	r3, [sp, #24]
     b88:	6b33      	ldr	r3, [r6, #48]	; 0x30
     b8a:	9307      	str	r3, [sp, #28]
     b8c:	6b73      	ldr	r3, [r6, #52]	; 0x34
     b8e:	9308      	str	r3, [sp, #32]
     b90:	2400      	movs	r4, #0
     b92:	e00b      	b.n	bac <spi_init+0xf4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     b94:	6823      	ldr	r3, [r4, #0]
     b96:	220c      	movs	r2, #12
     b98:	4313      	orrs	r3, r2
     b9a:	6023      	str	r3, [r4, #0]
     b9c:	e7ba      	b.n	b14 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     b9e:	0038      	movs	r0, r7
     ba0:	4b45      	ldr	r3, [pc, #276]	; (cb8 <spi_init+0x200>)
     ba2:	4798      	blx	r3
     ba4:	e00a      	b.n	bbc <spi_init+0x104>
     ba6:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     ba8:	2c04      	cmp	r4, #4
     baa:	d010      	beq.n	bce <spi_init+0x116>
     bac:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
     bae:	00a3      	lsls	r3, r4, #2
     bb0:	aa02      	add	r2, sp, #8
     bb2:	200c      	movs	r0, #12
     bb4:	1812      	adds	r2, r2, r0
     bb6:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
     bb8:	2800      	cmp	r0, #0
     bba:	d0f0      	beq.n	b9e <spi_init+0xe6>
		if (current_pinmux != PINMUX_UNUSED) {
     bbc:	1c43      	adds	r3, r0, #1
     bbe:	d0f2      	beq.n	ba6 <spi_init+0xee>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     bc0:	a904      	add	r1, sp, #16
     bc2:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     bc4:	0c00      	lsrs	r0, r0, #16
     bc6:	b2c0      	uxtb	r0, r0
     bc8:	4b3c      	ldr	r3, [pc, #240]	; (cbc <spi_init+0x204>)
     bca:	4798      	blx	r3
     bcc:	e7eb      	b.n	ba6 <spi_init+0xee>
	module->mode             = config->mode;
     bce:	7833      	ldrb	r3, [r6, #0]
     bd0:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
     bd2:	7c33      	ldrb	r3, [r6, #16]
     bd4:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
     bd6:	7cb3      	ldrb	r3, [r6, #18]
     bd8:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
     bda:	7d33      	ldrb	r3, [r6, #20]
     bdc:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
     bde:	2200      	movs	r2, #0
     be0:	ab02      	add	r3, sp, #8
     be2:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
     be4:	7833      	ldrb	r3, [r6, #0]
     be6:	2b01      	cmp	r3, #1
     be8:	d012      	beq.n	c10 <spi_init+0x158>
	if (config->mode == SPI_MODE_SLAVE) {
     bea:	7833      	ldrb	r3, [r6, #0]
     bec:	2b00      	cmp	r3, #0
     bee:	d126      	bne.n	c3e <spi_init+0x186>
		ctrla = config->mode_specific.slave.frame_format;
     bf0:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
     bf2:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
     bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     bf6:	7ff1      	ldrb	r1, [r6, #31]
     bf8:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     bfa:	7fb4      	ldrb	r4, [r6, #30]
     bfc:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
     bfe:	4319      	orrs	r1, r3
     c00:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
     c02:	2320      	movs	r3, #32
     c04:	5cf3      	ldrb	r3, [r6, r3]
     c06:	2b00      	cmp	r3, #0
     c08:	d01b      	beq.n	c42 <spi_init+0x18a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     c0a:	2340      	movs	r3, #64	; 0x40
     c0c:	431a      	orrs	r2, r3
     c0e:	e018      	b.n	c42 <spi_init+0x18a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     c10:	6828      	ldr	r0, [r5, #0]
     c12:	4b21      	ldr	r3, [pc, #132]	; (c98 <spi_init+0x1e0>)
     c14:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     c16:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     c18:	b2c0      	uxtb	r0, r0
     c1a:	4b29      	ldr	r3, [pc, #164]	; (cc0 <spi_init+0x208>)
     c1c:	4798      	blx	r3
     c1e:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
     c20:	ab02      	add	r3, sp, #8
     c22:	1d9a      	adds	r2, r3, #6
     c24:	69b0      	ldr	r0, [r6, #24]
     c26:	4b27      	ldr	r3, [pc, #156]	; (cc4 <spi_init+0x20c>)
     c28:	4798      	blx	r3
     c2a:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
     c2c:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
     c2e:	2b00      	cmp	r3, #0
     c30:	d000      	beq.n	c34 <spi_init+0x17c>
     c32:	e74b      	b.n	acc <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
     c34:	ab02      	add	r3, sp, #8
     c36:	3306      	adds	r3, #6
     c38:	781b      	ldrb	r3, [r3, #0]
     c3a:	733b      	strb	r3, [r7, #12]
     c3c:	e7d5      	b.n	bea <spi_init+0x132>
	uint32_t ctrlb = 0;
     c3e:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
     c40:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
     c42:	6873      	ldr	r3, [r6, #4]
     c44:	68b1      	ldr	r1, [r6, #8]
     c46:	430b      	orrs	r3, r1
     c48:	68f1      	ldr	r1, [r6, #12]
     c4a:	430b      	orrs	r3, r1
     c4c:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
     c4e:	7c31      	ldrb	r1, [r6, #16]
     c50:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
     c52:	7c71      	ldrb	r1, [r6, #17]
     c54:	2900      	cmp	r1, #0
     c56:	d103      	bne.n	c60 <spi_init+0x1a8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     c58:	491b      	ldr	r1, [pc, #108]	; (cc8 <spi_init+0x210>)
     c5a:	7889      	ldrb	r1, [r1, #2]
     c5c:	0789      	lsls	r1, r1, #30
     c5e:	d501      	bpl.n	c64 <spi_init+0x1ac>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     c60:	2180      	movs	r1, #128	; 0x80
     c62:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
     c64:	7cb1      	ldrb	r1, [r6, #18]
     c66:	2900      	cmp	r1, #0
     c68:	d002      	beq.n	c70 <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     c6a:	2180      	movs	r1, #128	; 0x80
     c6c:	0289      	lsls	r1, r1, #10
     c6e:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
     c70:	7cf1      	ldrb	r1, [r6, #19]
     c72:	2900      	cmp	r1, #0
     c74:	d002      	beq.n	c7c <spi_init+0x1c4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     c76:	2180      	movs	r1, #128	; 0x80
     c78:	0089      	lsls	r1, r1, #2
     c7a:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
     c7c:	7d31      	ldrb	r1, [r6, #20]
     c7e:	2900      	cmp	r1, #0
     c80:	d002      	beq.n	c88 <spi_init+0x1d0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     c82:	2180      	movs	r1, #128	; 0x80
     c84:	0189      	lsls	r1, r1, #6
     c86:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
     c88:	6839      	ldr	r1, [r7, #0]
     c8a:	430b      	orrs	r3, r1
     c8c:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
     c8e:	687b      	ldr	r3, [r7, #4]
     c90:	431a      	orrs	r2, r3
     c92:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
     c94:	2000      	movs	r0, #0
     c96:	e719      	b.n	acc <spi_init+0x14>
     c98:	00000301 	.word	0x00000301
     c9c:	40000400 	.word	0x40000400
     ca0:	00001b8d 	.word	0x00001b8d
     ca4:	00001b01 	.word	0x00001b01
     ca8:	0000013d 	.word	0x0000013d
     cac:	00001105 	.word	0x00001105
     cb0:	0000132d 	.word	0x0000132d
     cb4:	20000274 	.word	0x20000274
     cb8:	00000189 	.word	0x00000189
     cbc:	00001c85 	.word	0x00001c85
     cc0:	00001ba9 	.word	0x00001ba9
     cc4:	00000115 	.word	0x00000115
     cc8:	41002000 	.word	0x41002000

00000ccc <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
     ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
     cce:	46d6      	mov	lr, sl
     cd0:	464f      	mov	r7, r9
     cd2:	b580      	push	{r7, lr}
     cd4:	b083      	sub	sp, #12
     cd6:	468c      	mov	ip, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     cd8:	2538      	movs	r5, #56	; 0x38
     cda:	5d46      	ldrb	r6, [r0, r5]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
     cdc:	3d33      	subs	r5, #51	; 0x33
	if (module->status == STATUS_BUSY) {
     cde:	2e05      	cmp	r6, #5
     ce0:	d075      	beq.n	dce <spi_read_buffer_wait+0x102>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     ce2:	3512      	adds	r5, #18
	if (length == 0) {
     ce4:	2a00      	cmp	r2, #0
     ce6:	d072      	beq.n	dce <spi_read_buffer_wait+0x102>
	}

	if (!(module->receiver_enabled)) {
     ce8:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     cea:	3505      	adds	r5, #5
	if (!(module->receiver_enabled)) {
     cec:	2c00      	cmp	r4, #0
     cee:	d06e      	beq.n	dce <spi_read_buffer_wait+0x102>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     cf0:	7944      	ldrb	r4, [r0, #5]
     cf2:	2c00      	cmp	r4, #0
     cf4:	d103      	bne.n	cfe <spi_read_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
     cf6:	6804      	ldr	r4, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     cf8:	7e25      	ldrb	r5, [r4, #24]
     cfa:	07a9      	lsls	r1, r5, #30
     cfc:	d40a      	bmi.n	d14 <spi_read_buffer_wait+0x48>
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
     cfe:	3a01      	subs	r2, #1
     d00:	b294      	uxth	r4, r2
     d02:	2600      	movs	r6, #0

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
     d04:	2204      	movs	r2, #4
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
     d06:	2102      	movs	r1, #2
     d08:	4689      	mov	r9, r1
			while (!spi_is_ready_to_write(module)) {
     d0a:	2701      	movs	r7, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     d0c:	05db      	lsls	r3, r3, #23
     d0e:	0ddb      	lsrs	r3, r3, #23
     d10:	469a      	mov	sl, r3
     d12:	e037      	b.n	d84 <spi_read_buffer_wait+0xb8>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     d14:	2502      	movs	r5, #2
     d16:	7625      	strb	r5, [r4, #24]
     d18:	e7f1      	b.n	cfe <spi_read_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
     d1a:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     d1c:	7e0b      	ldrb	r3, [r1, #24]
			while (!spi_is_ready_to_write(module)) {
     d1e:	423b      	tst	r3, r7
     d20:	d0fc      	beq.n	d1c <spi_read_buffer_wait+0x50>
     d22:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_write(module)) {
     d24:	423b      	tst	r3, r7
     d26:	d009      	beq.n	d3c <spi_read_buffer_wait+0x70>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     d28:	4653      	mov	r3, sl
     d2a:	628b      	str	r3, [r1, #40]	; 0x28
     d2c:	e02d      	b.n	d8a <spi_read_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     d2e:	7e0b      	ldrb	r3, [r1, #24]
			if (spi_is_write_complete(module)) {
     d30:	464d      	mov	r5, r9
     d32:	422b      	tst	r3, r5
     d34:	d138      	bne.n	da8 <spi_read_buffer_wait+0xdc>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     d36:	7e0b      	ldrb	r3, [r1, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
     d38:	4213      	tst	r3, r2
     d3a:	d045      	beq.n	dc8 <spi_read_buffer_wait+0xfc>
	SercomSpi *const spi_module = &(module->hw->SPI);
     d3c:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     d3e:	7e0b      	ldrb	r3, [r1, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
     d40:	4213      	tst	r3, r2
     d42:	d0fc      	beq.n	d3e <spi_read_buffer_wait+0x72>
     d44:	7e0b      	ldrb	r3, [r1, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     d46:	4213      	tst	r3, r2
     d48:	d040      	beq.n	dcc <spi_read_buffer_wait+0x100>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     d4a:	8b4b      	ldrh	r3, [r1, #26]
	enum status_code retval = STATUS_OK;
     d4c:	2500      	movs	r5, #0
     d4e:	9501      	str	r5, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     d50:	4213      	tst	r3, r2
     d52:	d002      	beq.n	d5a <spi_read_buffer_wait+0x8e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     d54:	834a      	strh	r2, [r1, #26]
		retval = STATUS_ERR_OVERFLOW;
     d56:	231e      	movs	r3, #30
     d58:	9301      	str	r3, [sp, #4]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     d5a:	7983      	ldrb	r3, [r0, #6]
     d5c:	2b01      	cmp	r3, #1
     d5e:	d027      	beq.n	db0 <spi_read_buffer_wait+0xe4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     d60:	6a8b      	ldr	r3, [r1, #40]	; 0x28
     d62:	b2db      	uxtb	r3, r3
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
     d64:	9901      	ldr	r1, [sp, #4]
     d66:	2900      	cmp	r1, #0
     d68:	d137      	bne.n	dda <spi_read_buffer_wait+0x10e>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
     d6a:	1c75      	adds	r5, r6, #1
     d6c:	b2ad      	uxth	r5, r5
     d6e:	4661      	mov	r1, ip
     d70:	558b      	strb	r3, [r1, r6]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     d72:	7981      	ldrb	r1, [r0, #6]
     d74:	2901      	cmp	r1, #1
     d76:	d01f      	beq.n	db8 <spi_read_buffer_wait+0xec>
		rx_data[rx_pos++] = received_data;
     d78:	002e      	movs	r6, r5
	while (length--) {
     d7a:	3c01      	subs	r4, #1
     d7c:	b2a4      	uxth	r4, r4
     d7e:	4b18      	ldr	r3, [pc, #96]	; (de0 <spi_read_buffer_wait+0x114>)
     d80:	429c      	cmp	r4, r3
     d82:	d01f      	beq.n	dc4 <spi_read_buffer_wait+0xf8>
		if (module->mode == SPI_MODE_MASTER) {
     d84:	7943      	ldrb	r3, [r0, #5]
     d86:	2b01      	cmp	r3, #1
     d88:	d0c7      	beq.n	d1a <spi_read_buffer_wait+0x4e>
		if (module->mode == SPI_MODE_SLAVE) {
     d8a:	7943      	ldrb	r3, [r0, #5]
     d8c:	2b00      	cmp	r3, #0
     d8e:	d1d5      	bne.n	d3c <spi_read_buffer_wait+0x70>
	SercomSpi *const spi_module = &(module->hw->SPI);
     d90:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     d92:	7e0b      	ldrb	r3, [r1, #24]
				if (spi_is_ready_to_read(module)) {
     d94:	4213      	tst	r3, r2
     d96:	d1ca      	bne.n	d2e <spi_read_buffer_wait+0x62>
     d98:	4b12      	ldr	r3, [pc, #72]	; (de4 <spi_read_buffer_wait+0x118>)
     d9a:	7e0d      	ldrb	r5, [r1, #24]
     d9c:	4215      	tst	r5, r2
     d9e:	d1c6      	bne.n	d2e <spi_read_buffer_wait+0x62>
     da0:	3b01      	subs	r3, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     da2:	2b00      	cmp	r3, #0
     da4:	d1f9      	bne.n	d9a <spi_read_buffer_wait+0xce>
     da6:	e7c2      	b.n	d2e <spi_read_buffer_wait+0x62>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     da8:	2302      	movs	r3, #2
     daa:	760b      	strb	r3, [r1, #24]
				return STATUS_ABORTED;
     dac:	2504      	movs	r5, #4
     dae:	e00e      	b.n	dce <spi_read_buffer_wait+0x102>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     db0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
     db2:	05db      	lsls	r3, r3, #23
     db4:	0ddb      	lsrs	r3, r3, #23
     db6:	e7d5      	b.n	d64 <spi_read_buffer_wait+0x98>
			rx_data[rx_pos++] = (received_data >> 8);
     db8:	3602      	adds	r6, #2
     dba:	b2b6      	uxth	r6, r6
     dbc:	0a1b      	lsrs	r3, r3, #8
     dbe:	4661      	mov	r1, ip
     dc0:	554b      	strb	r3, [r1, r5]
     dc2:	e7da      	b.n	d7a <spi_read_buffer_wait+0xae>
     dc4:	9d01      	ldr	r5, [sp, #4]
     dc6:	e002      	b.n	dce <spi_read_buffer_wait+0x102>
				return STATUS_ERR_TIMEOUT;
     dc8:	2512      	movs	r5, #18
     dca:	e000      	b.n	dce <spi_read_buffer_wait+0x102>
		return STATUS_ERR_IO;
     dcc:	2510      	movs	r5, #16
		}
	}

	return STATUS_OK;
}
     dce:	0028      	movs	r0, r5
     dd0:	b003      	add	sp, #12
     dd2:	bc0c      	pop	{r2, r3}
     dd4:	4691      	mov	r9, r2
     dd6:	469a      	mov	sl, r3
     dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     dda:	9d01      	ldr	r5, [sp, #4]
     ddc:	e7f7      	b.n	dce <spi_read_buffer_wait+0x102>
     dde:	46c0      	nop			; (mov r8, r8)
     de0:	0000ffff 	.word	0x0000ffff
     de4:	00002710 	.word	0x00002710

00000de8 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     de8:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     dea:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
     dec:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
     dee:	2c01      	cmp	r4, #1
     df0:	d001      	beq.n	df6 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
     df2:	0018      	movs	r0, r3
     df4:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
     df6:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
     df8:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
     dfa:	2c00      	cmp	r4, #0
     dfc:	d1f9      	bne.n	df2 <spi_select_slave+0xa>
		if (select) {
     dfe:	2a00      	cmp	r2, #0
     e00:	d058      	beq.n	eb4 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
     e02:	784b      	ldrb	r3, [r1, #1]
     e04:	2b00      	cmp	r3, #0
     e06:	d044      	beq.n	e92 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     e08:	6803      	ldr	r3, [r0, #0]
     e0a:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
     e0c:	07db      	lsls	r3, r3, #31
     e0e:	d410      	bmi.n	e32 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
     e10:	780a      	ldrb	r2, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     e12:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     e14:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     e16:	2900      	cmp	r1, #0
     e18:	d104      	bne.n	e24 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
     e1a:	0953      	lsrs	r3, r2, #5
     e1c:	01db      	lsls	r3, r3, #7
     e1e:	492e      	ldr	r1, [pc, #184]	; (ed8 <spi_select_slave+0xf0>)
     e20:	468c      	mov	ip, r1
     e22:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     e24:	211f      	movs	r1, #31
     e26:	4011      	ands	r1, r2
     e28:	2201      	movs	r2, #1
     e2a:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     e2c:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
     e2e:	2305      	movs	r3, #5
     e30:	e7df      	b.n	df2 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
     e32:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     e34:	09d4      	lsrs	r4, r2, #7
		return NULL;
     e36:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     e38:	2c00      	cmp	r4, #0
     e3a:	d104      	bne.n	e46 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
     e3c:	0953      	lsrs	r3, r2, #5
     e3e:	01db      	lsls	r3, r3, #7
     e40:	4c25      	ldr	r4, [pc, #148]	; (ed8 <spi_select_slave+0xf0>)
     e42:	46a4      	mov	ip, r4
     e44:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     e46:	241f      	movs	r4, #31
     e48:	4014      	ands	r4, r2
     e4a:	2201      	movs	r2, #1
     e4c:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
     e4e:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
     e50:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     e52:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     e54:	07d2      	lsls	r2, r2, #31
     e56:	d501      	bpl.n	e5c <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     e58:	788a      	ldrb	r2, [r1, #2]
     e5a:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
     e5c:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
     e5e:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
     e60:	2a00      	cmp	r2, #0
     e62:	d1c6      	bne.n	df2 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
     e64:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
     e66:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     e68:	7e13      	ldrb	r3, [r2, #24]
     e6a:	420b      	tst	r3, r1
     e6c:	d0fc      	beq.n	e68 <spi_select_slave+0x80>
     e6e:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
     e70:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
     e72:	0749      	lsls	r1, r1, #29
     e74:	d5bd      	bpl.n	df2 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     e76:	8b53      	ldrh	r3, [r2, #26]
     e78:	075b      	lsls	r3, r3, #29
     e7a:	d501      	bpl.n	e80 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     e7c:	2304      	movs	r3, #4
     e7e:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     e80:	7983      	ldrb	r3, [r0, #6]
     e82:	2b01      	cmp	r3, #1
     e84:	d002      	beq.n	e8c <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     e86:	6a93      	ldr	r3, [r2, #40]	; 0x28
     e88:	2300      	movs	r3, #0
     e8a:	e7b2      	b.n	df2 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     e8c:	6a93      	ldr	r3, [r2, #40]	; 0x28
     e8e:	2300      	movs	r3, #0
     e90:	e7af      	b.n	df2 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
     e92:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     e94:	09d1      	lsrs	r1, r2, #7
		return NULL;
     e96:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     e98:	2900      	cmp	r1, #0
     e9a:	d104      	bne.n	ea6 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
     e9c:	0953      	lsrs	r3, r2, #5
     e9e:	01db      	lsls	r3, r3, #7
     ea0:	490d      	ldr	r1, [pc, #52]	; (ed8 <spi_select_slave+0xf0>)
     ea2:	468c      	mov	ip, r1
     ea4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     ea6:	211f      	movs	r1, #31
     ea8:	4011      	ands	r1, r2
     eaa:	2201      	movs	r2, #1
     eac:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     eae:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
     eb0:	2300      	movs	r3, #0
     eb2:	e79e      	b.n	df2 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
     eb4:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     eb6:	09d1      	lsrs	r1, r2, #7
		return NULL;
     eb8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     eba:	2900      	cmp	r1, #0
     ebc:	d104      	bne.n	ec8 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
     ebe:	0953      	lsrs	r3, r2, #5
     ec0:	01db      	lsls	r3, r3, #7
     ec2:	4905      	ldr	r1, [pc, #20]	; (ed8 <spi_select_slave+0xf0>)
     ec4:	468c      	mov	ip, r1
     ec6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     ec8:	211f      	movs	r1, #31
     eca:	4011      	ands	r1, r2
     ecc:	2201      	movs	r2, #1
     ece:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     ed0:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
     ed2:	2300      	movs	r3, #0
     ed4:	e78d      	b.n	df2 <spi_select_slave+0xa>
     ed6:	46c0      	nop			; (mov r8, r8)
     ed8:	41004400 	.word	0x41004400

00000edc <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     edc:	b5f0      	push	{r4, r5, r6, r7, lr}
     ede:	46de      	mov	lr, fp
     ee0:	4657      	mov	r7, sl
     ee2:	464e      	mov	r6, r9
     ee4:	4645      	mov	r5, r8
     ee6:	b5e0      	push	{r5, r6, r7, lr}
     ee8:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     eea:	2338      	movs	r3, #56	; 0x38
     eec:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
     eee:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
     ef0:	2c05      	cmp	r4, #5
     ef2:	d002      	beq.n	efa <spi_write_buffer_wait+0x1e>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     ef4:	3312      	adds	r3, #18
	if (length == 0) {
     ef6:	2a00      	cmp	r2, #0
     ef8:	d107      	bne.n	f0a <spi_write_buffer_wait+0x2e>
			}
		}
	}
#  endif
	return STATUS_OK;
}
     efa:	0018      	movs	r0, r3
     efc:	b003      	add	sp, #12
     efe:	bc3c      	pop	{r2, r3, r4, r5}
     f00:	4690      	mov	r8, r2
     f02:	4699      	mov	r9, r3
     f04:	46a2      	mov	sl, r4
     f06:	46ab      	mov	fp, r5
     f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     f0a:	7943      	ldrb	r3, [r0, #5]
     f0c:	2b00      	cmp	r3, #0
     f0e:	d103      	bne.n	f18 <spi_write_buffer_wait+0x3c>
	SercomSpi *const spi_module = &(module->hw->SPI);
     f10:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     f12:	7e1c      	ldrb	r4, [r3, #24]
     f14:	07a4      	lsls	r4, r4, #30
     f16:	d40a      	bmi.n	f2e <spi_write_buffer_wait+0x52>
						data_to_send = tx_data[tx_pos++];
     f18:	4693      	mov	fp, r2
     f1a:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
     f1c:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
     f1e:	2502      	movs	r5, #2
     f20:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
     f22:	3502      	adds	r5, #2
     f24:	46a8      	mov	r8, r5
     f26:	3a01      	subs	r2, #1
     f28:	b292      	uxth	r2, r2
     f2a:	468a      	mov	sl, r1
     f2c:	e023      	b.n	f76 <spi_write_buffer_wait+0x9a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     f2e:	2402      	movs	r4, #2
     f30:	761c      	strb	r4, [r3, #24]
     f32:	e7f1      	b.n	f18 <spi_write_buffer_wait+0x3c>
     f34:	7e35      	ldrb	r5, [r6, #24]
			if (spi_is_write_complete(module)) {
     f36:	4661      	mov	r1, ip
     f38:	420d      	tst	r5, r1
     f3a:	d12e      	bne.n	f9a <spi_write_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     f3c:	7e35      	ldrb	r5, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
     f3e:	421d      	tst	r5, r3
     f40:	d100      	bne.n	f44 <spi_write_buffer_wait+0x68>
     f42:	e0c2      	b.n	10ca <spi_write_buffer_wait+0x1ee>
	SercomSpi *const spi_module = &(module->hw->SPI);
     f44:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     f46:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
     f48:	421d      	tst	r5, r3
     f4a:	d0fc      	beq.n	f46 <spi_write_buffer_wait+0x6a>
		uint16_t data_to_send = tx_data[tx_pos++];
     f4c:	1c67      	adds	r7, r4, #1
     f4e:	b2bf      	uxth	r7, r7
     f50:	4651      	mov	r1, sl
     f52:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f54:	7981      	ldrb	r1, [r0, #6]
     f56:	2901      	cmp	r1, #1
     f58:	d023      	beq.n	fa2 <spi_write_buffer_wait+0xc6>
		uint16_t data_to_send = tx_data[tx_pos++];
     f5a:	b2ad      	uxth	r5, r5
     f5c:	003c      	movs	r4, r7
     f5e:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
     f60:	421f      	tst	r7, r3
     f62:	d002      	beq.n	f6a <spi_write_buffer_wait+0x8e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     f64:	05ed      	lsls	r5, r5, #23
     f66:	0ded      	lsrs	r5, r5, #23
     f68:	62b5      	str	r5, [r6, #40]	; 0x28
     f6a:	1e55      	subs	r5, r2, #1
     f6c:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
     f6e:	79c6      	ldrb	r6, [r0, #7]
     f70:	2e00      	cmp	r6, #0
     f72:	d11d      	bne.n	fb0 <spi_write_buffer_wait+0xd4>
     f74:	002a      	movs	r2, r5
	while (length--) {
     f76:	4d5a      	ldr	r5, [pc, #360]	; (10e0 <spi_write_buffer_wait+0x204>)
     f78:	42aa      	cmp	r2, r5
     f7a:	d070      	beq.n	105e <spi_write_buffer_wait+0x182>
		if (module->mode == SPI_MODE_SLAVE) {
     f7c:	7945      	ldrb	r5, [r0, #5]
     f7e:	2d00      	cmp	r5, #0
     f80:	d1e0      	bne.n	f44 <spi_write_buffer_wait+0x68>
	SercomSpi *const spi_module = &(module->hw->SPI);
     f82:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     f84:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
     f86:	421d      	tst	r5, r3
     f88:	d1d4      	bne.n	f34 <spi_write_buffer_wait+0x58>
     f8a:	4d56      	ldr	r5, [pc, #344]	; (10e4 <spi_write_buffer_wait+0x208>)
     f8c:	7e37      	ldrb	r7, [r6, #24]
     f8e:	421f      	tst	r7, r3
     f90:	d1d0      	bne.n	f34 <spi_write_buffer_wait+0x58>
     f92:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     f94:	2d00      	cmp	r5, #0
     f96:	d1f9      	bne.n	f8c <spi_write_buffer_wait+0xb0>
     f98:	e7cc      	b.n	f34 <spi_write_buffer_wait+0x58>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     f9a:	2302      	movs	r3, #2
     f9c:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
     f9e:	3302      	adds	r3, #2
     fa0:	e7ab      	b.n	efa <spi_write_buffer_wait+0x1e>
			data_to_send |= (tx_data[tx_pos++] << 8);
     fa2:	3402      	adds	r4, #2
     fa4:	b2a4      	uxth	r4, r4
     fa6:	4651      	mov	r1, sl
     fa8:	5dcf      	ldrb	r7, [r1, r7]
     faa:	023f      	lsls	r7, r7, #8
     fac:	433d      	orrs	r5, r7
     fae:	e7d6      	b.n	f5e <spi_write_buffer_wait+0x82>
     fb0:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
     fb2:	7945      	ldrb	r5, [r0, #5]
     fb4:	2d00      	cmp	r5, #0
     fb6:	d137      	bne.n	1028 <spi_write_buffer_wait+0x14c>
     fb8:	4d4b      	ldr	r5, [pc, #300]	; (10e8 <spi_write_buffer_wait+0x20c>)
     fba:	9101      	str	r1, [sp, #4]
     fbc:	e012      	b.n	fe4 <spi_write_buffer_wait+0x108>
							data_to_send |= (tx_data[tx_pos++] << 8);
     fbe:	3402      	adds	r4, #2
     fc0:	b2a4      	uxth	r4, r4
     fc2:	4649      	mov	r1, r9
     fc4:	9f01      	ldr	r7, [sp, #4]
     fc6:	5c79      	ldrb	r1, [r7, r1]
     fc8:	0209      	lsls	r1, r1, #8
     fca:	9f00      	ldr	r7, [sp, #0]
     fcc:	430f      	orrs	r7, r1
     fce:	e01b      	b.n	1008 <spi_write_buffer_wait+0x12c>
						length--;
     fd0:	3a01      	subs	r2, #1
     fd2:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
     fd4:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     fd6:	7e37      	ldrb	r7, [r6, #24]
					if (spi_is_ready_to_read(module)) {
     fd8:	4641      	mov	r1, r8
     fda:	420f      	tst	r7, r1
     fdc:	d11b      	bne.n	1016 <spi_write_buffer_wait+0x13a>
     fde:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     fe0:	2d00      	cmp	r5, #0
     fe2:	d018      	beq.n	1016 <spi_write_buffer_wait+0x13a>
					if (length && spi_is_ready_to_write(module)) {
     fe4:	2a00      	cmp	r2, #0
     fe6:	d0f5      	beq.n	fd4 <spi_write_buffer_wait+0xf8>
	SercomSpi *const spi_module = &(module->hw->SPI);
     fe8:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     fea:	7e37      	ldrb	r7, [r6, #24]
     fec:	421f      	tst	r7, r3
     fee:	d0f1      	beq.n	fd4 <spi_write_buffer_wait+0xf8>
						data_to_send = tx_data[tx_pos++];
     ff0:	1c67      	adds	r7, r4, #1
     ff2:	b2b9      	uxth	r1, r7
     ff4:	4689      	mov	r9, r1
     ff6:	9901      	ldr	r1, [sp, #4]
     ff8:	5d09      	ldrb	r1, [r1, r4]
     ffa:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     ffc:	7981      	ldrb	r1, [r0, #6]
     ffe:	2901      	cmp	r1, #1
    1000:	d0dd      	beq.n	fbe <spi_write_buffer_wait+0xe2>
						data_to_send = tx_data[tx_pos++];
    1002:	4669      	mov	r1, sp
    1004:	880f      	ldrh	r7, [r1, #0]
    1006:	464c      	mov	r4, r9
    1008:	7e31      	ldrb	r1, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    100a:	4219      	tst	r1, r3
    100c:	d0e0      	beq.n	fd0 <spi_write_buffer_wait+0xf4>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    100e:	05ff      	lsls	r7, r7, #23
    1010:	0dff      	lsrs	r7, r7, #23
    1012:	62b7      	str	r7, [r6, #40]	; 0x28
    1014:	e7dc      	b.n	fd0 <spi_write_buffer_wait+0xf4>
    1016:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1018:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
    101a:	4667      	mov	r7, ip
    101c:	423d      	tst	r5, r7
    101e:	d118      	bne.n	1052 <spi_write_buffer_wait+0x176>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1020:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
    1022:	4646      	mov	r6, r8
    1024:	4235      	tst	r5, r6
    1026:	d052      	beq.n	10ce <spi_write_buffer_wait+0x1f2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1028:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    102a:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
    102c:	4647      	mov	r7, r8
    102e:	423d      	tst	r5, r7
    1030:	d0fb      	beq.n	102a <spi_write_buffer_wait+0x14e>
    1032:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    1034:	423d      	tst	r5, r7
    1036:	d007      	beq.n	1048 <spi_write_buffer_wait+0x16c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1038:	8b75      	ldrh	r5, [r6, #26]
    103a:	423d      	tst	r5, r7
    103c:	d000      	beq.n	1040 <spi_write_buffer_wait+0x164>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    103e:	8377      	strh	r7, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1040:	7985      	ldrb	r5, [r0, #6]
    1042:	2d01      	cmp	r5, #1
    1044:	d009      	beq.n	105a <spi_write_buffer_wait+0x17e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1046:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			flush_length--;
    1048:	465d      	mov	r5, fp
    104a:	3d01      	subs	r5, #1
    104c:	b2ad      	uxth	r5, r5
    104e:	46ab      	mov	fp, r5
    1050:	e769      	b.n	f26 <spi_write_buffer_wait+0x4a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1052:	2302      	movs	r3, #2
    1054:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
    1056:	3302      	adds	r3, #2
    1058:	e74f      	b.n	efa <spi_write_buffer_wait+0x1e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    105a:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    105c:	e7f4      	b.n	1048 <spi_write_buffer_wait+0x16c>
	if (module->mode == SPI_MODE_MASTER) {
    105e:	7943      	ldrb	r3, [r0, #5]
    1060:	2b01      	cmp	r3, #1
    1062:	d00b      	beq.n	107c <spi_write_buffer_wait+0x1a0>
	if (module->mode == SPI_MODE_SLAVE) {
    1064:	2b00      	cmp	r3, #0
    1066:	d134      	bne.n	10d2 <spi_write_buffer_wait+0x1f6>
		if (module->receiver_enabled) {
    1068:	79c2      	ldrb	r2, [r0, #7]
    106a:	2a00      	cmp	r2, #0
    106c:	d100      	bne.n	1070 <spi_write_buffer_wait+0x194>
    106e:	e744      	b.n	efa <spi_write_buffer_wait+0x1e>
					if (spi_is_ready_to_read(module)) {
    1070:	2404      	movs	r4, #4
			while (flush_length) {
    1072:	465b      	mov	r3, fp
    1074:	465d      	mov	r5, fp
    1076:	2b00      	cmp	r3, #0
    1078:	d119      	bne.n	10ae <spi_write_buffer_wait+0x1d2>
    107a:	e73e      	b.n	efa <spi_write_buffer_wait+0x1e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    107c:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    107e:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1080:	7e0b      	ldrb	r3, [r1, #24]
    1082:	4213      	tst	r3, r2
    1084:	d0fc      	beq.n	1080 <spi_write_buffer_wait+0x1a4>
	return STATUS_OK;
    1086:	2300      	movs	r3, #0
    1088:	e737      	b.n	efa <spi_write_buffer_wait+0x1e>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    108a:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
    108c:	4223      	tst	r3, r4
    108e:	d022      	beq.n	10d6 <spi_write_buffer_wait+0x1fa>
    1090:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    1092:	4223      	tst	r3, r4
    1094:	d007      	beq.n	10a6 <spi_write_buffer_wait+0x1ca>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1096:	8b4b      	ldrh	r3, [r1, #26]
    1098:	4223      	tst	r3, r4
    109a:	d000      	beq.n	109e <spi_write_buffer_wait+0x1c2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    109c:	834c      	strh	r4, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    109e:	7983      	ldrb	r3, [r0, #6]
    10a0:	2b01      	cmp	r3, #1
    10a2:	d010      	beq.n	10c6 <spi_write_buffer_wait+0x1ea>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    10a4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
				flush_length--;
    10a6:	3d01      	subs	r5, #1
    10a8:	b2ad      	uxth	r5, r5
			while (flush_length) {
    10aa:	2d00      	cmp	r5, #0
    10ac:	d015      	beq.n	10da <spi_write_buffer_wait+0x1fe>
	SercomSpi *const spi_module = &(module->hw->SPI);
    10ae:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    10b0:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
    10b2:	4223      	tst	r3, r4
    10b4:	d1e9      	bne.n	108a <spi_write_buffer_wait+0x1ae>
    10b6:	4b0b      	ldr	r3, [pc, #44]	; (10e4 <spi_write_buffer_wait+0x208>)
    10b8:	7e0a      	ldrb	r2, [r1, #24]
    10ba:	4222      	tst	r2, r4
    10bc:	d1e5      	bne.n	108a <spi_write_buffer_wait+0x1ae>
    10be:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    10c0:	2b00      	cmp	r3, #0
    10c2:	d1f9      	bne.n	10b8 <spi_write_buffer_wait+0x1dc>
    10c4:	e7e1      	b.n	108a <spi_write_buffer_wait+0x1ae>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    10c6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    10c8:	e7ed      	b.n	10a6 <spi_write_buffer_wait+0x1ca>
				return STATUS_ERR_TIMEOUT;
    10ca:	2312      	movs	r3, #18
    10cc:	e715      	b.n	efa <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    10ce:	2312      	movs	r3, #18
    10d0:	e713      	b.n	efa <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    10d2:	2300      	movs	r3, #0
    10d4:	e711      	b.n	efa <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    10d6:	2312      	movs	r3, #18
    10d8:	e70f      	b.n	efa <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    10da:	2300      	movs	r3, #0
    10dc:	e70d      	b.n	efa <spi_write_buffer_wait+0x1e>
    10de:	46c0      	nop			; (mov r8, r8)
    10e0:	0000ffff 	.word	0x0000ffff
    10e4:	00002710 	.word	0x00002710
    10e8:	00002711 	.word	0x00002711

000010ec <spi_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    10ec:	1c93      	adds	r3, r2, #2
    10ee:	009b      	lsls	r3, r3, #2
    10f0:	18c3      	adds	r3, r0, r3
    10f2:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback |= (1 << callback_type);
    10f4:	2136      	movs	r1, #54	; 0x36
    10f6:	2301      	movs	r3, #1
    10f8:	4093      	lsls	r3, r2
    10fa:	001a      	movs	r2, r3
    10fc:	5c43      	ldrb	r3, [r0, r1]
    10fe:	4313      	orrs	r3, r2
    1100:	5443      	strb	r3, [r0, r1]
}
    1102:	4770      	bx	lr

00001104 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    1104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    1106:	0080      	lsls	r0, r0, #2
    1108:	4b85      	ldr	r3, [pc, #532]	; (1320 <_spi_interrupt_handler+0x21c>)
    110a:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    110c:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    110e:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    1110:	5ce3      	ldrb	r3, [r4, r3]
    1112:	2236      	movs	r2, #54	; 0x36
    1114:	5ca7      	ldrb	r7, [r4, r2]
    1116:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    1118:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    111a:	7db5      	ldrb	r5, [r6, #22]
    111c:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    111e:	07eb      	lsls	r3, r5, #31
    1120:	d52e      	bpl.n	1180 <_spi_interrupt_handler+0x7c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1122:	7963      	ldrb	r3, [r4, #5]
    1124:	2b01      	cmp	r3, #1
    1126:	d025      	beq.n	1174 <_spi_interrupt_handler+0x70>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    1128:	2b00      	cmp	r3, #0
    112a:	d129      	bne.n	1180 <_spi_interrupt_handler+0x7c>
			(module->dir != SPI_DIRECTION_READ))
    112c:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    112e:	2b00      	cmp	r3, #0
    1130:	d026      	beq.n	1180 <_spi_interrupt_handler+0x7c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1132:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    1134:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1136:	7813      	ldrb	r3, [r2, #0]
    1138:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    113a:	1c50      	adds	r0, r2, #1
    113c:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    113e:	79a0      	ldrb	r0, [r4, #6]
    1140:	2801      	cmp	r0, #1
    1142:	d100      	bne.n	1146 <_spi_interrupt_handler+0x42>
    1144:	e069      	b.n	121a <_spi_interrupt_handler+0x116>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    1146:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    1148:	05db      	lsls	r3, r3, #23
    114a:	0ddb      	lsrs	r3, r3, #23
    114c:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    114e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    1150:	3b01      	subs	r3, #1
    1152:	b29b      	uxth	r3, r3
    1154:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    1156:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    1158:	b29b      	uxth	r3, r3
    115a:	2b00      	cmp	r3, #0
    115c:	d110      	bne.n	1180 <_spi_interrupt_handler+0x7c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    115e:	3301      	adds	r3, #1
    1160:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    1162:	7a63      	ldrb	r3, [r4, #9]
    1164:	2b01      	cmp	r3, #1
    1166:	d10b      	bne.n	1180 <_spi_interrupt_handler+0x7c>
    1168:	79e3      	ldrb	r3, [r4, #7]
    116a:	2b00      	cmp	r3, #0
    116c:	d108      	bne.n	1180 <_spi_interrupt_handler+0x7c>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    116e:	3302      	adds	r3, #2
    1170:	75b3      	strb	r3, [r6, #22]
    1172:	e005      	b.n	1180 <_spi_interrupt_handler+0x7c>
			(module->dir == SPI_DIRECTION_READ)) {
    1174:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    1176:	2b00      	cmp	r3, #0
    1178:	d03e      	beq.n	11f8 <_spi_interrupt_handler+0xf4>
			(module->dir != SPI_DIRECTION_READ))
    117a:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    117c:	2b00      	cmp	r3, #0
    117e:	d1d8      	bne.n	1132 <_spi_interrupt_handler+0x2e>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    1180:	076b      	lsls	r3, r5, #29
    1182:	d511      	bpl.n	11a8 <_spi_interrupt_handler+0xa4>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1184:	8b73      	ldrh	r3, [r6, #26]
    1186:	075b      	lsls	r3, r3, #29
    1188:	d551      	bpl.n	122e <_spi_interrupt_handler+0x12a>
			if (module->dir != SPI_DIRECTION_WRITE) {
    118a:	7a63      	ldrb	r3, [r4, #9]
    118c:	2b01      	cmp	r3, #1
    118e:	d008      	beq.n	11a2 <_spi_interrupt_handler+0x9e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    1190:	221e      	movs	r2, #30
    1192:	2338      	movs	r3, #56	; 0x38
    1194:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    1196:	3b35      	subs	r3, #53	; 0x35
    1198:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    119a:	3302      	adds	r3, #2
    119c:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    119e:	073b      	lsls	r3, r7, #28
    11a0:	d441      	bmi.n	1226 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    11a2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    11a4:	2304      	movs	r3, #4
    11a6:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    11a8:	07ab      	lsls	r3, r5, #30
    11aa:	d515      	bpl.n	11d8 <_spi_interrupt_handler+0xd4>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    11ac:	7963      	ldrb	r3, [r4, #5]
    11ae:	2b00      	cmp	r3, #0
    11b0:	d10e      	bne.n	11d0 <_spi_interrupt_handler+0xcc>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    11b2:	3307      	adds	r3, #7
    11b4:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    11b6:	3b05      	subs	r3, #5
    11b8:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    11ba:	3301      	adds	r3, #1
    11bc:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    11be:	2300      	movs	r3, #0
    11c0:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    11c2:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    11c4:	3338      	adds	r3, #56	; 0x38
    11c6:	2200      	movs	r2, #0
    11c8:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    11ca:	06fb      	lsls	r3, r7, #27
    11cc:	d500      	bpl.n	11d0 <_spi_interrupt_handler+0xcc>
    11ce:	e07f      	b.n	12d0 <_spi_interrupt_handler+0x1cc>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    11d0:	7963      	ldrb	r3, [r4, #5]
    11d2:	2b01      	cmp	r3, #1
    11d4:	d100      	bne.n	11d8 <_spi_interrupt_handler+0xd4>
    11d6:	e07f      	b.n	12d8 <_spi_interrupt_handler+0x1d4>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    11d8:	072b      	lsls	r3, r5, #28
    11da:	d508      	bpl.n	11ee <_spi_interrupt_handler+0xea>
			if (module->mode == SPI_MODE_SLAVE) {
    11dc:	7963      	ldrb	r3, [r4, #5]
    11de:	2b00      	cmp	r3, #0
    11e0:	d105      	bne.n	11ee <_spi_interrupt_handler+0xea>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    11e2:	3308      	adds	r3, #8
    11e4:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    11e6:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    11e8:	06bb      	lsls	r3, r7, #26
    11ea:	d500      	bpl.n	11ee <_spi_interrupt_handler+0xea>
    11ec:	e08a      	b.n	1304 <_spi_interrupt_handler+0x200>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    11ee:	b26d      	sxtb	r5, r5
    11f0:	2d00      	cmp	r5, #0
    11f2:	da00      	bge.n	11f6 <_spi_interrupt_handler+0xf2>
    11f4:	e08a      	b.n	130c <_spi_interrupt_handler+0x208>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    11f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	spi_hw->DATA.reg = dummy_write;
    11f8:	4b4a      	ldr	r3, [pc, #296]	; (1324 <_spi_interrupt_handler+0x220>)
    11fa:	881b      	ldrh	r3, [r3, #0]
    11fc:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    11fe:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1200:	3b01      	subs	r3, #1
    1202:	b29b      	uxth	r3, r3
    1204:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    1206:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1208:	b29b      	uxth	r3, r3
    120a:	2b00      	cmp	r3, #0
    120c:	d101      	bne.n	1212 <_spi_interrupt_handler+0x10e>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    120e:	3301      	adds	r3, #1
    1210:	7533      	strb	r3, [r6, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
    1212:	7963      	ldrb	r3, [r4, #5]
		if (0
    1214:	2b01      	cmp	r3, #1
    1216:	d0b0      	beq.n	117a <_spi_interrupt_handler+0x76>
    1218:	e786      	b.n	1128 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    121a:	7850      	ldrb	r0, [r2, #1]
    121c:	0200      	lsls	r0, r0, #8
    121e:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    1220:	3202      	adds	r2, #2
    1222:	62e2      	str	r2, [r4, #44]	; 0x2c
    1224:	e790      	b.n	1148 <_spi_interrupt_handler+0x44>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    1226:	0020      	movs	r0, r4
    1228:	69a3      	ldr	r3, [r4, #24]
    122a:	4798      	blx	r3
    122c:	e7b9      	b.n	11a2 <_spi_interrupt_handler+0x9e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    122e:	7a63      	ldrb	r3, [r4, #9]
    1230:	2b01      	cmp	r3, #1
    1232:	d027      	beq.n	1284 <_spi_interrupt_handler+0x180>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1234:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    1236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1238:	05db      	lsls	r3, r3, #23
    123a:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    123c:	b2da      	uxtb	r2, r3
    123e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    1240:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    1242:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1244:	1c51      	adds	r1, r2, #1
    1246:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1248:	79a1      	ldrb	r1, [r4, #6]
    124a:	2901      	cmp	r1, #1
    124c:	d033      	beq.n	12b6 <_spi_interrupt_handler+0x1b2>
	module->remaining_rx_buffer_length--;
    124e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1250:	3b01      	subs	r3, #1
    1252:	b29b      	uxth	r3, r3
    1254:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    1256:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1258:	b29b      	uxth	r3, r3
    125a:	2b00      	cmp	r3, #0
    125c:	d1a4      	bne.n	11a8 <_spi_interrupt_handler+0xa4>
					module->status = STATUS_OK;
    125e:	2200      	movs	r2, #0
    1260:	3338      	adds	r3, #56	; 0x38
    1262:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1264:	3b34      	subs	r3, #52	; 0x34
    1266:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    1268:	7a63      	ldrb	r3, [r4, #9]
    126a:	2b02      	cmp	r3, #2
    126c:	d029      	beq.n	12c2 <_spi_interrupt_handler+0x1be>
					} else if (module->dir == SPI_DIRECTION_READ) {
    126e:	7a63      	ldrb	r3, [r4, #9]
    1270:	2b00      	cmp	r3, #0
    1272:	d000      	beq.n	1276 <_spi_interrupt_handler+0x172>
    1274:	e798      	b.n	11a8 <_spi_interrupt_handler+0xa4>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1276:	07bb      	lsls	r3, r7, #30
    1278:	d400      	bmi.n	127c <_spi_interrupt_handler+0x178>
    127a:	e795      	b.n	11a8 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    127c:	0020      	movs	r0, r4
    127e:	6923      	ldr	r3, [r4, #16]
    1280:	4798      	blx	r3
    1282:	e791      	b.n	11a8 <_spi_interrupt_handler+0xa4>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1284:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    1286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    1288:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    128a:	3b01      	subs	r3, #1
    128c:	b29b      	uxth	r3, r3
    128e:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    1290:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1292:	b29b      	uxth	r3, r3
    1294:	2b00      	cmp	r3, #0
    1296:	d000      	beq.n	129a <_spi_interrupt_handler+0x196>
    1298:	e786      	b.n	11a8 <_spi_interrupt_handler+0xa4>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    129a:	3304      	adds	r3, #4
    129c:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    129e:	2200      	movs	r2, #0
    12a0:	3334      	adds	r3, #52	; 0x34
    12a2:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    12a4:	3b35      	subs	r3, #53	; 0x35
    12a6:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    12a8:	07fb      	lsls	r3, r7, #31
    12aa:	d400      	bmi.n	12ae <_spi_interrupt_handler+0x1aa>
    12ac:	e77c      	b.n	11a8 <_spi_interrupt_handler+0xa4>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    12ae:	0020      	movs	r0, r4
    12b0:	68e3      	ldr	r3, [r4, #12]
    12b2:	4798      	blx	r3
    12b4:	e778      	b.n	11a8 <_spi_interrupt_handler+0xa4>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    12b6:	0a1b      	lsrs	r3, r3, #8
    12b8:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    12ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    12bc:	3301      	adds	r3, #1
    12be:	62a3      	str	r3, [r4, #40]	; 0x28
    12c0:	e7c5      	b.n	124e <_spi_interrupt_handler+0x14a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    12c2:	077b      	lsls	r3, r7, #29
    12c4:	d400      	bmi.n	12c8 <_spi_interrupt_handler+0x1c4>
    12c6:	e76f      	b.n	11a8 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    12c8:	0020      	movs	r0, r4
    12ca:	6963      	ldr	r3, [r4, #20]
    12cc:	4798      	blx	r3
    12ce:	e76b      	b.n	11a8 <_spi_interrupt_handler+0xa4>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    12d0:	0020      	movs	r0, r4
    12d2:	69e3      	ldr	r3, [r4, #28]
    12d4:	4798      	blx	r3
    12d6:	e77b      	b.n	11d0 <_spi_interrupt_handler+0xcc>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    12d8:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    12da:	2b01      	cmp	r3, #1
    12dc:	d000      	beq.n	12e0 <_spi_interrupt_handler+0x1dc>
    12de:	e786      	b.n	11ee <_spi_interrupt_handler+0xea>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    12e0:	79e3      	ldrb	r3, [r4, #7]
    12e2:	2b00      	cmp	r3, #0
    12e4:	d000      	beq.n	12e8 <_spi_interrupt_handler+0x1e4>
    12e6:	e782      	b.n	11ee <_spi_interrupt_handler+0xea>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    12e8:	3302      	adds	r3, #2
    12ea:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    12ec:	3301      	adds	r3, #1
    12ee:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    12f0:	2200      	movs	r2, #0
    12f2:	3335      	adds	r3, #53	; 0x35
    12f4:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    12f6:	07fb      	lsls	r3, r7, #31
    12f8:	d400      	bmi.n	12fc <_spi_interrupt_handler+0x1f8>
    12fa:	e76d      	b.n	11d8 <_spi_interrupt_handler+0xd4>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    12fc:	0020      	movs	r0, r4
    12fe:	68e3      	ldr	r3, [r4, #12]
    1300:	4798      	blx	r3
    1302:	e769      	b.n	11d8 <_spi_interrupt_handler+0xd4>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    1304:	0020      	movs	r0, r4
    1306:	6a23      	ldr	r3, [r4, #32]
    1308:	4798      	blx	r3
    130a:	e770      	b.n	11ee <_spi_interrupt_handler+0xea>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    130c:	2380      	movs	r3, #128	; 0x80
    130e:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1310:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    1312:	067b      	lsls	r3, r7, #25
    1314:	d400      	bmi.n	1318 <_spi_interrupt_handler+0x214>
    1316:	e76e      	b.n	11f6 <_spi_interrupt_handler+0xf2>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    1318:	6a63      	ldr	r3, [r4, #36]	; 0x24
    131a:	0020      	movs	r0, r4
    131c:	4798      	blx	r3
}
    131e:	e76a      	b.n	11f6 <_spi_interrupt_handler+0xf2>
    1320:	20000274 	.word	0x20000274
    1324:	20000270 	.word	0x20000270

00001328 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1328:	4770      	bx	lr
	...

0000132c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    132c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    132e:	4b0a      	ldr	r3, [pc, #40]	; (1358 <_sercom_set_handler+0x2c>)
    1330:	781b      	ldrb	r3, [r3, #0]
    1332:	2b00      	cmp	r3, #0
    1334:	d10c      	bne.n	1350 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1336:	4f09      	ldr	r7, [pc, #36]	; (135c <_sercom_set_handler+0x30>)
    1338:	4e09      	ldr	r6, [pc, #36]	; (1360 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    133a:	4d0a      	ldr	r5, [pc, #40]	; (1364 <_sercom_set_handler+0x38>)
    133c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    133e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1340:	195a      	adds	r2, r3, r5
    1342:	6014      	str	r4, [r2, #0]
    1344:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1346:	2b18      	cmp	r3, #24
    1348:	d1f9      	bne.n	133e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    134a:	2201      	movs	r2, #1
    134c:	4b02      	ldr	r3, [pc, #8]	; (1358 <_sercom_set_handler+0x2c>)
    134e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1350:	0080      	lsls	r0, r0, #2
    1352:	4b02      	ldr	r3, [pc, #8]	; (135c <_sercom_set_handler+0x30>)
    1354:	50c1      	str	r1, [r0, r3]
}
    1356:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1358:	2000002e 	.word	0x2000002e
    135c:	20000030 	.word	0x20000030
    1360:	00001329 	.word	0x00001329
    1364:	20000274 	.word	0x20000274

00001368 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1368:	b500      	push	{lr}
    136a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    136c:	2309      	movs	r3, #9
    136e:	466a      	mov	r2, sp
    1370:	7013      	strb	r3, [r2, #0]
    1372:	3301      	adds	r3, #1
    1374:	7053      	strb	r3, [r2, #1]
    1376:	3301      	adds	r3, #1
    1378:	7093      	strb	r3, [r2, #2]
    137a:	3301      	adds	r3, #1
    137c:	70d3      	strb	r3, [r2, #3]
    137e:	3301      	adds	r3, #1
    1380:	7113      	strb	r3, [r2, #4]
    1382:	3301      	adds	r3, #1
    1384:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1386:	4b03      	ldr	r3, [pc, #12]	; (1394 <_sercom_get_interrupt_vector+0x2c>)
    1388:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    138a:	466b      	mov	r3, sp
    138c:	5618      	ldrsb	r0, [r3, r0]
}
    138e:	b003      	add	sp, #12
    1390:	bd00      	pop	{pc}
    1392:	46c0      	nop			; (mov r8, r8)
    1394:	00000301 	.word	0x00000301

00001398 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1398:	b510      	push	{r4, lr}
    139a:	4b02      	ldr	r3, [pc, #8]	; (13a4 <SERCOM0_Handler+0xc>)
    139c:	681b      	ldr	r3, [r3, #0]
    139e:	2000      	movs	r0, #0
    13a0:	4798      	blx	r3
    13a2:	bd10      	pop	{r4, pc}
    13a4:	20000030 	.word	0x20000030

000013a8 <SERCOM1_Handler>:
    13a8:	b510      	push	{r4, lr}
    13aa:	4b02      	ldr	r3, [pc, #8]	; (13b4 <SERCOM1_Handler+0xc>)
    13ac:	685b      	ldr	r3, [r3, #4]
    13ae:	2001      	movs	r0, #1
    13b0:	4798      	blx	r3
    13b2:	bd10      	pop	{r4, pc}
    13b4:	20000030 	.word	0x20000030

000013b8 <SERCOM2_Handler>:
    13b8:	b510      	push	{r4, lr}
    13ba:	4b02      	ldr	r3, [pc, #8]	; (13c4 <SERCOM2_Handler+0xc>)
    13bc:	689b      	ldr	r3, [r3, #8]
    13be:	2002      	movs	r0, #2
    13c0:	4798      	blx	r3
    13c2:	bd10      	pop	{r4, pc}
    13c4:	20000030 	.word	0x20000030

000013c8 <SERCOM4_Handler>:
    13c8:	b510      	push	{r4, lr}
    13ca:	4b02      	ldr	r3, [pc, #8]	; (13d4 <SERCOM4_Handler+0xc>)
    13cc:	691b      	ldr	r3, [r3, #16]
    13ce:	2004      	movs	r0, #4
    13d0:	4798      	blx	r3
    13d2:	bd10      	pop	{r4, pc}
    13d4:	20000030 	.word	0x20000030

000013d8 <SERCOM5_Handler>:
    13d8:	b510      	push	{r4, lr}
    13da:	4b02      	ldr	r3, [pc, #8]	; (13e4 <SERCOM5_Handler+0xc>)
    13dc:	695b      	ldr	r3, [r3, #20]
    13de:	2005      	movs	r0, #5
    13e0:	4798      	blx	r3
    13e2:	bd10      	pop	{r4, pc}
    13e4:	20000030 	.word	0x20000030

000013e8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    13e8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    13ea:	2000      	movs	r0, #0
    13ec:	4b08      	ldr	r3, [pc, #32]	; (1410 <delay_init+0x28>)
    13ee:	4798      	blx	r3
    13f0:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    13f2:	4c08      	ldr	r4, [pc, #32]	; (1414 <delay_init+0x2c>)
    13f4:	21fa      	movs	r1, #250	; 0xfa
    13f6:	0089      	lsls	r1, r1, #2
    13f8:	47a0      	blx	r4
    13fa:	4b07      	ldr	r3, [pc, #28]	; (1418 <delay_init+0x30>)
    13fc:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    13fe:	4907      	ldr	r1, [pc, #28]	; (141c <delay_init+0x34>)
    1400:	0028      	movs	r0, r5
    1402:	47a0      	blx	r4
    1404:	4b06      	ldr	r3, [pc, #24]	; (1420 <delay_init+0x38>)
    1406:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1408:	2205      	movs	r2, #5
    140a:	4b06      	ldr	r3, [pc, #24]	; (1424 <delay_init+0x3c>)
    140c:	601a      	str	r2, [r3, #0]
}
    140e:	bd70      	pop	{r4, r5, r6, pc}
    1410:	00001a75 	.word	0x00001a75
    1414:	00002051 	.word	0x00002051
    1418:	20000004 	.word	0x20000004
    141c:	000f4240 	.word	0x000f4240
    1420:	20000008 	.word	0x20000008
    1424:	e000e010 	.word	0xe000e010

00001428 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    1428:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    142a:	4b08      	ldr	r3, [pc, #32]	; (144c <delay_cycles_ms+0x24>)
    142c:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    142e:	4a08      	ldr	r2, [pc, #32]	; (1450 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    1430:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1432:	2180      	movs	r1, #128	; 0x80
    1434:	0249      	lsls	r1, r1, #9
	while (n--) {
    1436:	3801      	subs	r0, #1
    1438:	d307      	bcc.n	144a <delay_cycles_ms+0x22>
	if (n > 0) {
    143a:	2c00      	cmp	r4, #0
    143c:	d0fb      	beq.n	1436 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    143e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1440:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1442:	6813      	ldr	r3, [r2, #0]
    1444:	420b      	tst	r3, r1
    1446:	d0fc      	beq.n	1442 <delay_cycles_ms+0x1a>
    1448:	e7f5      	b.n	1436 <delay_cycles_ms+0xe>
	}
}
    144a:	bd30      	pop	{r4, r5, pc}
    144c:	20000004 	.word	0x20000004
    1450:	e000e010 	.word	0xe000e010

00001454 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1454:	4b0c      	ldr	r3, [pc, #48]	; (1488 <cpu_irq_enter_critical+0x34>)
    1456:	681b      	ldr	r3, [r3, #0]
    1458:	2b00      	cmp	r3, #0
    145a:	d106      	bne.n	146a <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    145c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1460:	2b00      	cmp	r3, #0
    1462:	d007      	beq.n	1474 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1464:	2200      	movs	r2, #0
    1466:	4b09      	ldr	r3, [pc, #36]	; (148c <cpu_irq_enter_critical+0x38>)
    1468:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    146a:	4a07      	ldr	r2, [pc, #28]	; (1488 <cpu_irq_enter_critical+0x34>)
    146c:	6813      	ldr	r3, [r2, #0]
    146e:	3301      	adds	r3, #1
    1470:	6013      	str	r3, [r2, #0]
}
    1472:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1474:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1476:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    147a:	2200      	movs	r2, #0
    147c:	4b04      	ldr	r3, [pc, #16]	; (1490 <cpu_irq_enter_critical+0x3c>)
    147e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1480:	3201      	adds	r2, #1
    1482:	4b02      	ldr	r3, [pc, #8]	; (148c <cpu_irq_enter_critical+0x38>)
    1484:	701a      	strb	r2, [r3, #0]
    1486:	e7f0      	b.n	146a <cpu_irq_enter_critical+0x16>
    1488:	20000048 	.word	0x20000048
    148c:	2000004c 	.word	0x2000004c
    1490:	2000000c 	.word	0x2000000c

00001494 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1494:	4b08      	ldr	r3, [pc, #32]	; (14b8 <cpu_irq_leave_critical+0x24>)
    1496:	681a      	ldr	r2, [r3, #0]
    1498:	3a01      	subs	r2, #1
    149a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    149c:	681b      	ldr	r3, [r3, #0]
    149e:	2b00      	cmp	r3, #0
    14a0:	d109      	bne.n	14b6 <cpu_irq_leave_critical+0x22>
    14a2:	4b06      	ldr	r3, [pc, #24]	; (14bc <cpu_irq_leave_critical+0x28>)
    14a4:	781b      	ldrb	r3, [r3, #0]
    14a6:	2b00      	cmp	r3, #0
    14a8:	d005      	beq.n	14b6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    14aa:	2201      	movs	r2, #1
    14ac:	4b04      	ldr	r3, [pc, #16]	; (14c0 <cpu_irq_leave_critical+0x2c>)
    14ae:	701a      	strb	r2, [r3, #0]
    14b0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    14b4:	b662      	cpsie	i
	}
}
    14b6:	4770      	bx	lr
    14b8:	20000048 	.word	0x20000048
    14bc:	2000004c 	.word	0x2000004c
    14c0:	2000000c 	.word	0x2000000c

000014c4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    14c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    14c6:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    14c8:	ac01      	add	r4, sp, #4
    14ca:	2501      	movs	r5, #1
    14cc:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    14ce:	2700      	movs	r7, #0
    14d0:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    14d2:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    14d4:	0021      	movs	r1, r4
    14d6:	203e      	movs	r0, #62	; 0x3e
    14d8:	4e06      	ldr	r6, [pc, #24]	; (14f4 <system_board_init+0x30>)
    14da:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    14dc:	2280      	movs	r2, #128	; 0x80
    14de:	05d2      	lsls	r2, r2, #23
    14e0:	4b05      	ldr	r3, [pc, #20]	; (14f8 <system_board_init+0x34>)
    14e2:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    14e4:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    14e6:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    14e8:	0021      	movs	r1, r4
    14ea:	200f      	movs	r0, #15
    14ec:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    14ee:	b003      	add	sp, #12
    14f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14f2:	46c0      	nop			; (mov r8, r8)
    14f4:	000014fd 	.word	0x000014fd
    14f8:	41004480 	.word	0x41004480

000014fc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    14fc:	b500      	push	{lr}
    14fe:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1500:	ab01      	add	r3, sp, #4
    1502:	2280      	movs	r2, #128	; 0x80
    1504:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1506:	780a      	ldrb	r2, [r1, #0]
    1508:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    150a:	784a      	ldrb	r2, [r1, #1]
    150c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    150e:	788a      	ldrb	r2, [r1, #2]
    1510:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1512:	0019      	movs	r1, r3
    1514:	4b01      	ldr	r3, [pc, #4]	; (151c <port_pin_set_config+0x20>)
    1516:	4798      	blx	r3
}
    1518:	b003      	add	sp, #12
    151a:	bd00      	pop	{pc}
    151c:	00001c85 	.word	0x00001c85

00001520 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1520:	b510      	push	{r4, lr}
	switch (clock_source) {
    1522:	2808      	cmp	r0, #8
    1524:	d803      	bhi.n	152e <system_clock_source_get_hz+0xe>
    1526:	0080      	lsls	r0, r0, #2
    1528:	4b1c      	ldr	r3, [pc, #112]	; (159c <system_clock_source_get_hz+0x7c>)
    152a:	581b      	ldr	r3, [r3, r0]
    152c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    152e:	2000      	movs	r0, #0
    1530:	e032      	b.n	1598 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    1532:	4b1b      	ldr	r3, [pc, #108]	; (15a0 <system_clock_source_get_hz+0x80>)
    1534:	6918      	ldr	r0, [r3, #16]
    1536:	e02f      	b.n	1598 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1538:	4b1a      	ldr	r3, [pc, #104]	; (15a4 <system_clock_source_get_hz+0x84>)
    153a:	6a1b      	ldr	r3, [r3, #32]
    153c:	059b      	lsls	r3, r3, #22
    153e:	0f9b      	lsrs	r3, r3, #30
    1540:	4819      	ldr	r0, [pc, #100]	; (15a8 <system_clock_source_get_hz+0x88>)
    1542:	40d8      	lsrs	r0, r3
    1544:	e028      	b.n	1598 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    1546:	4b16      	ldr	r3, [pc, #88]	; (15a0 <system_clock_source_get_hz+0x80>)
    1548:	6958      	ldr	r0, [r3, #20]
    154a:	e025      	b.n	1598 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    154c:	4b14      	ldr	r3, [pc, #80]	; (15a0 <system_clock_source_get_hz+0x80>)
    154e:	681b      	ldr	r3, [r3, #0]
			return 0;
    1550:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1552:	079b      	lsls	r3, r3, #30
    1554:	d520      	bpl.n	1598 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1556:	4913      	ldr	r1, [pc, #76]	; (15a4 <system_clock_source_get_hz+0x84>)
    1558:	2210      	movs	r2, #16
    155a:	68cb      	ldr	r3, [r1, #12]
    155c:	421a      	tst	r2, r3
    155e:	d0fc      	beq.n	155a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    1560:	4b0f      	ldr	r3, [pc, #60]	; (15a0 <system_clock_source_get_hz+0x80>)
    1562:	681a      	ldr	r2, [r3, #0]
    1564:	2324      	movs	r3, #36	; 0x24
    1566:	4013      	ands	r3, r2
    1568:	2b04      	cmp	r3, #4
    156a:	d001      	beq.n	1570 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    156c:	480f      	ldr	r0, [pc, #60]	; (15ac <system_clock_source_get_hz+0x8c>)
    156e:	e013      	b.n	1598 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1570:	2000      	movs	r0, #0
    1572:	4b0f      	ldr	r3, [pc, #60]	; (15b0 <system_clock_source_get_hz+0x90>)
    1574:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1576:	4b0a      	ldr	r3, [pc, #40]	; (15a0 <system_clock_source_get_hz+0x80>)
    1578:	689b      	ldr	r3, [r3, #8]
    157a:	041b      	lsls	r3, r3, #16
    157c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    157e:	4358      	muls	r0, r3
    1580:	e00a      	b.n	1598 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1582:	2350      	movs	r3, #80	; 0x50
    1584:	4a07      	ldr	r2, [pc, #28]	; (15a4 <system_clock_source_get_hz+0x84>)
    1586:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1588:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    158a:	075b      	lsls	r3, r3, #29
    158c:	d504      	bpl.n	1598 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    158e:	4b04      	ldr	r3, [pc, #16]	; (15a0 <system_clock_source_get_hz+0x80>)
    1590:	68d8      	ldr	r0, [r3, #12]
    1592:	e001      	b.n	1598 <system_clock_source_get_hz+0x78>
		return 32768UL;
    1594:	2080      	movs	r0, #128	; 0x80
    1596:	0200      	lsls	r0, r0, #8
	}
}
    1598:	bd10      	pop	{r4, pc}
    159a:	46c0      	nop			; (mov r8, r8)
    159c:	000023f4 	.word	0x000023f4
    15a0:	20000050 	.word	0x20000050
    15a4:	40000800 	.word	0x40000800
    15a8:	007a1200 	.word	0x007a1200
    15ac:	02dc6c00 	.word	0x02dc6c00
    15b0:	00001ba9 	.word	0x00001ba9

000015b4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    15b4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    15b6:	490c      	ldr	r1, [pc, #48]	; (15e8 <system_clock_source_osc8m_set_config+0x34>)
    15b8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    15ba:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    15bc:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    15be:	7840      	ldrb	r0, [r0, #1]
    15c0:	2201      	movs	r2, #1
    15c2:	4010      	ands	r0, r2
    15c4:	0180      	lsls	r0, r0, #6
    15c6:	2640      	movs	r6, #64	; 0x40
    15c8:	43b3      	bics	r3, r6
    15ca:	4303      	orrs	r3, r0
    15cc:	402a      	ands	r2, r5
    15ce:	01d2      	lsls	r2, r2, #7
    15d0:	2080      	movs	r0, #128	; 0x80
    15d2:	4383      	bics	r3, r0
    15d4:	4313      	orrs	r3, r2
    15d6:	2203      	movs	r2, #3
    15d8:	4022      	ands	r2, r4
    15da:	0212      	lsls	r2, r2, #8
    15dc:	4803      	ldr	r0, [pc, #12]	; (15ec <system_clock_source_osc8m_set_config+0x38>)
    15de:	4003      	ands	r3, r0
    15e0:	4313      	orrs	r3, r2
    15e2:	620b      	str	r3, [r1, #32]
}
    15e4:	bd70      	pop	{r4, r5, r6, pc}
    15e6:	46c0      	nop			; (mov r8, r8)
    15e8:	40000800 	.word	0x40000800
    15ec:	fffffcff 	.word	0xfffffcff

000015f0 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    15f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    15f2:	46de      	mov	lr, fp
    15f4:	4657      	mov	r7, sl
    15f6:	464e      	mov	r6, r9
    15f8:	4645      	mov	r5, r8
    15fa:	b5e0      	push	{r5, r6, r7, lr}
    15fc:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    15fe:	4b26      	ldr	r3, [pc, #152]	; (1698 <system_clock_source_xosc32k_set_config+0xa8>)
    1600:	469b      	mov	fp, r3
    1602:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    1604:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1606:	7800      	ldrb	r0, [r0, #0]
    1608:	4242      	negs	r2, r0
    160a:	4142      	adcs	r2, r0
    160c:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    160e:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    1610:	78ca      	ldrb	r2, [r1, #3]
    1612:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    1614:	790a      	ldrb	r2, [r1, #4]
    1616:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1618:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    161a:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    161c:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    161e:	688a      	ldr	r2, [r1, #8]
    1620:	491e      	ldr	r1, [pc, #120]	; (169c <system_clock_source_xosc32k_set_config+0xac>)
    1622:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    1624:	2101      	movs	r1, #1
    1626:	464a      	mov	r2, r9
    1628:	0092      	lsls	r2, r2, #2
    162a:	4691      	mov	r9, r2
    162c:	2204      	movs	r2, #4
    162e:	4393      	bics	r3, r2
    1630:	464a      	mov	r2, r9
    1632:	4313      	orrs	r3, r2
    1634:	4642      	mov	r2, r8
    1636:	400a      	ands	r2, r1
    1638:	00d2      	lsls	r2, r2, #3
    163a:	4690      	mov	r8, r2
    163c:	2208      	movs	r2, #8
    163e:	4393      	bics	r3, r2
    1640:	4642      	mov	r2, r8
    1642:	4313      	orrs	r3, r2
    1644:	4662      	mov	r2, ip
    1646:	400a      	ands	r2, r1
    1648:	0112      	lsls	r2, r2, #4
    164a:	4694      	mov	ip, r2
    164c:	2210      	movs	r2, #16
    164e:	4393      	bics	r3, r2
    1650:	4662      	mov	r2, ip
    1652:	4313      	orrs	r3, r2
    1654:	4008      	ands	r0, r1
    1656:	0140      	lsls	r0, r0, #5
    1658:	2220      	movs	r2, #32
    165a:	4393      	bics	r3, r2
    165c:	4303      	orrs	r3, r0
    165e:	400f      	ands	r7, r1
    1660:	01bf      	lsls	r7, r7, #6
    1662:	2040      	movs	r0, #64	; 0x40
    1664:	4383      	bics	r3, r0
    1666:	433b      	orrs	r3, r7
    1668:	400e      	ands	r6, r1
    166a:	01f6      	lsls	r6, r6, #7
    166c:	3040      	adds	r0, #64	; 0x40
    166e:	4383      	bics	r3, r0
    1670:	4333      	orrs	r3, r6
    1672:	3879      	subs	r0, #121	; 0x79
    1674:	4005      	ands	r5, r0
    1676:	022d      	lsls	r5, r5, #8
    1678:	4809      	ldr	r0, [pc, #36]	; (16a0 <system_clock_source_xosc32k_set_config+0xb0>)
    167a:	4003      	ands	r3, r0
    167c:	432b      	orrs	r3, r5
    167e:	4021      	ands	r1, r4
    1680:	0309      	lsls	r1, r1, #12
    1682:	4808      	ldr	r0, [pc, #32]	; (16a4 <system_clock_source_xosc32k_set_config+0xb4>)
    1684:	4003      	ands	r3, r0
    1686:	430b      	orrs	r3, r1
    1688:	465a      	mov	r2, fp
    168a:	8293      	strh	r3, [r2, #20]
}
    168c:	bc3c      	pop	{r2, r3, r4, r5}
    168e:	4690      	mov	r8, r2
    1690:	4699      	mov	r9, r3
    1692:	46a2      	mov	sl, r4
    1694:	46ab      	mov	fp, r5
    1696:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1698:	40000800 	.word	0x40000800
    169c:	20000050 	.word	0x20000050
    16a0:	fffff8ff 	.word	0xfffff8ff
    16a4:	ffffefff 	.word	0xffffefff

000016a8 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    16a8:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    16aa:	7a03      	ldrb	r3, [r0, #8]
    16ac:	069b      	lsls	r3, r3, #26
    16ae:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    16b0:	8942      	ldrh	r2, [r0, #10]
    16b2:	0592      	lsls	r2, r2, #22
    16b4:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    16b6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    16b8:	4918      	ldr	r1, [pc, #96]	; (171c <system_clock_source_dfll_set_config+0x74>)
    16ba:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    16bc:	7983      	ldrb	r3, [r0, #6]
    16be:	79c2      	ldrb	r2, [r0, #7]
    16c0:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    16c2:	8842      	ldrh	r2, [r0, #2]
    16c4:	8884      	ldrh	r4, [r0, #4]
    16c6:	4322      	orrs	r2, r4
    16c8:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    16ca:	7842      	ldrb	r2, [r0, #1]
    16cc:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    16ce:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    16d0:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    16d2:	7803      	ldrb	r3, [r0, #0]
    16d4:	2b04      	cmp	r3, #4
    16d6:	d011      	beq.n	16fc <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    16d8:	2b20      	cmp	r3, #32
    16da:	d10e      	bne.n	16fa <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    16dc:	7b03      	ldrb	r3, [r0, #12]
    16de:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    16e0:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    16e2:	4313      	orrs	r3, r2
    16e4:	89c2      	ldrh	r2, [r0, #14]
    16e6:	0412      	lsls	r2, r2, #16
    16e8:	490d      	ldr	r1, [pc, #52]	; (1720 <system_clock_source_dfll_set_config+0x78>)
    16ea:	400a      	ands	r2, r1
    16ec:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    16ee:	4a0b      	ldr	r2, [pc, #44]	; (171c <system_clock_source_dfll_set_config+0x74>)
    16f0:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    16f2:	6811      	ldr	r1, [r2, #0]
    16f4:	4b0b      	ldr	r3, [pc, #44]	; (1724 <system_clock_source_dfll_set_config+0x7c>)
    16f6:	430b      	orrs	r3, r1
    16f8:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    16fa:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    16fc:	7b03      	ldrb	r3, [r0, #12]
    16fe:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1700:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1702:	4313      	orrs	r3, r2
    1704:	89c2      	ldrh	r2, [r0, #14]
    1706:	0412      	lsls	r2, r2, #16
    1708:	4905      	ldr	r1, [pc, #20]	; (1720 <system_clock_source_dfll_set_config+0x78>)
    170a:	400a      	ands	r2, r1
    170c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    170e:	4a03      	ldr	r2, [pc, #12]	; (171c <system_clock_source_dfll_set_config+0x74>)
    1710:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1712:	6813      	ldr	r3, [r2, #0]
    1714:	2104      	movs	r1, #4
    1716:	430b      	orrs	r3, r1
    1718:	6013      	str	r3, [r2, #0]
    171a:	e7ee      	b.n	16fa <system_clock_source_dfll_set_config+0x52>
    171c:	20000050 	.word	0x20000050
    1720:	03ff0000 	.word	0x03ff0000
    1724:	00000424 	.word	0x00000424

00001728 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1728:	2808      	cmp	r0, #8
    172a:	d803      	bhi.n	1734 <system_clock_source_enable+0xc>
    172c:	0080      	lsls	r0, r0, #2
    172e:	4b25      	ldr	r3, [pc, #148]	; (17c4 <system_clock_source_enable+0x9c>)
    1730:	581b      	ldr	r3, [r3, r0]
    1732:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1734:	2017      	movs	r0, #23
    1736:	e044      	b.n	17c2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1738:	4a23      	ldr	r2, [pc, #140]	; (17c8 <system_clock_source_enable+0xa0>)
    173a:	6a13      	ldr	r3, [r2, #32]
    173c:	2102      	movs	r1, #2
    173e:	430b      	orrs	r3, r1
    1740:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1742:	2000      	movs	r0, #0
    1744:	e03d      	b.n	17c2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1746:	4a20      	ldr	r2, [pc, #128]	; (17c8 <system_clock_source_enable+0xa0>)
    1748:	6993      	ldr	r3, [r2, #24]
    174a:	2102      	movs	r1, #2
    174c:	430b      	orrs	r3, r1
    174e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1750:	2000      	movs	r0, #0
		break;
    1752:	e036      	b.n	17c2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1754:	4a1c      	ldr	r2, [pc, #112]	; (17c8 <system_clock_source_enable+0xa0>)
    1756:	8a13      	ldrh	r3, [r2, #16]
    1758:	2102      	movs	r1, #2
    175a:	430b      	orrs	r3, r1
    175c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    175e:	2000      	movs	r0, #0
		break;
    1760:	e02f      	b.n	17c2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1762:	4a19      	ldr	r2, [pc, #100]	; (17c8 <system_clock_source_enable+0xa0>)
    1764:	8a93      	ldrh	r3, [r2, #20]
    1766:	2102      	movs	r1, #2
    1768:	430b      	orrs	r3, r1
    176a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    176c:	2000      	movs	r0, #0
		break;
    176e:	e028      	b.n	17c2 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1770:	4916      	ldr	r1, [pc, #88]	; (17cc <system_clock_source_enable+0xa4>)
    1772:	680b      	ldr	r3, [r1, #0]
    1774:	2202      	movs	r2, #2
    1776:	4313      	orrs	r3, r2
    1778:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    177a:	4b13      	ldr	r3, [pc, #76]	; (17c8 <system_clock_source_enable+0xa0>)
    177c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    177e:	0019      	movs	r1, r3
    1780:	320e      	adds	r2, #14
    1782:	68cb      	ldr	r3, [r1, #12]
    1784:	421a      	tst	r2, r3
    1786:	d0fc      	beq.n	1782 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1788:	4a10      	ldr	r2, [pc, #64]	; (17cc <system_clock_source_enable+0xa4>)
    178a:	6891      	ldr	r1, [r2, #8]
    178c:	4b0e      	ldr	r3, [pc, #56]	; (17c8 <system_clock_source_enable+0xa0>)
    178e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1790:	6852      	ldr	r2, [r2, #4]
    1792:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1794:	2200      	movs	r2, #0
    1796:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1798:	0019      	movs	r1, r3
    179a:	3210      	adds	r2, #16
    179c:	68cb      	ldr	r3, [r1, #12]
    179e:	421a      	tst	r2, r3
    17a0:	d0fc      	beq.n	179c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    17a2:	4b0a      	ldr	r3, [pc, #40]	; (17cc <system_clock_source_enable+0xa4>)
    17a4:	681b      	ldr	r3, [r3, #0]
    17a6:	b29b      	uxth	r3, r3
    17a8:	4a07      	ldr	r2, [pc, #28]	; (17c8 <system_clock_source_enable+0xa0>)
    17aa:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    17ac:	2000      	movs	r0, #0
    17ae:	e008      	b.n	17c2 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    17b0:	4905      	ldr	r1, [pc, #20]	; (17c8 <system_clock_source_enable+0xa0>)
    17b2:	2244      	movs	r2, #68	; 0x44
    17b4:	5c8b      	ldrb	r3, [r1, r2]
    17b6:	2002      	movs	r0, #2
    17b8:	4303      	orrs	r3, r0
    17ba:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    17bc:	2000      	movs	r0, #0
		break;
    17be:	e000      	b.n	17c2 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    17c0:	2000      	movs	r0, #0
}
    17c2:	4770      	bx	lr
    17c4:	00002418 	.word	0x00002418
    17c8:	40000800 	.word	0x40000800
    17cc:	20000050 	.word	0x20000050

000017d0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    17d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    17d2:	46ce      	mov	lr, r9
    17d4:	4647      	mov	r7, r8
    17d6:	b580      	push	{r7, lr}
    17d8:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    17da:	22c2      	movs	r2, #194	; 0xc2
    17dc:	00d2      	lsls	r2, r2, #3
    17de:	4b50      	ldr	r3, [pc, #320]	; (1920 <system_clock_init+0x150>)
    17e0:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    17e2:	4a50      	ldr	r2, [pc, #320]	; (1924 <system_clock_init+0x154>)
    17e4:	6853      	ldr	r3, [r2, #4]
    17e6:	211e      	movs	r1, #30
    17e8:	438b      	bics	r3, r1
    17ea:	391c      	subs	r1, #28
    17ec:	430b      	orrs	r3, r1
    17ee:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    17f0:	2203      	movs	r2, #3
    17f2:	ab01      	add	r3, sp, #4
    17f4:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    17f6:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    17f8:	4d4b      	ldr	r5, [pc, #300]	; (1928 <system_clock_init+0x158>)
    17fa:	b2e0      	uxtb	r0, r4
    17fc:	a901      	add	r1, sp, #4
    17fe:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1800:	3401      	adds	r4, #1
    1802:	2c25      	cmp	r4, #37	; 0x25
    1804:	d1f9      	bne.n	17fa <system_clock_init+0x2a>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1806:	a80a      	add	r0, sp, #40	; 0x28
    1808:	2300      	movs	r3, #0
    180a:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    180c:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    180e:	2280      	movs	r2, #128	; 0x80
    1810:	0212      	lsls	r2, r2, #8
    1812:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1814:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1816:	2201      	movs	r2, #1
    1818:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    181a:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    181c:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    181e:	3205      	adds	r2, #5
    1820:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1822:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1824:	4b41      	ldr	r3, [pc, #260]	; (192c <system_clock_init+0x15c>)
    1826:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1828:	2005      	movs	r0, #5
    182a:	4b41      	ldr	r3, [pc, #260]	; (1930 <system_clock_init+0x160>)
    182c:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    182e:	493c      	ldr	r1, [pc, #240]	; (1920 <system_clock_init+0x150>)
    1830:	2202      	movs	r2, #2
    1832:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1834:	421a      	tst	r2, r3
    1836:	d0fc      	beq.n	1832 <system_clock_init+0x62>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1838:	4a39      	ldr	r2, [pc, #228]	; (1920 <system_clock_init+0x150>)
    183a:	8a93      	ldrh	r3, [r2, #20]
    183c:	2180      	movs	r1, #128	; 0x80
    183e:	430b      	orrs	r3, r1
    1840:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1842:	ab05      	add	r3, sp, #20
    1844:	2100      	movs	r1, #0
    1846:	2200      	movs	r2, #0
    1848:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    184a:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    184c:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    184e:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1850:	313f      	adds	r1, #63	; 0x3f
    1852:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1854:	393b      	subs	r1, #59	; 0x3b
    1856:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1858:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    185a:	4b36      	ldr	r3, [pc, #216]	; (1934 <system_clock_init+0x164>)
    185c:	681b      	ldr	r3, [r3, #0]
    185e:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1860:	2b3f      	cmp	r3, #63	; 0x3f
    1862:	d05b      	beq.n	191c <system_clock_init+0x14c>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    1864:	a805      	add	r0, sp, #20
    1866:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1868:	23b7      	movs	r3, #183	; 0xb7
    186a:	00db      	lsls	r3, r3, #3
    186c:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    186e:	2307      	movs	r3, #7
    1870:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1872:	3338      	adds	r3, #56	; 0x38
    1874:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1876:	4b30      	ldr	r3, [pc, #192]	; (1938 <system_clock_init+0x168>)
    1878:	4798      	blx	r3
	config->run_in_standby  = false;
    187a:	a804      	add	r0, sp, #16
    187c:	2500      	movs	r5, #0
    187e:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    1880:	2601      	movs	r6, #1
    1882:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1884:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1886:	4b2d      	ldr	r3, [pc, #180]	; (193c <system_clock_init+0x16c>)
    1888:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    188a:	2006      	movs	r0, #6
    188c:	4f28      	ldr	r7, [pc, #160]	; (1930 <system_clock_init+0x160>)
    188e:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1890:	4b2b      	ldr	r3, [pc, #172]	; (1940 <system_clock_init+0x170>)
    1892:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1894:	ac01      	add	r4, sp, #4
    1896:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    1898:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    189a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    189c:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    189e:	2305      	movs	r3, #5
    18a0:	7023      	strb	r3, [r4, #0]
    18a2:	0021      	movs	r1, r4
    18a4:	2001      	movs	r0, #1
    18a6:	4b27      	ldr	r3, [pc, #156]	; (1944 <system_clock_init+0x174>)
    18a8:	4699      	mov	r9, r3
    18aa:	4798      	blx	r3
    18ac:	2001      	movs	r0, #1
    18ae:	4b26      	ldr	r3, [pc, #152]	; (1948 <system_clock_init+0x178>)
    18b0:	4698      	mov	r8, r3
    18b2:	4798      	blx	r3
	config->division_factor    = 1;
    18b4:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    18b6:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    18b8:	2306      	movs	r3, #6
    18ba:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    18bc:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    18be:	7265      	strb	r5, [r4, #9]
    18c0:	0021      	movs	r1, r4
    18c2:	2002      	movs	r0, #2
    18c4:	47c8      	blx	r9
    18c6:	2002      	movs	r0, #2
    18c8:	47c0      	blx	r8
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    18ca:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    18cc:	0021      	movs	r1, r4
    18ce:	2000      	movs	r0, #0
    18d0:	4b15      	ldr	r3, [pc, #84]	; (1928 <system_clock_init+0x158>)
    18d2:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    18d4:	2000      	movs	r0, #0
    18d6:	4b1d      	ldr	r3, [pc, #116]	; (194c <system_clock_init+0x17c>)
    18d8:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    18da:	2007      	movs	r0, #7
    18dc:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    18de:	4910      	ldr	r1, [pc, #64]	; (1920 <system_clock_init+0x150>)
    18e0:	22d0      	movs	r2, #208	; 0xd0
    18e2:	68cb      	ldr	r3, [r1, #12]
    18e4:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    18e6:	2bd0      	cmp	r3, #208	; 0xd0
    18e8:	d1fb      	bne.n	18e2 <system_clock_init+0x112>
	PM->CPUSEL.reg = (uint32_t)divider;
    18ea:	4a19      	ldr	r2, [pc, #100]	; (1950 <system_clock_init+0x180>)
    18ec:	2300      	movs	r3, #0
    18ee:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    18f0:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    18f2:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    18f4:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    18f6:	a901      	add	r1, sp, #4
    18f8:	2201      	movs	r2, #1
    18fa:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    18fc:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    18fe:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1900:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1902:	3307      	adds	r3, #7
    1904:	700b      	strb	r3, [r1, #0]
    1906:	2000      	movs	r0, #0
    1908:	4b0e      	ldr	r3, [pc, #56]	; (1944 <system_clock_init+0x174>)
    190a:	4798      	blx	r3
    190c:	2000      	movs	r0, #0
    190e:	4b0e      	ldr	r3, [pc, #56]	; (1948 <system_clock_init+0x178>)
    1910:	4798      	blx	r3
#endif
}
    1912:	b00f      	add	sp, #60	; 0x3c
    1914:	bc0c      	pop	{r2, r3}
    1916:	4690      	mov	r8, r2
    1918:	4699      	mov	r9, r3
    191a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    191c:	3b20      	subs	r3, #32
    191e:	e7a1      	b.n	1864 <system_clock_init+0x94>
    1920:	40000800 	.word	0x40000800
    1924:	41004000 	.word	0x41004000
    1928:	00001b8d 	.word	0x00001b8d
    192c:	000015f1 	.word	0x000015f1
    1930:	00001729 	.word	0x00001729
    1934:	00806024 	.word	0x00806024
    1938:	000016a9 	.word	0x000016a9
    193c:	000015b5 	.word	0x000015b5
    1940:	00001955 	.word	0x00001955
    1944:	00001979 	.word	0x00001979
    1948:	00001a31 	.word	0x00001a31
    194c:	00001b01 	.word	0x00001b01
    1950:	40000400 	.word	0x40000400

00001954 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1954:	4a06      	ldr	r2, [pc, #24]	; (1970 <system_gclk_init+0x1c>)
    1956:	6993      	ldr	r3, [r2, #24]
    1958:	2108      	movs	r1, #8
    195a:	430b      	orrs	r3, r1
    195c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    195e:	2201      	movs	r2, #1
    1960:	4b04      	ldr	r3, [pc, #16]	; (1974 <system_gclk_init+0x20>)
    1962:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1964:	0019      	movs	r1, r3
    1966:	780b      	ldrb	r3, [r1, #0]
    1968:	4213      	tst	r3, r2
    196a:	d1fc      	bne.n	1966 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    196c:	4770      	bx	lr
    196e:	46c0      	nop			; (mov r8, r8)
    1970:	40000400 	.word	0x40000400
    1974:	40000c00 	.word	0x40000c00

00001978 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1978:	b570      	push	{r4, r5, r6, lr}
    197a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    197c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    197e:	780d      	ldrb	r5, [r1, #0]
    1980:	022d      	lsls	r5, r5, #8
    1982:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1984:	784b      	ldrb	r3, [r1, #1]
    1986:	2b00      	cmp	r3, #0
    1988:	d002      	beq.n	1990 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    198a:	2380      	movs	r3, #128	; 0x80
    198c:	02db      	lsls	r3, r3, #11
    198e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1990:	7a4b      	ldrb	r3, [r1, #9]
    1992:	2b00      	cmp	r3, #0
    1994:	d002      	beq.n	199c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1996:	2380      	movs	r3, #128	; 0x80
    1998:	031b      	lsls	r3, r3, #12
    199a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    199c:	6848      	ldr	r0, [r1, #4]
    199e:	2801      	cmp	r0, #1
    19a0:	d910      	bls.n	19c4 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    19a2:	1e43      	subs	r3, r0, #1
    19a4:	4218      	tst	r0, r3
    19a6:	d134      	bne.n	1a12 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    19a8:	2802      	cmp	r0, #2
    19aa:	d930      	bls.n	1a0e <system_gclk_gen_set_config+0x96>
    19ac:	2302      	movs	r3, #2
    19ae:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    19b0:	3201      	adds	r2, #1
						mask <<= 1) {
    19b2:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    19b4:	4298      	cmp	r0, r3
    19b6:	d8fb      	bhi.n	19b0 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    19b8:	0212      	lsls	r2, r2, #8
    19ba:	4332      	orrs	r2, r6
    19bc:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    19be:	2380      	movs	r3, #128	; 0x80
    19c0:	035b      	lsls	r3, r3, #13
    19c2:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    19c4:	7a0b      	ldrb	r3, [r1, #8]
    19c6:	2b00      	cmp	r3, #0
    19c8:	d002      	beq.n	19d0 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    19ca:	2380      	movs	r3, #128	; 0x80
    19cc:	039b      	lsls	r3, r3, #14
    19ce:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19d0:	4a13      	ldr	r2, [pc, #76]	; (1a20 <system_gclk_gen_set_config+0xa8>)
    19d2:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    19d4:	b25b      	sxtb	r3, r3
    19d6:	2b00      	cmp	r3, #0
    19d8:	dbfb      	blt.n	19d2 <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    19da:	4b12      	ldr	r3, [pc, #72]	; (1a24 <system_gclk_gen_set_config+0xac>)
    19dc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    19de:	4b12      	ldr	r3, [pc, #72]	; (1a28 <system_gclk_gen_set_config+0xb0>)
    19e0:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19e2:	4a0f      	ldr	r2, [pc, #60]	; (1a20 <system_gclk_gen_set_config+0xa8>)
    19e4:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    19e6:	b25b      	sxtb	r3, r3
    19e8:	2b00      	cmp	r3, #0
    19ea:	dbfb      	blt.n	19e4 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    19ec:	4b0c      	ldr	r3, [pc, #48]	; (1a20 <system_gclk_gen_set_config+0xa8>)
    19ee:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19f0:	001a      	movs	r2, r3
    19f2:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    19f4:	b25b      	sxtb	r3, r3
    19f6:	2b00      	cmp	r3, #0
    19f8:	dbfb      	blt.n	19f2 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    19fa:	4a09      	ldr	r2, [pc, #36]	; (1a20 <system_gclk_gen_set_config+0xa8>)
    19fc:	6853      	ldr	r3, [r2, #4]
    19fe:	2180      	movs	r1, #128	; 0x80
    1a00:	0249      	lsls	r1, r1, #9
    1a02:	400b      	ands	r3, r1
    1a04:	431d      	orrs	r5, r3
    1a06:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1a08:	4b08      	ldr	r3, [pc, #32]	; (1a2c <system_gclk_gen_set_config+0xb4>)
    1a0a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1a0c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1a0e:	2200      	movs	r2, #0
    1a10:	e7d2      	b.n	19b8 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1a12:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1a14:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1a16:	2380      	movs	r3, #128	; 0x80
    1a18:	029b      	lsls	r3, r3, #10
    1a1a:	431d      	orrs	r5, r3
    1a1c:	e7d2      	b.n	19c4 <system_gclk_gen_set_config+0x4c>
    1a1e:	46c0      	nop			; (mov r8, r8)
    1a20:	40000c00 	.word	0x40000c00
    1a24:	00001455 	.word	0x00001455
    1a28:	40000c08 	.word	0x40000c08
    1a2c:	00001495 	.word	0x00001495

00001a30 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1a30:	b510      	push	{r4, lr}
    1a32:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a34:	4a0b      	ldr	r2, [pc, #44]	; (1a64 <system_gclk_gen_enable+0x34>)
    1a36:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1a38:	b25b      	sxtb	r3, r3
    1a3a:	2b00      	cmp	r3, #0
    1a3c:	dbfb      	blt.n	1a36 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1a3e:	4b0a      	ldr	r3, [pc, #40]	; (1a68 <system_gclk_gen_enable+0x38>)
    1a40:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1a42:	4b0a      	ldr	r3, [pc, #40]	; (1a6c <system_gclk_gen_enable+0x3c>)
    1a44:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a46:	4a07      	ldr	r2, [pc, #28]	; (1a64 <system_gclk_gen_enable+0x34>)
    1a48:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1a4a:	b25b      	sxtb	r3, r3
    1a4c:	2b00      	cmp	r3, #0
    1a4e:	dbfb      	blt.n	1a48 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1a50:	4a04      	ldr	r2, [pc, #16]	; (1a64 <system_gclk_gen_enable+0x34>)
    1a52:	6851      	ldr	r1, [r2, #4]
    1a54:	2380      	movs	r3, #128	; 0x80
    1a56:	025b      	lsls	r3, r3, #9
    1a58:	430b      	orrs	r3, r1
    1a5a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1a5c:	4b04      	ldr	r3, [pc, #16]	; (1a70 <system_gclk_gen_enable+0x40>)
    1a5e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1a60:	bd10      	pop	{r4, pc}
    1a62:	46c0      	nop			; (mov r8, r8)
    1a64:	40000c00 	.word	0x40000c00
    1a68:	00001455 	.word	0x00001455
    1a6c:	40000c04 	.word	0x40000c04
    1a70:	00001495 	.word	0x00001495

00001a74 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1a74:	b570      	push	{r4, r5, r6, lr}
    1a76:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a78:	4a1a      	ldr	r2, [pc, #104]	; (1ae4 <system_gclk_gen_get_hz+0x70>)
    1a7a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1a7c:	b25b      	sxtb	r3, r3
    1a7e:	2b00      	cmp	r3, #0
    1a80:	dbfb      	blt.n	1a7a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1a82:	4b19      	ldr	r3, [pc, #100]	; (1ae8 <system_gclk_gen_get_hz+0x74>)
    1a84:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1a86:	4b19      	ldr	r3, [pc, #100]	; (1aec <system_gclk_gen_get_hz+0x78>)
    1a88:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a8a:	4a16      	ldr	r2, [pc, #88]	; (1ae4 <system_gclk_gen_get_hz+0x70>)
    1a8c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1a8e:	b25b      	sxtb	r3, r3
    1a90:	2b00      	cmp	r3, #0
    1a92:	dbfb      	blt.n	1a8c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1a94:	4e13      	ldr	r6, [pc, #76]	; (1ae4 <system_gclk_gen_get_hz+0x70>)
    1a96:	6870      	ldr	r0, [r6, #4]
    1a98:	04c0      	lsls	r0, r0, #19
    1a9a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1a9c:	4b14      	ldr	r3, [pc, #80]	; (1af0 <system_gclk_gen_get_hz+0x7c>)
    1a9e:	4798      	blx	r3
    1aa0:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1aa2:	4b12      	ldr	r3, [pc, #72]	; (1aec <system_gclk_gen_get_hz+0x78>)
    1aa4:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1aa6:	6876      	ldr	r6, [r6, #4]
    1aa8:	02f6      	lsls	r6, r6, #11
    1aaa:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1aac:	4b11      	ldr	r3, [pc, #68]	; (1af4 <system_gclk_gen_get_hz+0x80>)
    1aae:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ab0:	4a0c      	ldr	r2, [pc, #48]	; (1ae4 <system_gclk_gen_get_hz+0x70>)
    1ab2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1ab4:	b25b      	sxtb	r3, r3
    1ab6:	2b00      	cmp	r3, #0
    1ab8:	dbfb      	blt.n	1ab2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1aba:	4b0a      	ldr	r3, [pc, #40]	; (1ae4 <system_gclk_gen_get_hz+0x70>)
    1abc:	689c      	ldr	r4, [r3, #8]
    1abe:	0224      	lsls	r4, r4, #8
    1ac0:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1ac2:	4b0d      	ldr	r3, [pc, #52]	; (1af8 <system_gclk_gen_get_hz+0x84>)
    1ac4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1ac6:	2e00      	cmp	r6, #0
    1ac8:	d107      	bne.n	1ada <system_gclk_gen_get_hz+0x66>
    1aca:	2c01      	cmp	r4, #1
    1acc:	d907      	bls.n	1ade <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1ace:	0021      	movs	r1, r4
    1ad0:	0028      	movs	r0, r5
    1ad2:	4b0a      	ldr	r3, [pc, #40]	; (1afc <system_gclk_gen_get_hz+0x88>)
    1ad4:	4798      	blx	r3
    1ad6:	0005      	movs	r5, r0
    1ad8:	e001      	b.n	1ade <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1ada:	3401      	adds	r4, #1
    1adc:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1ade:	0028      	movs	r0, r5
    1ae0:	bd70      	pop	{r4, r5, r6, pc}
    1ae2:	46c0      	nop			; (mov r8, r8)
    1ae4:	40000c00 	.word	0x40000c00
    1ae8:	00001455 	.word	0x00001455
    1aec:	40000c04 	.word	0x40000c04
    1af0:	00001521 	.word	0x00001521
    1af4:	40000c08 	.word	0x40000c08
    1af8:	00001495 	.word	0x00001495
    1afc:	00002051 	.word	0x00002051

00001b00 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1b00:	b510      	push	{r4, lr}
    1b02:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1b04:	4b06      	ldr	r3, [pc, #24]	; (1b20 <system_gclk_chan_enable+0x20>)
    1b06:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1b08:	4b06      	ldr	r3, [pc, #24]	; (1b24 <system_gclk_chan_enable+0x24>)
    1b0a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1b0c:	4a06      	ldr	r2, [pc, #24]	; (1b28 <system_gclk_chan_enable+0x28>)
    1b0e:	8853      	ldrh	r3, [r2, #2]
    1b10:	2180      	movs	r1, #128	; 0x80
    1b12:	01c9      	lsls	r1, r1, #7
    1b14:	430b      	orrs	r3, r1
    1b16:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1b18:	4b04      	ldr	r3, [pc, #16]	; (1b2c <system_gclk_chan_enable+0x2c>)
    1b1a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1b1c:	bd10      	pop	{r4, pc}
    1b1e:	46c0      	nop			; (mov r8, r8)
    1b20:	00001455 	.word	0x00001455
    1b24:	40000c02 	.word	0x40000c02
    1b28:	40000c00 	.word	0x40000c00
    1b2c:	00001495 	.word	0x00001495

00001b30 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1b30:	b510      	push	{r4, lr}
    1b32:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1b34:	4b0f      	ldr	r3, [pc, #60]	; (1b74 <system_gclk_chan_disable+0x44>)
    1b36:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1b38:	4b0f      	ldr	r3, [pc, #60]	; (1b78 <system_gclk_chan_disable+0x48>)
    1b3a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1b3c:	4a0f      	ldr	r2, [pc, #60]	; (1b7c <system_gclk_chan_disable+0x4c>)
    1b3e:	8853      	ldrh	r3, [r2, #2]
    1b40:	051b      	lsls	r3, r3, #20
    1b42:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1b44:	8853      	ldrh	r3, [r2, #2]
    1b46:	490e      	ldr	r1, [pc, #56]	; (1b80 <system_gclk_chan_disable+0x50>)
    1b48:	400b      	ands	r3, r1
    1b4a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1b4c:	8853      	ldrh	r3, [r2, #2]
    1b4e:	490d      	ldr	r1, [pc, #52]	; (1b84 <system_gclk_chan_disable+0x54>)
    1b50:	400b      	ands	r3, r1
    1b52:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1b54:	0011      	movs	r1, r2
    1b56:	2280      	movs	r2, #128	; 0x80
    1b58:	01d2      	lsls	r2, r2, #7
    1b5a:	884b      	ldrh	r3, [r1, #2]
    1b5c:	4213      	tst	r3, r2
    1b5e:	d1fc      	bne.n	1b5a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1b60:	4906      	ldr	r1, [pc, #24]	; (1b7c <system_gclk_chan_disable+0x4c>)
    1b62:	884a      	ldrh	r2, [r1, #2]
    1b64:	0203      	lsls	r3, r0, #8
    1b66:	4806      	ldr	r0, [pc, #24]	; (1b80 <system_gclk_chan_disable+0x50>)
    1b68:	4002      	ands	r2, r0
    1b6a:	4313      	orrs	r3, r2
    1b6c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1b6e:	4b06      	ldr	r3, [pc, #24]	; (1b88 <system_gclk_chan_disable+0x58>)
    1b70:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1b72:	bd10      	pop	{r4, pc}
    1b74:	00001455 	.word	0x00001455
    1b78:	40000c02 	.word	0x40000c02
    1b7c:	40000c00 	.word	0x40000c00
    1b80:	fffff0ff 	.word	0xfffff0ff
    1b84:	ffffbfff 	.word	0xffffbfff
    1b88:	00001495 	.word	0x00001495

00001b8c <system_gclk_chan_set_config>:
{
    1b8c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1b8e:	780c      	ldrb	r4, [r1, #0]
    1b90:	0224      	lsls	r4, r4, #8
    1b92:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1b94:	4b02      	ldr	r3, [pc, #8]	; (1ba0 <system_gclk_chan_set_config+0x14>)
    1b96:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1b98:	b2a4      	uxth	r4, r4
    1b9a:	4b02      	ldr	r3, [pc, #8]	; (1ba4 <system_gclk_chan_set_config+0x18>)
    1b9c:	805c      	strh	r4, [r3, #2]
}
    1b9e:	bd10      	pop	{r4, pc}
    1ba0:	00001b31 	.word	0x00001b31
    1ba4:	40000c00 	.word	0x40000c00

00001ba8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1ba8:	b510      	push	{r4, lr}
    1baa:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1bac:	4b06      	ldr	r3, [pc, #24]	; (1bc8 <system_gclk_chan_get_hz+0x20>)
    1bae:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1bb0:	4b06      	ldr	r3, [pc, #24]	; (1bcc <system_gclk_chan_get_hz+0x24>)
    1bb2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1bb4:	4b06      	ldr	r3, [pc, #24]	; (1bd0 <system_gclk_chan_get_hz+0x28>)
    1bb6:	885c      	ldrh	r4, [r3, #2]
    1bb8:	0524      	lsls	r4, r4, #20
    1bba:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1bbc:	4b05      	ldr	r3, [pc, #20]	; (1bd4 <system_gclk_chan_get_hz+0x2c>)
    1bbe:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1bc0:	0020      	movs	r0, r4
    1bc2:	4b05      	ldr	r3, [pc, #20]	; (1bd8 <system_gclk_chan_get_hz+0x30>)
    1bc4:	4798      	blx	r3
}
    1bc6:	bd10      	pop	{r4, pc}
    1bc8:	00001455 	.word	0x00001455
    1bcc:	40000c02 	.word	0x40000c02
    1bd0:	40000c00 	.word	0x40000c00
    1bd4:	00001495 	.word	0x00001495
    1bd8:	00001a75 	.word	0x00001a75

00001bdc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1bdc:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1bde:	78d3      	ldrb	r3, [r2, #3]
    1be0:	2b00      	cmp	r3, #0
    1be2:	d135      	bne.n	1c50 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1be4:	7813      	ldrb	r3, [r2, #0]
    1be6:	2b80      	cmp	r3, #128	; 0x80
    1be8:	d029      	beq.n	1c3e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1bea:	061b      	lsls	r3, r3, #24
    1bec:	2480      	movs	r4, #128	; 0x80
    1bee:	0264      	lsls	r4, r4, #9
    1bf0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1bf2:	7854      	ldrb	r4, [r2, #1]
    1bf4:	2502      	movs	r5, #2
    1bf6:	43ac      	bics	r4, r5
    1bf8:	d106      	bne.n	1c08 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1bfa:	7894      	ldrb	r4, [r2, #2]
    1bfc:	2c00      	cmp	r4, #0
    1bfe:	d120      	bne.n	1c42 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1c00:	2480      	movs	r4, #128	; 0x80
    1c02:	02a4      	lsls	r4, r4, #10
    1c04:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1c06:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1c08:	7854      	ldrb	r4, [r2, #1]
    1c0a:	3c01      	subs	r4, #1
    1c0c:	2c01      	cmp	r4, #1
    1c0e:	d91c      	bls.n	1c4a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1c10:	040d      	lsls	r5, r1, #16
    1c12:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1c14:	24a0      	movs	r4, #160	; 0xa0
    1c16:	05e4      	lsls	r4, r4, #23
    1c18:	432c      	orrs	r4, r5
    1c1a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1c1c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1c1e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1c20:	24d0      	movs	r4, #208	; 0xd0
    1c22:	0624      	lsls	r4, r4, #24
    1c24:	432c      	orrs	r4, r5
    1c26:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1c28:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1c2a:	78d4      	ldrb	r4, [r2, #3]
    1c2c:	2c00      	cmp	r4, #0
    1c2e:	d122      	bne.n	1c76 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1c30:	035b      	lsls	r3, r3, #13
    1c32:	d51c      	bpl.n	1c6e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1c34:	7893      	ldrb	r3, [r2, #2]
    1c36:	2b01      	cmp	r3, #1
    1c38:	d01e      	beq.n	1c78 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1c3a:	6141      	str	r1, [r0, #20]
    1c3c:	e017      	b.n	1c6e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1c3e:	2300      	movs	r3, #0
    1c40:	e7d7      	b.n	1bf2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1c42:	24c0      	movs	r4, #192	; 0xc0
    1c44:	02e4      	lsls	r4, r4, #11
    1c46:	4323      	orrs	r3, r4
    1c48:	e7dd      	b.n	1c06 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1c4a:	4c0d      	ldr	r4, [pc, #52]	; (1c80 <_system_pinmux_config+0xa4>)
    1c4c:	4023      	ands	r3, r4
    1c4e:	e7df      	b.n	1c10 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1c50:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1c52:	040c      	lsls	r4, r1, #16
    1c54:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1c56:	23a0      	movs	r3, #160	; 0xa0
    1c58:	05db      	lsls	r3, r3, #23
    1c5a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1c5c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1c5e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1c60:	23d0      	movs	r3, #208	; 0xd0
    1c62:	061b      	lsls	r3, r3, #24
    1c64:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1c66:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1c68:	78d3      	ldrb	r3, [r2, #3]
    1c6a:	2b00      	cmp	r3, #0
    1c6c:	d103      	bne.n	1c76 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1c6e:	7853      	ldrb	r3, [r2, #1]
    1c70:	3b01      	subs	r3, #1
    1c72:	2b01      	cmp	r3, #1
    1c74:	d902      	bls.n	1c7c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1c76:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1c78:	6181      	str	r1, [r0, #24]
    1c7a:	e7f8      	b.n	1c6e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1c7c:	6081      	str	r1, [r0, #8]
}
    1c7e:	e7fa      	b.n	1c76 <_system_pinmux_config+0x9a>
    1c80:	fffbffff 	.word	0xfffbffff

00001c84 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1c84:	b510      	push	{r4, lr}
    1c86:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    1c88:	09c1      	lsrs	r1, r0, #7
		return NULL;
    1c8a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1c8c:	2900      	cmp	r1, #0
    1c8e:	d104      	bne.n	1c9a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1c90:	0943      	lsrs	r3, r0, #5
    1c92:	01db      	lsls	r3, r3, #7
    1c94:	4905      	ldr	r1, [pc, #20]	; (1cac <system_pinmux_pin_set_config+0x28>)
    1c96:	468c      	mov	ip, r1
    1c98:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1c9a:	241f      	movs	r4, #31
    1c9c:	4020      	ands	r0, r4
    1c9e:	2101      	movs	r1, #1
    1ca0:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1ca2:	0018      	movs	r0, r3
    1ca4:	4b02      	ldr	r3, [pc, #8]	; (1cb0 <system_pinmux_pin_set_config+0x2c>)
    1ca6:	4798      	blx	r3
}
    1ca8:	bd10      	pop	{r4, pc}
    1caa:	46c0      	nop			; (mov r8, r8)
    1cac:	41004400 	.word	0x41004400
    1cb0:	00001bdd 	.word	0x00001bdd

00001cb4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1cb4:	4770      	bx	lr
	...

00001cb8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1cb8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1cba:	4b05      	ldr	r3, [pc, #20]	; (1cd0 <system_init+0x18>)
    1cbc:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1cbe:	4b05      	ldr	r3, [pc, #20]	; (1cd4 <system_init+0x1c>)
    1cc0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1cc2:	4b05      	ldr	r3, [pc, #20]	; (1cd8 <system_init+0x20>)
    1cc4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1cc6:	4b05      	ldr	r3, [pc, #20]	; (1cdc <system_init+0x24>)
    1cc8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1cca:	4b05      	ldr	r3, [pc, #20]	; (1ce0 <system_init+0x28>)
    1ccc:	4798      	blx	r3
}
    1cce:	bd10      	pop	{r4, pc}
    1cd0:	000017d1 	.word	0x000017d1
    1cd4:	000014c5 	.word	0x000014c5
    1cd8:	00001cb5 	.word	0x00001cb5
    1cdc:	00001cb5 	.word	0x00001cb5
    1ce0:	00001cb5 	.word	0x00001cb5

00001ce4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1ce4:	e7fe      	b.n	1ce4 <Dummy_Handler>
	...

00001ce8 <Reset_Handler>:
{
    1ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1cea:	4a2a      	ldr	r2, [pc, #168]	; (1d94 <Reset_Handler+0xac>)
    1cec:	4b2a      	ldr	r3, [pc, #168]	; (1d98 <Reset_Handler+0xb0>)
    1cee:	429a      	cmp	r2, r3
    1cf0:	d011      	beq.n	1d16 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1cf2:	001a      	movs	r2, r3
    1cf4:	4b29      	ldr	r3, [pc, #164]	; (1d9c <Reset_Handler+0xb4>)
    1cf6:	429a      	cmp	r2, r3
    1cf8:	d20d      	bcs.n	1d16 <Reset_Handler+0x2e>
    1cfa:	4a29      	ldr	r2, [pc, #164]	; (1da0 <Reset_Handler+0xb8>)
    1cfc:	3303      	adds	r3, #3
    1cfe:	1a9b      	subs	r3, r3, r2
    1d00:	089b      	lsrs	r3, r3, #2
    1d02:	3301      	adds	r3, #1
    1d04:	009b      	lsls	r3, r3, #2
    1d06:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1d08:	4823      	ldr	r0, [pc, #140]	; (1d98 <Reset_Handler+0xb0>)
    1d0a:	4922      	ldr	r1, [pc, #136]	; (1d94 <Reset_Handler+0xac>)
    1d0c:	588c      	ldr	r4, [r1, r2]
    1d0e:	5084      	str	r4, [r0, r2]
    1d10:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1d12:	429a      	cmp	r2, r3
    1d14:	d1fa      	bne.n	1d0c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1d16:	4a23      	ldr	r2, [pc, #140]	; (1da4 <Reset_Handler+0xbc>)
    1d18:	4b23      	ldr	r3, [pc, #140]	; (1da8 <Reset_Handler+0xc0>)
    1d1a:	429a      	cmp	r2, r3
    1d1c:	d20a      	bcs.n	1d34 <Reset_Handler+0x4c>
    1d1e:	43d3      	mvns	r3, r2
    1d20:	4921      	ldr	r1, [pc, #132]	; (1da8 <Reset_Handler+0xc0>)
    1d22:	185b      	adds	r3, r3, r1
    1d24:	2103      	movs	r1, #3
    1d26:	438b      	bics	r3, r1
    1d28:	3304      	adds	r3, #4
    1d2a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1d2c:	2100      	movs	r1, #0
    1d2e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1d30:	4293      	cmp	r3, r2
    1d32:	d1fc      	bne.n	1d2e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1d34:	4a1d      	ldr	r2, [pc, #116]	; (1dac <Reset_Handler+0xc4>)
    1d36:	21ff      	movs	r1, #255	; 0xff
    1d38:	4b1d      	ldr	r3, [pc, #116]	; (1db0 <Reset_Handler+0xc8>)
    1d3a:	438b      	bics	r3, r1
    1d3c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1d3e:	39fd      	subs	r1, #253	; 0xfd
    1d40:	2390      	movs	r3, #144	; 0x90
    1d42:	005b      	lsls	r3, r3, #1
    1d44:	4a1b      	ldr	r2, [pc, #108]	; (1db4 <Reset_Handler+0xcc>)
    1d46:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1d48:	4a1b      	ldr	r2, [pc, #108]	; (1db8 <Reset_Handler+0xd0>)
    1d4a:	78d3      	ldrb	r3, [r2, #3]
    1d4c:	2503      	movs	r5, #3
    1d4e:	43ab      	bics	r3, r5
    1d50:	2402      	movs	r4, #2
    1d52:	4323      	orrs	r3, r4
    1d54:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1d56:	78d3      	ldrb	r3, [r2, #3]
    1d58:	270c      	movs	r7, #12
    1d5a:	43bb      	bics	r3, r7
    1d5c:	2608      	movs	r6, #8
    1d5e:	4333      	orrs	r3, r6
    1d60:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1d62:	4b16      	ldr	r3, [pc, #88]	; (1dbc <Reset_Handler+0xd4>)
    1d64:	7b98      	ldrb	r0, [r3, #14]
    1d66:	2230      	movs	r2, #48	; 0x30
    1d68:	4390      	bics	r0, r2
    1d6a:	2220      	movs	r2, #32
    1d6c:	4310      	orrs	r0, r2
    1d6e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1d70:	7b99      	ldrb	r1, [r3, #14]
    1d72:	43b9      	bics	r1, r7
    1d74:	4331      	orrs	r1, r6
    1d76:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1d78:	7b9a      	ldrb	r2, [r3, #14]
    1d7a:	43aa      	bics	r2, r5
    1d7c:	4322      	orrs	r2, r4
    1d7e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1d80:	4a0f      	ldr	r2, [pc, #60]	; (1dc0 <Reset_Handler+0xd8>)
    1d82:	6853      	ldr	r3, [r2, #4]
    1d84:	2180      	movs	r1, #128	; 0x80
    1d86:	430b      	orrs	r3, r1
    1d88:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1d8a:	4b0e      	ldr	r3, [pc, #56]	; (1dc4 <Reset_Handler+0xdc>)
    1d8c:	4798      	blx	r3
        main();
    1d8e:	4b0e      	ldr	r3, [pc, #56]	; (1dc8 <Reset_Handler+0xe0>)
    1d90:	4798      	blx	r3
    1d92:	e7fe      	b.n	1d92 <Reset_Handler+0xaa>
    1d94:	00002474 	.word	0x00002474
    1d98:	20000000 	.word	0x20000000
    1d9c:	20000010 	.word	0x20000010
    1da0:	20000004 	.word	0x20000004
    1da4:	20000010 	.word	0x20000010
    1da8:	200003cc 	.word	0x200003cc
    1dac:	e000ed00 	.word	0xe000ed00
    1db0:	00000000 	.word	0x00000000
    1db4:	41007000 	.word	0x41007000
    1db8:	41005000 	.word	0x41005000
    1dbc:	41004800 	.word	0x41004800
    1dc0:	41004000 	.word	0x41004000
    1dc4:	0000237d 	.word	0x0000237d
    1dc8:	00001f6d 	.word	0x00001f6d

00001dcc <callback_spi_master>:
}

static void callback_spi_master(const struct spi_module *const module)
{
	
}
    1dcc:	4770      	bx	lr
	...

00001dd0 <USART_EYUP>:
void USART_EYUP(){
    1dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	GelenData[i] = SERCOM3->USART.DATA.bit.DATA;
    1dd2:	4b1a      	ldr	r3, [pc, #104]	; (1e3c <USART_EYUP+0x6c>)
    1dd4:	781a      	ldrb	r2, [r3, #0]
    1dd6:	4b1a      	ldr	r3, [pc, #104]	; (1e40 <USART_EYUP+0x70>)
    1dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1dda:	b2db      	uxtb	r3, r3
    1ddc:	4919      	ldr	r1, [pc, #100]	; (1e44 <USART_EYUP+0x74>)
    1dde:	548b      	strb	r3, [r1, r2]
	if (GelenData[i] == '\n'){
    1de0:	2b0a      	cmp	r3, #10
    1de2:	d003      	beq.n	1dec <USART_EYUP+0x1c>
		i += 1;
    1de4:	3201      	adds	r2, #1
    1de6:	4b15      	ldr	r3, [pc, #84]	; (1e3c <USART_EYUP+0x6c>)
    1de8:	701a      	strb	r2, [r3, #0]
}
    1dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pageProgram(0x00000000, GelenData, (i + 1)); // 0x0000fc
    1dec:	3201      	adds	r2, #1
    1dee:	b2d2      	uxtb	r2, r2
    1df0:	000d      	movs	r5, r1
    1df2:	2000      	movs	r0, #0
    1df4:	4b14      	ldr	r3, [pc, #80]	; (1e48 <USART_EYUP+0x78>)
    1df6:	4798      	blx	r3
		readArray(0x1b, 0x00000000, (i + 1), buffread);
    1df8:	4e14      	ldr	r6, [pc, #80]	; (1e4c <USART_EYUP+0x7c>)
    1dfa:	4f10      	ldr	r7, [pc, #64]	; (1e3c <USART_EYUP+0x6c>)
    1dfc:	783a      	ldrb	r2, [r7, #0]
    1dfe:	3201      	adds	r2, #1
    1e00:	b2d2      	uxtb	r2, r2
    1e02:	0033      	movs	r3, r6
    1e04:	2100      	movs	r1, #0
    1e06:	201b      	movs	r0, #27
    1e08:	4c11      	ldr	r4, [pc, #68]	; (1e50 <USART_EYUP+0x80>)
    1e0a:	47a0      	blx	r4
		memset(GelenData, 0x00, (i + 1) *sizeof(char));
    1e0c:	783c      	ldrb	r4, [r7, #0]
    1e0e:	3401      	adds	r4, #1
    1e10:	0022      	movs	r2, r4
    1e12:	2100      	movs	r1, #0
    1e14:	0028      	movs	r0, r5
    1e16:	4d0f      	ldr	r5, [pc, #60]	; (1e54 <USART_EYUP+0x84>)
    1e18:	47a8      	blx	r5
		uartWrite(buffread, i + 1);
    1e1a:	b2e1      	uxtb	r1, r4
    1e1c:	0030      	movs	r0, r6
    1e1e:	4b0e      	ldr	r3, [pc, #56]	; (1e58 <USART_EYUP+0x88>)
    1e20:	4798      	blx	r3
		memset(buffread, 0xff, (i + 1) *sizeof(char));
    1e22:	783a      	ldrb	r2, [r7, #0]
    1e24:	3201      	adds	r2, #1
    1e26:	21ff      	movs	r1, #255	; 0xff
    1e28:	0030      	movs	r0, r6
    1e2a:	47a8      	blx	r5
		i = 0;
    1e2c:	2300      	movs	r3, #0
    1e2e:	703b      	strb	r3, [r7, #0]
		blockErase(0x20, 0x00000000);
    1e30:	2100      	movs	r1, #0
    1e32:	2020      	movs	r0, #32
    1e34:	4b09      	ldr	r3, [pc, #36]	; (1e5c <USART_EYUP+0x8c>)
    1e36:	4798      	blx	r3
    1e38:	e7d7      	b.n	1dea <USART_EYUP+0x1a>
    1e3a:	46c0      	nop			; (mov r8, r8)
    1e3c:	20000068 	.word	0x20000068
    1e40:	42001400 	.word	0x42001400
    1e44:	2000028c 	.word	0x2000028c
    1e48:	000004d1 	.word	0x000004d1
    1e4c:	2000006c 	.word	0x2000006c
    1e50:	0000096d 	.word	0x0000096d
    1e54:	000023c5 	.word	0x000023c5
    1e58:	000003f5 	.word	0x000003f5
    1e5c:	00000879 	.word	0x00000879

00001e60 <configure_spi_master>:
{
    1e60:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e62:	b091      	sub	sp, #68	; 0x44
	slave->ss_pin          = config->ss_pin;
    1e64:	4c2a      	ldr	r4, [pc, #168]	; (1f10 <configure_spi_master+0xb0>)
    1e66:	230d      	movs	r3, #13
    1e68:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    1e6a:	2300      	movs	r3, #0
    1e6c:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    1e6e:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    1e70:	a901      	add	r1, sp, #4
    1e72:	2201      	movs	r2, #1
    1e74:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    1e76:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    1e78:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    1e7a:	200d      	movs	r0, #13
    1e7c:	4b25      	ldr	r3, [pc, #148]	; (1f14 <configure_spi_master+0xb4>)
    1e7e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    1e80:	7823      	ldrb	r3, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    1e82:	09d9      	lsrs	r1, r3, #7
		return NULL;
    1e84:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    1e86:	2900      	cmp	r1, #0
    1e88:	d104      	bne.n	1e94 <configure_spi_master+0x34>
		return &(ports[port_index]->Group[group_index]);
    1e8a:	095a      	lsrs	r2, r3, #5
    1e8c:	01d2      	lsls	r2, r2, #7
    1e8e:	4922      	ldr	r1, [pc, #136]	; (1f18 <configure_spi_master+0xb8>)
    1e90:	468c      	mov	ip, r1
    1e92:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1e94:	261f      	movs	r6, #31
    1e96:	4033      	ands	r3, r6
    1e98:	2501      	movs	r5, #1
    1e9a:	0029      	movs	r1, r5
    1e9c:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    1e9e:	6191      	str	r1, [r2, #24]
	config->mode             = SPI_MODE_MASTER;
    1ea0:	ac02      	add	r4, sp, #8
    1ea2:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    1ea4:	2300      	movs	r3, #0
    1ea6:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    1ea8:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    1eaa:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    1eac:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    1eae:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
    1eb0:	74e5      	strb	r5, [r4, #19]
	config->master_slave_select_enable= false;
    1eb2:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    1eb4:	2224      	movs	r2, #36	; 0x24
    1eb6:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    1eb8:	3a18      	subs	r2, #24
    1eba:	2100      	movs	r1, #0
    1ebc:	a808      	add	r0, sp, #32
    1ebe:	4b17      	ldr	r3, [pc, #92]	; (1f1c <configure_spi_master+0xbc>)
    1ec0:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    1ec2:	4b17      	ldr	r3, [pc, #92]	; (1f20 <configure_spi_master+0xc0>)
    1ec4:	61a3      	str	r3, [r4, #24]
	config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_E;
    1ec6:	2380      	movs	r3, #128	; 0x80
    1ec8:	025b      	lsls	r3, r3, #9
    1eca:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = PINMUX_PB16C_SERCOM5_PAD0; // pb16c as a miso for serial flash
    1ecc:	4b15      	ldr	r3, [pc, #84]	; (1f24 <configure_spi_master+0xc4>)
    1ece:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    1ed0:	2301      	movs	r3, #1
    1ed2:	425b      	negs	r3, r3
    1ed4:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = PINMUX_PB22D_SERCOM5_PAD2; // pb22 as a mosi
    1ed6:	4b14      	ldr	r3, [pc, #80]	; (1f28 <configure_spi_master+0xc8>)
    1ed8:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = PINMUX_PB23D_SERCOM5_PAD3;
    1eda:	4b14      	ldr	r3, [pc, #80]	; (1f2c <configure_spi_master+0xcc>)
    1edc:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&spi_master_instance, SERCOM5, &config_spi_master);
    1ede:	4f14      	ldr	r7, [pc, #80]	; (1f30 <configure_spi_master+0xd0>)
    1ee0:	0022      	movs	r2, r4
    1ee2:	4914      	ldr	r1, [pc, #80]	; (1f34 <configure_spi_master+0xd4>)
    1ee4:	0038      	movs	r0, r7
    1ee6:	4b14      	ldr	r3, [pc, #80]	; (1f38 <configure_spi_master+0xd8>)
    1ee8:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    1eea:	683c      	ldr	r4, [r7, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1eec:	0020      	movs	r0, r4
    1eee:	4b13      	ldr	r3, [pc, #76]	; (1f3c <configure_spi_master+0xdc>)
    1ef0:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1ef2:	4006      	ands	r6, r0
    1ef4:	40b5      	lsls	r5, r6
    1ef6:	4b12      	ldr	r3, [pc, #72]	; (1f40 <configure_spi_master+0xe0>)
    1ef8:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1efa:	683a      	ldr	r2, [r7, #0]
	return (spi_module->SYNCBUSY.reg);
    1efc:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    1efe:	2b00      	cmp	r3, #0
    1f00:	d1fc      	bne.n	1efc <configure_spi_master+0x9c>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1f02:	6823      	ldr	r3, [r4, #0]
    1f04:	2202      	movs	r2, #2
    1f06:	4313      	orrs	r3, r2
    1f08:	6023      	str	r3, [r4, #0]
}
    1f0a:	b011      	add	sp, #68	; 0x44
    1f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f0e:	46c0      	nop			; (mov r8, r8)
    1f10:	200003c8 	.word	0x200003c8
    1f14:	000014fd 	.word	0x000014fd
    1f18:	41004400 	.word	0x41004400
    1f1c:	000023c5 	.word	0x000023c5
    1f20:	000186a0 	.word	0x000186a0
    1f24:	00300002 	.word	0x00300002
    1f28:	00360003 	.word	0x00360003
    1f2c:	00370003 	.word	0x00370003
    1f30:	2000038c 	.word	0x2000038c
    1f34:	42001c00 	.word	0x42001c00
    1f38:	00000ab9 	.word	0x00000ab9
    1f3c:	00001369 	.word	0x00001369
    1f40:	e000e100 	.word	0xe000e100

00001f44 <configure_spi_master_callbacks>:
{
    1f44:	b510      	push	{r4, lr}
	spi_register_callback(&spi_master_instance, callback_spi_master, SPI_CALLBACK_BUFFER_RECEIVED); // SPI_CALLBACK_BUFFER_RECEIVED
    1f46:	4c06      	ldr	r4, [pc, #24]	; (1f60 <configure_spi_master_callbacks+0x1c>)
    1f48:	2201      	movs	r2, #1
    1f4a:	4906      	ldr	r1, [pc, #24]	; (1f64 <configure_spi_master_callbacks+0x20>)
    1f4c:	0020      	movs	r0, r4
    1f4e:	4b06      	ldr	r3, [pc, #24]	; (1f68 <configure_spi_master_callbacks+0x24>)
    1f50:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback |= (1 << callback_type);
    1f52:	2237      	movs	r2, #55	; 0x37
    1f54:	5ca3      	ldrb	r3, [r4, r2]
    1f56:	2102      	movs	r1, #2
    1f58:	430b      	orrs	r3, r1
    1f5a:	54a3      	strb	r3, [r4, r2]
}
    1f5c:	bd10      	pop	{r4, pc}
    1f5e:	46c0      	nop			; (mov r8, r8)
    1f60:	2000038c 	.word	0x2000038c
    1f64:	00001dcd 	.word	0x00001dcd
    1f68:	000010ed 	.word	0x000010ed

00001f6c <main>:
{
    1f6c:	b530      	push	{r4, r5, lr}
    1f6e:	b085      	sub	sp, #20
	system_init();
    1f70:	4b26      	ldr	r3, [pc, #152]	; (200c <STACK_SIZE+0xc>)
    1f72:	4798      	blx	r3
	delay_init();
    1f74:	4b26      	ldr	r3, [pc, #152]	; (2010 <STACK_SIZE+0x10>)
    1f76:	4798      	blx	r3
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM3;
    1f78:	4a26      	ldr	r2, [pc, #152]	; (2014 <STACK_SIZE+0x14>)
    1f7a:	6a13      	ldr	r3, [r2, #32]
    1f7c:	2120      	movs	r1, #32
    1f7e:	430b      	orrs	r3, r1
    1f80:	6213      	str	r3, [r2, #32]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_SERCOM3_CORE;
    1f82:	4a25      	ldr	r2, [pc, #148]	; (2018 <STACK_SIZE+0x18>)
    1f84:	4b25      	ldr	r3, [pc, #148]	; (201c <STACK_SIZE+0x1c>)
    1f86:	805a      	strh	r2, [r3, #2]
	PORT->Group[0].PINCFG[22].bit.PMUXEN = 1;
    1f88:	4b25      	ldr	r3, [pc, #148]	; (2020 <STACK_SIZE+0x20>)
    1f8a:	2256      	movs	r2, #86	; 0x56
    1f8c:	5c99      	ldrb	r1, [r3, r2]
    1f8e:	2401      	movs	r4, #1
    1f90:	4321      	orrs	r1, r4
    1f92:	5499      	strb	r1, [r3, r2]
	PORT->Group[0].PMUX[11].bit.PMUXE = 0x2; // pa22 is config as sercom3 pad[0]
    1f94:	213b      	movs	r1, #59	; 0x3b
    1f96:	5c5a      	ldrb	r2, [r3, r1]
    1f98:	200f      	movs	r0, #15
    1f9a:	4382      	bics	r2, r0
    1f9c:	2002      	movs	r0, #2
    1f9e:	4302      	orrs	r2, r0
    1fa0:	545a      	strb	r2, [r3, r1]
	PORT->Group[0].PINCFG[23].bit.PMUXEN = 1;
    1fa2:	2057      	movs	r0, #87	; 0x57
    1fa4:	5c1a      	ldrb	r2, [r3, r0]
    1fa6:	4322      	orrs	r2, r4
    1fa8:	541a      	strb	r2, [r3, r0]
	PORT->Group[0].PMUX[11].bit.PMUXO = 0x2; // pa23 is config as sercom3 pad[1]
    1faa:	5c58      	ldrb	r0, [r3, r1]
    1fac:	220f      	movs	r2, #15
    1fae:	4002      	ands	r2, r0
    1fb0:	2020      	movs	r0, #32
    1fb2:	4302      	orrs	r2, r0
    1fb4:	545a      	strb	r2, [r3, r1]
	uartInit(115200);
    1fb6:	20e1      	movs	r0, #225	; 0xe1
    1fb8:	0240      	lsls	r0, r0, #9
    1fba:	4b1a      	ldr	r3, [pc, #104]	; (2024 <STACK_SIZE+0x24>)
    1fbc:	4798      	blx	r3
	cpu_irq_enable();
    1fbe:	4b1a      	ldr	r3, [pc, #104]	; (2028 <STACK_SIZE+0x28>)
    1fc0:	2201      	movs	r2, #1
    1fc2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    1fc4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1fc8:	b662      	cpsie	i
	configure_spi_master();
    1fca:	4b18      	ldr	r3, [pc, #96]	; (202c <STACK_SIZE+0x2c>)
    1fcc:	4798      	blx	r3
	configure_spi_master_callbacks();
    1fce:	4b18      	ldr	r3, [pc, #96]	; (2030 <STACK_SIZE+0x30>)
    1fd0:	4798      	blx	r3
	uint8_t string[] = "Hello World!\r\n"; // testing whether uart is working or not
    1fd2:	4668      	mov	r0, sp
    1fd4:	4b17      	ldr	r3, [pc, #92]	; (2034 <STACK_SIZE+0x34>)
    1fd6:	466a      	mov	r2, sp
    1fd8:	cb32      	ldmia	r3!, {r1, r4, r5}
    1fda:	c232      	stmia	r2!, {r1, r4, r5}
    1fdc:	8819      	ldrh	r1, [r3, #0]
    1fde:	8011      	strh	r1, [r2, #0]
    1fe0:	789b      	ldrb	r3, [r3, #2]
    1fe2:	7093      	strb	r3, [r2, #2]
	uartWrite(string, sizeof(string));
    1fe4:	210f      	movs	r1, #15
    1fe6:	4b14      	ldr	r3, [pc, #80]	; (2038 <STACK_SIZE+0x38>)
    1fe8:	4798      	blx	r3
	delay_ms(50);
    1fea:	2032      	movs	r0, #50	; 0x32
    1fec:	4b13      	ldr	r3, [pc, #76]	; (203c <STACK_SIZE+0x3c>)
    1fee:	4798      	blx	r3
	globalUnprotected();
    1ff0:	4b13      	ldr	r3, [pc, #76]	; (2040 <STACK_SIZE+0x40>)
    1ff2:	4798      	blx	r3
	blockErase(0x20, 0x00000000);
    1ff4:	2100      	movs	r1, #0
    1ff6:	2020      	movs	r0, #32
    1ff8:	4b12      	ldr	r3, [pc, #72]	; (2044 <STACK_SIZE+0x44>)
    1ffa:	4798      	blx	r3
	readArray(0x1b, 0x00000000, 5, buffread);
    1ffc:	4b12      	ldr	r3, [pc, #72]	; (2048 <STACK_SIZE+0x48>)
    1ffe:	2205      	movs	r2, #5
    2000:	2100      	movs	r1, #0
    2002:	201b      	movs	r0, #27
    2004:	4c11      	ldr	r4, [pc, #68]	; (204c <STACK_SIZE+0x4c>)
    2006:	47a0      	blx	r4
    2008:	e7fe      	b.n	2008 <STACK_SIZE+0x8>
    200a:	46c0      	nop			; (mov r8, r8)
    200c:	00001cb9 	.word	0x00001cb9
    2010:	000013e9 	.word	0x000013e9
    2014:	40000400 	.word	0x40000400
    2018:	00004017 	.word	0x00004017
    201c:	40000c00 	.word	0x40000c00
    2020:	41004400 	.word	0x41004400
    2024:	00000339 	.word	0x00000339
    2028:	2000000c 	.word	0x2000000c
    202c:	00001e61 	.word	0x00001e61
    2030:	00001f45 	.word	0x00001f45
    2034:	0000243c 	.word	0x0000243c
    2038:	000003f5 	.word	0x000003f5
    203c:	00001429 	.word	0x00001429
    2040:	000007f1 	.word	0x000007f1
    2044:	00000879 	.word	0x00000879
    2048:	2000006c 	.word	0x2000006c
    204c:	0000096d 	.word	0x0000096d

00002050 <__udivsi3>:
    2050:	2200      	movs	r2, #0
    2052:	0843      	lsrs	r3, r0, #1
    2054:	428b      	cmp	r3, r1
    2056:	d374      	bcc.n	2142 <__udivsi3+0xf2>
    2058:	0903      	lsrs	r3, r0, #4
    205a:	428b      	cmp	r3, r1
    205c:	d35f      	bcc.n	211e <__udivsi3+0xce>
    205e:	0a03      	lsrs	r3, r0, #8
    2060:	428b      	cmp	r3, r1
    2062:	d344      	bcc.n	20ee <__udivsi3+0x9e>
    2064:	0b03      	lsrs	r3, r0, #12
    2066:	428b      	cmp	r3, r1
    2068:	d328      	bcc.n	20bc <__udivsi3+0x6c>
    206a:	0c03      	lsrs	r3, r0, #16
    206c:	428b      	cmp	r3, r1
    206e:	d30d      	bcc.n	208c <__udivsi3+0x3c>
    2070:	22ff      	movs	r2, #255	; 0xff
    2072:	0209      	lsls	r1, r1, #8
    2074:	ba12      	rev	r2, r2
    2076:	0c03      	lsrs	r3, r0, #16
    2078:	428b      	cmp	r3, r1
    207a:	d302      	bcc.n	2082 <__udivsi3+0x32>
    207c:	1212      	asrs	r2, r2, #8
    207e:	0209      	lsls	r1, r1, #8
    2080:	d065      	beq.n	214e <__udivsi3+0xfe>
    2082:	0b03      	lsrs	r3, r0, #12
    2084:	428b      	cmp	r3, r1
    2086:	d319      	bcc.n	20bc <__udivsi3+0x6c>
    2088:	e000      	b.n	208c <__udivsi3+0x3c>
    208a:	0a09      	lsrs	r1, r1, #8
    208c:	0bc3      	lsrs	r3, r0, #15
    208e:	428b      	cmp	r3, r1
    2090:	d301      	bcc.n	2096 <__udivsi3+0x46>
    2092:	03cb      	lsls	r3, r1, #15
    2094:	1ac0      	subs	r0, r0, r3
    2096:	4152      	adcs	r2, r2
    2098:	0b83      	lsrs	r3, r0, #14
    209a:	428b      	cmp	r3, r1
    209c:	d301      	bcc.n	20a2 <__udivsi3+0x52>
    209e:	038b      	lsls	r3, r1, #14
    20a0:	1ac0      	subs	r0, r0, r3
    20a2:	4152      	adcs	r2, r2
    20a4:	0b43      	lsrs	r3, r0, #13
    20a6:	428b      	cmp	r3, r1
    20a8:	d301      	bcc.n	20ae <__udivsi3+0x5e>
    20aa:	034b      	lsls	r3, r1, #13
    20ac:	1ac0      	subs	r0, r0, r3
    20ae:	4152      	adcs	r2, r2
    20b0:	0b03      	lsrs	r3, r0, #12
    20b2:	428b      	cmp	r3, r1
    20b4:	d301      	bcc.n	20ba <__udivsi3+0x6a>
    20b6:	030b      	lsls	r3, r1, #12
    20b8:	1ac0      	subs	r0, r0, r3
    20ba:	4152      	adcs	r2, r2
    20bc:	0ac3      	lsrs	r3, r0, #11
    20be:	428b      	cmp	r3, r1
    20c0:	d301      	bcc.n	20c6 <__udivsi3+0x76>
    20c2:	02cb      	lsls	r3, r1, #11
    20c4:	1ac0      	subs	r0, r0, r3
    20c6:	4152      	adcs	r2, r2
    20c8:	0a83      	lsrs	r3, r0, #10
    20ca:	428b      	cmp	r3, r1
    20cc:	d301      	bcc.n	20d2 <__udivsi3+0x82>
    20ce:	028b      	lsls	r3, r1, #10
    20d0:	1ac0      	subs	r0, r0, r3
    20d2:	4152      	adcs	r2, r2
    20d4:	0a43      	lsrs	r3, r0, #9
    20d6:	428b      	cmp	r3, r1
    20d8:	d301      	bcc.n	20de <__udivsi3+0x8e>
    20da:	024b      	lsls	r3, r1, #9
    20dc:	1ac0      	subs	r0, r0, r3
    20de:	4152      	adcs	r2, r2
    20e0:	0a03      	lsrs	r3, r0, #8
    20e2:	428b      	cmp	r3, r1
    20e4:	d301      	bcc.n	20ea <__udivsi3+0x9a>
    20e6:	020b      	lsls	r3, r1, #8
    20e8:	1ac0      	subs	r0, r0, r3
    20ea:	4152      	adcs	r2, r2
    20ec:	d2cd      	bcs.n	208a <__udivsi3+0x3a>
    20ee:	09c3      	lsrs	r3, r0, #7
    20f0:	428b      	cmp	r3, r1
    20f2:	d301      	bcc.n	20f8 <__udivsi3+0xa8>
    20f4:	01cb      	lsls	r3, r1, #7
    20f6:	1ac0      	subs	r0, r0, r3
    20f8:	4152      	adcs	r2, r2
    20fa:	0983      	lsrs	r3, r0, #6
    20fc:	428b      	cmp	r3, r1
    20fe:	d301      	bcc.n	2104 <__udivsi3+0xb4>
    2100:	018b      	lsls	r3, r1, #6
    2102:	1ac0      	subs	r0, r0, r3
    2104:	4152      	adcs	r2, r2
    2106:	0943      	lsrs	r3, r0, #5
    2108:	428b      	cmp	r3, r1
    210a:	d301      	bcc.n	2110 <__udivsi3+0xc0>
    210c:	014b      	lsls	r3, r1, #5
    210e:	1ac0      	subs	r0, r0, r3
    2110:	4152      	adcs	r2, r2
    2112:	0903      	lsrs	r3, r0, #4
    2114:	428b      	cmp	r3, r1
    2116:	d301      	bcc.n	211c <__udivsi3+0xcc>
    2118:	010b      	lsls	r3, r1, #4
    211a:	1ac0      	subs	r0, r0, r3
    211c:	4152      	adcs	r2, r2
    211e:	08c3      	lsrs	r3, r0, #3
    2120:	428b      	cmp	r3, r1
    2122:	d301      	bcc.n	2128 <__udivsi3+0xd8>
    2124:	00cb      	lsls	r3, r1, #3
    2126:	1ac0      	subs	r0, r0, r3
    2128:	4152      	adcs	r2, r2
    212a:	0883      	lsrs	r3, r0, #2
    212c:	428b      	cmp	r3, r1
    212e:	d301      	bcc.n	2134 <__udivsi3+0xe4>
    2130:	008b      	lsls	r3, r1, #2
    2132:	1ac0      	subs	r0, r0, r3
    2134:	4152      	adcs	r2, r2
    2136:	0843      	lsrs	r3, r0, #1
    2138:	428b      	cmp	r3, r1
    213a:	d301      	bcc.n	2140 <__udivsi3+0xf0>
    213c:	004b      	lsls	r3, r1, #1
    213e:	1ac0      	subs	r0, r0, r3
    2140:	4152      	adcs	r2, r2
    2142:	1a41      	subs	r1, r0, r1
    2144:	d200      	bcs.n	2148 <__udivsi3+0xf8>
    2146:	4601      	mov	r1, r0
    2148:	4152      	adcs	r2, r2
    214a:	4610      	mov	r0, r2
    214c:	4770      	bx	lr
    214e:	e7ff      	b.n	2150 <__udivsi3+0x100>
    2150:	b501      	push	{r0, lr}
    2152:	2000      	movs	r0, #0
    2154:	f000 f806 	bl	2164 <__aeabi_idiv0>
    2158:	bd02      	pop	{r1, pc}
    215a:	46c0      	nop			; (mov r8, r8)

0000215c <__aeabi_uidivmod>:
    215c:	2900      	cmp	r1, #0
    215e:	d0f7      	beq.n	2150 <__udivsi3+0x100>
    2160:	e776      	b.n	2050 <__udivsi3>
    2162:	4770      	bx	lr

00002164 <__aeabi_idiv0>:
    2164:	4770      	bx	lr
    2166:	46c0      	nop			; (mov r8, r8)

00002168 <__aeabi_uldivmod>:
    2168:	2b00      	cmp	r3, #0
    216a:	d111      	bne.n	2190 <__aeabi_uldivmod+0x28>
    216c:	2a00      	cmp	r2, #0
    216e:	d10f      	bne.n	2190 <__aeabi_uldivmod+0x28>
    2170:	2900      	cmp	r1, #0
    2172:	d100      	bne.n	2176 <__aeabi_uldivmod+0xe>
    2174:	2800      	cmp	r0, #0
    2176:	d002      	beq.n	217e <__aeabi_uldivmod+0x16>
    2178:	2100      	movs	r1, #0
    217a:	43c9      	mvns	r1, r1
    217c:	1c08      	adds	r0, r1, #0
    217e:	b407      	push	{r0, r1, r2}
    2180:	4802      	ldr	r0, [pc, #8]	; (218c <__aeabi_uldivmod+0x24>)
    2182:	a102      	add	r1, pc, #8	; (adr r1, 218c <__aeabi_uldivmod+0x24>)
    2184:	1840      	adds	r0, r0, r1
    2186:	9002      	str	r0, [sp, #8]
    2188:	bd03      	pop	{r0, r1, pc}
    218a:	46c0      	nop			; (mov r8, r8)
    218c:	ffffffd9 	.word	0xffffffd9
    2190:	b403      	push	{r0, r1}
    2192:	4668      	mov	r0, sp
    2194:	b501      	push	{r0, lr}
    2196:	9802      	ldr	r0, [sp, #8]
    2198:	f000 f806 	bl	21a8 <__udivmoddi4>
    219c:	9b01      	ldr	r3, [sp, #4]
    219e:	469e      	mov	lr, r3
    21a0:	b002      	add	sp, #8
    21a2:	bc0c      	pop	{r2, r3}
    21a4:	4770      	bx	lr
    21a6:	46c0      	nop			; (mov r8, r8)

000021a8 <__udivmoddi4>:
    21a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    21aa:	4657      	mov	r7, sl
    21ac:	464e      	mov	r6, r9
    21ae:	4645      	mov	r5, r8
    21b0:	46de      	mov	lr, fp
    21b2:	b5e0      	push	{r5, r6, r7, lr}
    21b4:	0004      	movs	r4, r0
    21b6:	b083      	sub	sp, #12
    21b8:	000d      	movs	r5, r1
    21ba:	4692      	mov	sl, r2
    21bc:	4699      	mov	r9, r3
    21be:	428b      	cmp	r3, r1
    21c0:	d82f      	bhi.n	2222 <__udivmoddi4+0x7a>
    21c2:	d02c      	beq.n	221e <__udivmoddi4+0x76>
    21c4:	4649      	mov	r1, r9
    21c6:	4650      	mov	r0, sl
    21c8:	f000 f8ae 	bl	2328 <__clzdi2>
    21cc:	0029      	movs	r1, r5
    21ce:	0006      	movs	r6, r0
    21d0:	0020      	movs	r0, r4
    21d2:	f000 f8a9 	bl	2328 <__clzdi2>
    21d6:	1a33      	subs	r3, r6, r0
    21d8:	4698      	mov	r8, r3
    21da:	3b20      	subs	r3, #32
    21dc:	469b      	mov	fp, r3
    21de:	d500      	bpl.n	21e2 <__udivmoddi4+0x3a>
    21e0:	e074      	b.n	22cc <__udivmoddi4+0x124>
    21e2:	4653      	mov	r3, sl
    21e4:	465a      	mov	r2, fp
    21e6:	4093      	lsls	r3, r2
    21e8:	001f      	movs	r7, r3
    21ea:	4653      	mov	r3, sl
    21ec:	4642      	mov	r2, r8
    21ee:	4093      	lsls	r3, r2
    21f0:	001e      	movs	r6, r3
    21f2:	42af      	cmp	r7, r5
    21f4:	d829      	bhi.n	224a <__udivmoddi4+0xa2>
    21f6:	d026      	beq.n	2246 <__udivmoddi4+0x9e>
    21f8:	465b      	mov	r3, fp
    21fa:	1ba4      	subs	r4, r4, r6
    21fc:	41bd      	sbcs	r5, r7
    21fe:	2b00      	cmp	r3, #0
    2200:	da00      	bge.n	2204 <__udivmoddi4+0x5c>
    2202:	e079      	b.n	22f8 <__udivmoddi4+0x150>
    2204:	2200      	movs	r2, #0
    2206:	2300      	movs	r3, #0
    2208:	9200      	str	r2, [sp, #0]
    220a:	9301      	str	r3, [sp, #4]
    220c:	2301      	movs	r3, #1
    220e:	465a      	mov	r2, fp
    2210:	4093      	lsls	r3, r2
    2212:	9301      	str	r3, [sp, #4]
    2214:	2301      	movs	r3, #1
    2216:	4642      	mov	r2, r8
    2218:	4093      	lsls	r3, r2
    221a:	9300      	str	r3, [sp, #0]
    221c:	e019      	b.n	2252 <__udivmoddi4+0xaa>
    221e:	4282      	cmp	r2, r0
    2220:	d9d0      	bls.n	21c4 <__udivmoddi4+0x1c>
    2222:	2200      	movs	r2, #0
    2224:	2300      	movs	r3, #0
    2226:	9200      	str	r2, [sp, #0]
    2228:	9301      	str	r3, [sp, #4]
    222a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    222c:	2b00      	cmp	r3, #0
    222e:	d001      	beq.n	2234 <__udivmoddi4+0x8c>
    2230:	601c      	str	r4, [r3, #0]
    2232:	605d      	str	r5, [r3, #4]
    2234:	9800      	ldr	r0, [sp, #0]
    2236:	9901      	ldr	r1, [sp, #4]
    2238:	b003      	add	sp, #12
    223a:	bc3c      	pop	{r2, r3, r4, r5}
    223c:	4690      	mov	r8, r2
    223e:	4699      	mov	r9, r3
    2240:	46a2      	mov	sl, r4
    2242:	46ab      	mov	fp, r5
    2244:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2246:	42a3      	cmp	r3, r4
    2248:	d9d6      	bls.n	21f8 <__udivmoddi4+0x50>
    224a:	2200      	movs	r2, #0
    224c:	2300      	movs	r3, #0
    224e:	9200      	str	r2, [sp, #0]
    2250:	9301      	str	r3, [sp, #4]
    2252:	4643      	mov	r3, r8
    2254:	2b00      	cmp	r3, #0
    2256:	d0e8      	beq.n	222a <__udivmoddi4+0x82>
    2258:	07fb      	lsls	r3, r7, #31
    225a:	0872      	lsrs	r2, r6, #1
    225c:	431a      	orrs	r2, r3
    225e:	4646      	mov	r6, r8
    2260:	087b      	lsrs	r3, r7, #1
    2262:	e00e      	b.n	2282 <__udivmoddi4+0xda>
    2264:	42ab      	cmp	r3, r5
    2266:	d101      	bne.n	226c <__udivmoddi4+0xc4>
    2268:	42a2      	cmp	r2, r4
    226a:	d80c      	bhi.n	2286 <__udivmoddi4+0xde>
    226c:	1aa4      	subs	r4, r4, r2
    226e:	419d      	sbcs	r5, r3
    2270:	2001      	movs	r0, #1
    2272:	1924      	adds	r4, r4, r4
    2274:	416d      	adcs	r5, r5
    2276:	2100      	movs	r1, #0
    2278:	3e01      	subs	r6, #1
    227a:	1824      	adds	r4, r4, r0
    227c:	414d      	adcs	r5, r1
    227e:	2e00      	cmp	r6, #0
    2280:	d006      	beq.n	2290 <__udivmoddi4+0xe8>
    2282:	42ab      	cmp	r3, r5
    2284:	d9ee      	bls.n	2264 <__udivmoddi4+0xbc>
    2286:	3e01      	subs	r6, #1
    2288:	1924      	adds	r4, r4, r4
    228a:	416d      	adcs	r5, r5
    228c:	2e00      	cmp	r6, #0
    228e:	d1f8      	bne.n	2282 <__udivmoddi4+0xda>
    2290:	465b      	mov	r3, fp
    2292:	9800      	ldr	r0, [sp, #0]
    2294:	9901      	ldr	r1, [sp, #4]
    2296:	1900      	adds	r0, r0, r4
    2298:	4169      	adcs	r1, r5
    229a:	2b00      	cmp	r3, #0
    229c:	db22      	blt.n	22e4 <__udivmoddi4+0x13c>
    229e:	002b      	movs	r3, r5
    22a0:	465a      	mov	r2, fp
    22a2:	40d3      	lsrs	r3, r2
    22a4:	002a      	movs	r2, r5
    22a6:	4644      	mov	r4, r8
    22a8:	40e2      	lsrs	r2, r4
    22aa:	001c      	movs	r4, r3
    22ac:	465b      	mov	r3, fp
    22ae:	0015      	movs	r5, r2
    22b0:	2b00      	cmp	r3, #0
    22b2:	db2c      	blt.n	230e <__udivmoddi4+0x166>
    22b4:	0026      	movs	r6, r4
    22b6:	409e      	lsls	r6, r3
    22b8:	0033      	movs	r3, r6
    22ba:	0026      	movs	r6, r4
    22bc:	4647      	mov	r7, r8
    22be:	40be      	lsls	r6, r7
    22c0:	0032      	movs	r2, r6
    22c2:	1a80      	subs	r0, r0, r2
    22c4:	4199      	sbcs	r1, r3
    22c6:	9000      	str	r0, [sp, #0]
    22c8:	9101      	str	r1, [sp, #4]
    22ca:	e7ae      	b.n	222a <__udivmoddi4+0x82>
    22cc:	4642      	mov	r2, r8
    22ce:	2320      	movs	r3, #32
    22d0:	1a9b      	subs	r3, r3, r2
    22d2:	4652      	mov	r2, sl
    22d4:	40da      	lsrs	r2, r3
    22d6:	4641      	mov	r1, r8
    22d8:	0013      	movs	r3, r2
    22da:	464a      	mov	r2, r9
    22dc:	408a      	lsls	r2, r1
    22de:	0017      	movs	r7, r2
    22e0:	431f      	orrs	r7, r3
    22e2:	e782      	b.n	21ea <__udivmoddi4+0x42>
    22e4:	4642      	mov	r2, r8
    22e6:	2320      	movs	r3, #32
    22e8:	1a9b      	subs	r3, r3, r2
    22ea:	002a      	movs	r2, r5
    22ec:	4646      	mov	r6, r8
    22ee:	409a      	lsls	r2, r3
    22f0:	0023      	movs	r3, r4
    22f2:	40f3      	lsrs	r3, r6
    22f4:	4313      	orrs	r3, r2
    22f6:	e7d5      	b.n	22a4 <__udivmoddi4+0xfc>
    22f8:	4642      	mov	r2, r8
    22fa:	2320      	movs	r3, #32
    22fc:	2100      	movs	r1, #0
    22fe:	1a9b      	subs	r3, r3, r2
    2300:	2200      	movs	r2, #0
    2302:	9100      	str	r1, [sp, #0]
    2304:	9201      	str	r2, [sp, #4]
    2306:	2201      	movs	r2, #1
    2308:	40da      	lsrs	r2, r3
    230a:	9201      	str	r2, [sp, #4]
    230c:	e782      	b.n	2214 <__udivmoddi4+0x6c>
    230e:	4642      	mov	r2, r8
    2310:	2320      	movs	r3, #32
    2312:	0026      	movs	r6, r4
    2314:	1a9b      	subs	r3, r3, r2
    2316:	40de      	lsrs	r6, r3
    2318:	002f      	movs	r7, r5
    231a:	46b4      	mov	ip, r6
    231c:	4097      	lsls	r7, r2
    231e:	4666      	mov	r6, ip
    2320:	003b      	movs	r3, r7
    2322:	4333      	orrs	r3, r6
    2324:	e7c9      	b.n	22ba <__udivmoddi4+0x112>
    2326:	46c0      	nop			; (mov r8, r8)

00002328 <__clzdi2>:
    2328:	b510      	push	{r4, lr}
    232a:	2900      	cmp	r1, #0
    232c:	d103      	bne.n	2336 <__clzdi2+0xe>
    232e:	f000 f807 	bl	2340 <__clzsi2>
    2332:	3020      	adds	r0, #32
    2334:	e002      	b.n	233c <__clzdi2+0x14>
    2336:	1c08      	adds	r0, r1, #0
    2338:	f000 f802 	bl	2340 <__clzsi2>
    233c:	bd10      	pop	{r4, pc}
    233e:	46c0      	nop			; (mov r8, r8)

00002340 <__clzsi2>:
    2340:	211c      	movs	r1, #28
    2342:	2301      	movs	r3, #1
    2344:	041b      	lsls	r3, r3, #16
    2346:	4298      	cmp	r0, r3
    2348:	d301      	bcc.n	234e <__clzsi2+0xe>
    234a:	0c00      	lsrs	r0, r0, #16
    234c:	3910      	subs	r1, #16
    234e:	0a1b      	lsrs	r3, r3, #8
    2350:	4298      	cmp	r0, r3
    2352:	d301      	bcc.n	2358 <__clzsi2+0x18>
    2354:	0a00      	lsrs	r0, r0, #8
    2356:	3908      	subs	r1, #8
    2358:	091b      	lsrs	r3, r3, #4
    235a:	4298      	cmp	r0, r3
    235c:	d301      	bcc.n	2362 <__clzsi2+0x22>
    235e:	0900      	lsrs	r0, r0, #4
    2360:	3904      	subs	r1, #4
    2362:	a202      	add	r2, pc, #8	; (adr r2, 236c <__clzsi2+0x2c>)
    2364:	5c10      	ldrb	r0, [r2, r0]
    2366:	1840      	adds	r0, r0, r1
    2368:	4770      	bx	lr
    236a:	46c0      	nop			; (mov r8, r8)
    236c:	02020304 	.word	0x02020304
    2370:	01010101 	.word	0x01010101
	...

0000237c <__libc_init_array>:
    237c:	b570      	push	{r4, r5, r6, lr}
    237e:	2600      	movs	r6, #0
    2380:	4d0c      	ldr	r5, [pc, #48]	; (23b4 <__libc_init_array+0x38>)
    2382:	4c0d      	ldr	r4, [pc, #52]	; (23b8 <__libc_init_array+0x3c>)
    2384:	1b64      	subs	r4, r4, r5
    2386:	10a4      	asrs	r4, r4, #2
    2388:	42a6      	cmp	r6, r4
    238a:	d109      	bne.n	23a0 <__libc_init_array+0x24>
    238c:	2600      	movs	r6, #0
    238e:	f000 f85d 	bl	244c <_init>
    2392:	4d0a      	ldr	r5, [pc, #40]	; (23bc <__libc_init_array+0x40>)
    2394:	4c0a      	ldr	r4, [pc, #40]	; (23c0 <__libc_init_array+0x44>)
    2396:	1b64      	subs	r4, r4, r5
    2398:	10a4      	asrs	r4, r4, #2
    239a:	42a6      	cmp	r6, r4
    239c:	d105      	bne.n	23aa <__libc_init_array+0x2e>
    239e:	bd70      	pop	{r4, r5, r6, pc}
    23a0:	00b3      	lsls	r3, r6, #2
    23a2:	58eb      	ldr	r3, [r5, r3]
    23a4:	4798      	blx	r3
    23a6:	3601      	adds	r6, #1
    23a8:	e7ee      	b.n	2388 <__libc_init_array+0xc>
    23aa:	00b3      	lsls	r3, r6, #2
    23ac:	58eb      	ldr	r3, [r5, r3]
    23ae:	4798      	blx	r3
    23b0:	3601      	adds	r6, #1
    23b2:	e7f2      	b.n	239a <__libc_init_array+0x1e>
    23b4:	00002458 	.word	0x00002458
    23b8:	00002458 	.word	0x00002458
    23bc:	00002458 	.word	0x00002458
    23c0:	0000245c 	.word	0x0000245c

000023c4 <memset>:
    23c4:	0003      	movs	r3, r0
    23c6:	1882      	adds	r2, r0, r2
    23c8:	4293      	cmp	r3, r2
    23ca:	d100      	bne.n	23ce <memset+0xa>
    23cc:	4770      	bx	lr
    23ce:	7019      	strb	r1, [r3, #0]
    23d0:	3301      	adds	r3, #1
    23d2:	e7f9      	b.n	23c8 <memset+0x4>
    23d4:	42000800 	.word	0x42000800
    23d8:	42000c00 	.word	0x42000c00
    23dc:	42001000 	.word	0x42001000
    23e0:	42001400 	.word	0x42001400
    23e4:	42001800 	.word	0x42001800
    23e8:	42001c00 	.word	0x42001c00
    23ec:	000b001b 	.word	0x000b001b
    23f0:	00000003 	.word	0x00000003
    23f4:	00001532 	.word	0x00001532
    23f8:	0000152e 	.word	0x0000152e
    23fc:	0000152e 	.word	0x0000152e
    2400:	00001594 	.word	0x00001594
    2404:	00001594 	.word	0x00001594
    2408:	00001546 	.word	0x00001546
    240c:	00001538 	.word	0x00001538
    2410:	0000154c 	.word	0x0000154c
    2414:	00001582 	.word	0x00001582
    2418:	00001754 	.word	0x00001754
    241c:	00001734 	.word	0x00001734
    2420:	00001734 	.word	0x00001734
    2424:	000017c0 	.word	0x000017c0
    2428:	00001746 	.word	0x00001746
    242c:	00001762 	.word	0x00001762
    2430:	00001738 	.word	0x00001738
    2434:	00001770 	.word	0x00001770
    2438:	000017b0 	.word	0x000017b0
    243c:	6c6c6548 	.word	0x6c6c6548
    2440:	6f57206f 	.word	0x6f57206f
    2444:	21646c72 	.word	0x21646c72
    2448:	00000a0d 	.word	0x00000a0d

0000244c <_init>:
    244c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    244e:	46c0      	nop			; (mov r8, r8)
    2450:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2452:	bc08      	pop	{r3}
    2454:	469e      	mov	lr, r3
    2456:	4770      	bx	lr

00002458 <__init_array_start>:
    2458:	000000dd 	.word	0x000000dd

0000245c <_fini>:
    245c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    245e:	46c0      	nop			; (mov r8, r8)
    2460:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2462:	bc08      	pop	{r3}
    2464:	469e      	mov	lr, r3
    2466:	4770      	bx	lr

00002468 <__fini_array_start>:
    2468:	000000b5 	.word	0x000000b5
